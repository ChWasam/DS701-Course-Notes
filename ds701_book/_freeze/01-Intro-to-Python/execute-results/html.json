{
  "hash": "d74e16114522dbb159e981c279ccea70",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Introduction to Python\njupyter: python3\ncode-fold: false\n---\n\n\n\n\n[![](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/tools4ds/DS701-Course-Notes/blob/main/ds701_book/jupyter_notebooks/01-Intro-to-Python.ipynb)\n\nThis chapter will not be covered in lecture. It's here to refresh the memory of those who haven't used Python in a while.\n\nFor those that don't know Python -- but do know programming -- this chapter will give you an idea of how Python is similar to, and different from, your favorite programming language.\n\nPython is a fully object oriented programming language. It was originally created by Dutch programmer Guido van Rossum as a hobby project during his 1989 Christmas vacation. The name was inspired by Monty Python's Flying circus.\n\nTo install Python, we recommend using the free [Anaconda Scientific Python](https://anaconda.org/) distribution.\n\n## How do I run code?\n\nPython can be run interactively or via a script. For interactive versions of Python you can use Python interpreter `ipython`. [Jupyter](https://jupyter.org/) notebooks (.ipynb extension) run `ipython` in a browser. This is a great way to test out the code you are writing, demonstrate algorithms, and show visualizations. It allows for you to interact with the interpreter and fix mistakes as they happen. It has all the advantages of `ipython` plus interleaved documentation and graphical output.\n\nTo run Python as a script, you place all your code into a file, for example **program.py** and run `python program.py`. Scripts are used when your code has been fully debugged and tested. You want to run Python as a script when you are performing significant computations that do not require interactivity. An example of when to use a script over an interactive Jupyter notebook is if you are training a large machine learning model.\n\nRegardless of whether you are writing scripts or notebook files, it is essential to use an Integrated Development Environment (IDE). This is a software application that helps programmers develop code efficiently. For Python, Jupyter Notebook and Jupyter Lab are both examples of interactive Python IDEs. [Spyder](https://www.spyder-ide.org/) is a Python specific IDE for developing Python scripts.\n\nIn this course, we advise using [Visual Studio Code](https://code.visualstudio.com/) (VSCode) as your IDE. VSCode is an IDE that works for programming languages aside from Python. It has the advantage that you can develop both Python scripts (.py) and notebooks (.ipynb). In addition, there are many packages that you can install to help perform static analysis on the code you are writing. It is a very important tool to know how to use.\n\n## Functions and Methods\n\nFunction calls use standard syntax:\n\n```        \nfunc(argument1, argument2)\n```\n\nHowever most things you interact with in Python are **objects** and they have **methods**. A method is a function that operates on an object:\n\n```       \nobject.method(argument1, argument2)\n```\n\nNote that the method might modify the object, or it might return a new, different object. You just have to know the method and keep track of what it does.\n\n::: {#7744654a .cell execution_count=2}\n``` {.python .cell-code}\nnumber_list = [1, 3, 5, 7]\nnumber_list.append(8)\n```\n:::\n\n\n::: {#87434de6 .cell execution_count=3}\n``` {.python .cell-code}\nnumber_list\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n[1, 3, 5, 7, 8]\n```\n:::\n:::\n\n\n::: {#b6ece494 .cell execution_count=4}\n``` {.python .cell-code}\nstring = 'This is a string'\nstring.split()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n['This', 'is', 'a', 'string']\n```\n:::\n:::\n\n\n::: {#64e51ed4 .cell execution_count=5}\n``` {.python .cell-code}\nstring\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'This is a string'\n```\n:::\n:::\n\n\n## Printing\n\nFrom the interactive Python environment:\n\n::: {#6e34c153 .cell execution_count=6}\n``` {.python .cell-code}\nprint(\"Hello World\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello World\n```\n:::\n:::\n\n\nFrom a file:\n\n::: {#08e31908 .cell execution_count=7}\n``` {.python .cell-code}\nprint(\"Hello World!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello World!\n```\n:::\n:::\n\n\n## Data types\n\nBasic data types:\n\n1.  Strings\n2.  Integers\n3.  Floats\n4.  Booleans\n\nThese are all objects in Python.\n\n::: {#e30c3ccc .cell execution_count=8}\n``` {.python .cell-code}\na = 7\ntype(a)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nint\n```\n:::\n:::\n\n\n::: {#5f6836f6 .cell execution_count=9}\n``` {.python .cell-code}\nb = 3\ntype(b)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nint\n```\n:::\n:::\n\n\n::: {#41774e12 .cell execution_count=10}\n``` {.python .cell-code}\nc = 3.2\ntype(c)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nfloat\n```\n:::\n:::\n\n\n::: {#c109dfc1 .cell execution_count=11}\n``` {.python .cell-code}\nd = True\ntype(d)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nbool\n```\n:::\n:::\n\n\nPython **doesn't require explicitly declared variable types** like C and other languages. Python is dynamically typed.\n\n::: {#414c3edc .cell execution_count=12}\n``` {.python .cell-code}\nmyVar = 'I am a string'\nprint(myVar)\nmyVar = 2.3\nprint(myVar)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI am a string\n2.3\n```\n:::\n:::\n\n\n## Strings\n\nString manipulation will be very important for many of the tasks we will do. Here are some important string operations.\n\nA string uses either single quotes or double quotes. Pick one option and be consistent.\n\n::: {#1daa274f .cell execution_count=13}\n``` {.python .cell-code}\n'This is a string'\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n'This is a string'\n```\n:::\n:::\n\n\n::: {#84486768 .cell execution_count=14}\n``` {.python .cell-code}\n\"This is also a string\"\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n'This is also a string'\n```\n:::\n:::\n\n\nThe '+' operator concatenates strings.\n\n::: {#798cdbb4 .cell execution_count=15}\n``` {.python .cell-code}\na = \"Hello\"  \nb = \" World\" \na + b\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n'Hello World'\n```\n:::\n:::\n\n\nPortions of strings are manipulated using indexing (which Python calls 'slicing').\n\n::: {#7ec1bb3d .cell execution_count=16}\n``` {.python .cell-code}\na = \"World\"\na[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n'W'\n```\n:::\n:::\n\n\n::: {#36088a13 .cell execution_count=17}\n``` {.python .cell-code}\na[-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n'd'\n```\n:::\n:::\n\n\n::: {#e845786e .cell execution_count=18}\n``` {.python .cell-code}\n\"World\"[0:4]\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n'Worl'\n```\n:::\n:::\n\n\n::: {#59f7303f .cell execution_count=19}\n``` {.python .cell-code}\na[::-1]\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n'dlroW'\n```\n:::\n:::\n\n\nSome important string functions:\n\n::: {#68046381 .cell execution_count=20}\n``` {.python .cell-code}\na = \"Hello World\"\n\"-\".join(a)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n'H-e-l-l-o- -W-o-r-l-d'\n```\n:::\n:::\n\n\n::: {#ae315fc3 .cell execution_count=21}\n``` {.python .cell-code}\na.startswith(\"Wo\")\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nFalse\n```\n:::\n:::\n\n\n::: {#a89f984b .cell execution_count=22}\n``` {.python .cell-code}\na.endswith(\"rld\")\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#7dcdaade .cell execution_count=23}\n``` {.python .cell-code}\na.replace(\"o\", \"0\").replace(\"d\", \"[)\").replace(\"l\", \"1\")\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n'He110 W0r1[)'\n```\n:::\n:::\n\n\n::: {#5bbe73e1 .cell execution_count=24}\n``` {.python .cell-code}\na.split()\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n['Hello', 'World']\n```\n:::\n:::\n\n\n::: {#cbbd1797 .cell execution_count=25}\n``` {.python .cell-code}\na.split('o')\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n['Hell', ' W', 'rld']\n```\n:::\n:::\n\n\nStrings are an example of an **immutable** data type. Once you instantiate a string you cannot change any characters in it's set.\n\n::: {#40d945cf .cell execution_count=26}\n``` {.python .cell-code}\nstring = \"string\"\nstring[-1] = \"y\"  # This will generate and error as we attempt to modify the string\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[25], line 2</span>\n<span class=\"ansi-green-fg ansi-bold\">      1</span> string <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">string</span><span style=\"color:rgb(175,0,0)\">\"</span>\n<span class=\"ansi-green-fg\">----&gt; 2</span> <span class=\"ansi-yellow-bg\">string</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">-</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">1</span><span class=\"ansi-yellow-bg\">]</span> <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">\"</span><span style=\"color:rgb(175,0,0)\">y</span><span style=\"color:rgb(175,0,0)\">\"</span>  <span style=\"font-style:italic;color:rgb(95,135,135)\"># This will generate and error as we attempt to modify the string</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: 'str' object does not support item assignment</pre>\n```\n:::\n\n:::\n:::\n\n\nTo create a string with embedded objects use the `.format()` method:\n\n::: {#8e973143 .cell execution_count=27}\n``` {.python .cell-code}\ncourse_name = 'DS701'\nenrollment = 90\npercent_full = 100.0\n'The course {} has an enrollment of {} and is {} percent full.'.format(\n    course_name, enrollment, percent_full)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n'The course DS701 has an enrollment of 90 and is 100.0 percent full.'\n```\n:::\n:::\n\n\nA special formatting called an f-string allows you to print out variables very conveniently:\n\n::: {#7f6e30ba .cell execution_count=28}\n``` {.python .cell-code}\nf'The course {course_name} has an enrollment of {enrollment} and is {percent_full} percent full.'\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n'The course DS701 has an enrollment of 90 and is 100.0 percent full.'\n```\n:::\n:::\n\n\n## Code Structure\n\nPython uses indents and whitespace to group statements together. To write a short loop in C, you might use:\n\n``` c\nfor (i = 0, i < 5, i++){\n      printf(\"Hi! \\n\");\n   }\n```\n\nPython does not use curly braces like C, so the same program as above is written in Python as follows:\n\n::: {#98c9a4c8 .cell execution_count=29}\n``` {.python .cell-code}\nfor i in range(5):\n    print(\"Hi\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHi\nHi\nHi\nHi\nHi\n```\n:::\n:::\n\n\nIf you have nested for-loops, there is a further indent for the inner loop.\n\n::: {#d3d05fe6 .cell execution_count=30}\n``` {.python .cell-code}\nfor i in range(3):\n    for j in range(3):\n        print(i, j)\n    \n    print(\"This statement is within the i-loop, but not the j-loop\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0 0\n0 1\n0 2\nThis statement is within the i-loop, but not the j-loop\n1 0\n1 1\n1 2\nThis statement is within the i-loop, but not the j-loop\n2 0\n2 1\n2 2\nThis statement is within the i-loop, but not the j-loop\n```\n:::\n:::\n\n\n## File I/O\n\n`open()` and `close()` are used to access files. However if you use the `with` statement the file close is automatically done for you.\n\nYou should use `with`.\n\n::: {#1508a1f1 .cell execution_count=31}\n``` {.python .cell-code}\nwith open(\"example.txt\", \"w\") as f:\n    f.write(\"Hello World! \\n\")\n    f.write(\"How are you? \\n\")\n    f.write(\"I'm fine. OK.\\n\")\n```\n:::\n\n\nReading from a file:\n\n::: {#7be000b5 .cell execution_count=32}\n``` {.python .cell-code}\nwith open(\"example.txt\", \"r\") as f:\n    data = f.readlines()\n    for line in data:\n        words = line.split()\n        print(words)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Hello', 'World!']\n['How', 'are', 'you?']\n[\"I'm\", 'fine.', 'OK.']\n```\n:::\n:::\n\n\nHere is an example of counting the number of lines and words in a file:\n\n::: {#0e244ceb .cell execution_count=33}\n``` {.python .cell-code}\nlines = 0\nwords = 0\nthe_file = \"example.txt\"\n\nwith open(the_file, 'r') as f:\n    for line in f:\n        lines += 1\n        words += len(line.split())\nprint(f\"There are {lines} lines and {words} words in the {the_file} file.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThere are 3 lines and 8 words in the example.txt file.\n```\n:::\n:::\n\n\n## Lists, Tuples, Sets and Dictionaries\n\nNumber and strings alone are not enough! We need data types that can hold multiple values.\n\n### Lists\n\nA list is a collection of data items, which can be of differing types.\n\nHere is an empty list:\n\n::: {#31a21722 .cell execution_count=34}\n``` {.python .cell-code}\ngroceries = []\n```\n:::\n\n\nA list is **mutable**, meaning that it can be altered.\n\nAdding to the list:\n\n::: {#017e1ac3 .cell execution_count=35}\n``` {.python .cell-code}\ngroceries.append(\"oranges\")  \ngroceries.append(\"meat\")\ngroceries.append(\"asparagus\")\ngroceries\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n['oranges', 'meat', 'asparagus']\n```\n:::\n:::\n\n\nAccessing list items by index:\n\n::: {#59c09197 .cell execution_count=36}\n``` {.python .cell-code}\ngroceries[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n'oranges'\n```\n:::\n:::\n\n\n::: {#f72562a8 .cell execution_count=37}\n``` {.python .cell-code}\ngroceries[2]\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n'asparagus'\n```\n:::\n:::\n\n\n::: {#0f4a0163 .cell execution_count=38}\n``` {.python .cell-code}\nlen(groceries)\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n3\n```\n:::\n:::\n\n\nSort the items in the list:\n\n::: {#5ae6d3c7 .cell execution_count=39}\n``` {.python .cell-code}\ngroceries.sort()\ngroceries\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n['asparagus', 'meat', 'oranges']\n```\n:::\n:::\n\n\nRemove an item from a list:\n\n::: {#f930f51f .cell execution_count=40}\n``` {.python .cell-code}\ngroceries.remove('asparagus')\ngroceries\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n['meat', 'oranges']\n```\n:::\n:::\n\n\nBecause lists are mutable, you can arbitrarily modify them.\n\n::: {#7fded5be .cell execution_count=41}\n``` {.python .cell-code}\ngroceries[0] = 'peanut butter'\ngroceries\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n['peanut butter', 'oranges']\n```\n:::\n:::\n\n\n### List Comprehensions\n\nA **list comprehension** makes a new list from an old list.\n\nIt is **incredibly** useful and you definitely need to know how to use it.\n\n::: {#6b460079 .cell execution_count=42}\n``` {.python .cell-code}\ngroceries = ['asparagus', 'meat', 'oranges']\nveggie = [x for x in groceries if x != \"meat\"]\nveggie\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\n['asparagus', 'oranges']\n```\n:::\n:::\n\n\nThis is the same as:\n\n::: {#d81567b6 .cell execution_count=43}\n``` {.python .cell-code}\nnewlist = []\nfor x in groceries:\n    if x != 'meat':\n        newlist.append(x)\nnewlist\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```\n['asparagus', 'oranges']\n```\n:::\n:::\n\n\nRecall the mathematical notation:\n\n$$L_1 = \\left\\{x^2 : x \\in \\{0\\ldots 9\\}\\right\\}$$\n\n$$L_2 = \\left\\{2^0, 2^1, 2^2, 2^3,\\ldots, 2^{12}\\right\\}$$\n\n$$M = \\left\\{x \\mid x \\in L_1 \\text{ and } x \\text{ is even}\\right\\}$$\n\n::: {#d02bda3e .cell execution_count=44}\n``` {.python .cell-code}\nL1 = [x**2 for x in range(10)]\nL2 = [2**i for i in range(13)]\nprint(f'L1 is {L1}')\nprint(f'L2 is {L2}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nL1 is [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\nL2 is [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]\n```\n:::\n:::\n\n\n::: {#e2c2fb33 .cell execution_count=45}\n``` {.python .cell-code}\nM = [x for x in L1 if x % 2 == 0]\nprint('M is {}'.format(M))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nM is [0, 4, 16, 36, 64]\n```\n:::\n:::\n\n\nA  \"Sieve of Eratosthenes\" in list comprehensions.\n\nBasic idea: generate composite numbers, remove them from the set of all numbers, and what is left are the prime nnumbers.\n\n::: {#ed5c7cec .cell execution_count=46}\n``` {.python .cell-code}\nlimit = 50\ncomposites = [n for n in range(4, limit+1) if any(n % i == 0 for i in range(2, int(n**0.5)+1))]\n```\n:::\n\n\n::: {#37c4c4cb .cell execution_count=47}\n``` {.python .cell-code}\nprimes = [x for x in range(1, 50) if x not in composites]\nprint(primes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n```\n:::\n:::\n\n\nNotice how much more concise and clear the list comprehension is. It's more efficient too.\n\n### Sets\n\nA set is a collecton of items that cannot contain duplicates.\n\nSets handle operations like sets in mathematics.\n\n::: {#ebfba6d1 .cell execution_count=48}\n``` {.python .cell-code}\nnumbers = range(10)\nnumbers = set(numbers)\n\nevens = {0, 2, 4, 6, 8}\n\nodds = numbers - evens\nodds\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```\n{1, 3, 5, 7, 9}\n```\n:::\n:::\n\n\nSets also support the use of union (\\|), and intersection (&)\n\n### Dictionaries\n\nA dictionary is a map of keys to values.\n\n**Keys must be unique**.\n\n::: {#0690b370 .cell execution_count=49}\n``` {.python .cell-code}\nsimple_dict = {}\n\nsimple_dict['DS701'] = 'tools for data science'\n\nsimple_dict['DS701']\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\n'tools for data science'\n```\n:::\n:::\n\n\nCreating an already-initialized dictionary. Note the use of curly braces.\n\n::: {#6ab30983 .cell execution_count=50}\n``` {.python .cell-code}\nclasses = {\n    'DS701': 'tools for data science',\n    'DS542': 'deep learning for data science'\n}\n```\n:::\n\n\nCheck if item is in dictionary\n\n::: {#52b107cd .cell execution_count=51}\n``` {.python .cell-code}\n'DS680' in classes\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\nFalse\n```\n:::\n:::\n\n\nAdd new item\n\n::: {#6cf1d665 .cell execution_count=52}\n``` {.python .cell-code}\nclasses['DS680'] = 'data society and ethics'\nclasses['DS680']\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\n'data society and ethics'\n```\n:::\n:::\n\n\nGet just the keys\n\n::: {#99189bba .cell execution_count=53}\n``` {.python .cell-code}\nclasses.keys()\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\ndict_keys(['DS701', 'DS542', 'DS680'])\n```\n:::\n:::\n\n\nGet just the values\n\n::: {#8a096d48 .cell execution_count=54}\n``` {.python .cell-code}\nclasses.values()\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\ndict_values(['tools for data science', 'deep learning for data science', 'data society and ethics'])\n```\n:::\n:::\n\n\nGet the items in the dictionary\n\n::: {#7a80f4f5 .cell execution_count=55}\n``` {.python .cell-code}\nclasses.items()\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```\ndict_items([('DS701', 'tools for data science'), ('DS542', 'deep learning for data science'), ('DS680', 'data society and ethics')])\n```\n:::\n:::\n\n\nGet dictionary pairs another way\n\n::: {#947efc86 .cell execution_count=56}\n``` {.python .cell-code}\nfor key, value in classes.items():\n    print(key, value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDS701 tools for data science\nDS542 deep learning for data science\nDS680 data society and ethics\n```\n:::\n:::\n\n\nDictionaries can be combined to make complex (and very useful) data structures.\n\nHere is a list within a dictionary within a dictionary.\n\n::: {#9192e47d .cell execution_count=57}\n``` {.python .cell-code}\nprofessors = {\n    \"prof1\": {\n        \"name\": \"Thomas Gardos\",\n        \"interests\": [\"large language models\", \"deep learning\", \"machine learning\"]\n    },\n    \"prof2\": {\n        \"name\": \"Mark Crovella\",\n        \"interests\": [\"computer networks\", \"data mining\", \"biological networks\"]\n    },\n    \"prof3\": {\n        \"name\": \"Scott Ladenheim\",\n        \"interests\": [\"numerical linear algebra\", \"deep learning\", \"quantum machine learning\"]\n    }\n}\n```\n:::\n\n\n::: {#9a0b1c53 .cell execution_count=58}\n``` {.python .cell-code}\nfor prof in professors:\n    print('{} is interested in {}.'.format(\n            professors[prof][\"name\"],\n            professors[prof][\"interests\"][0]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThomas Gardos is interested in large language models.\nMark Crovella is interested in computer networks.\nScott Ladenheim is interested in numerical linear algebra.\n```\n:::\n:::\n\n\n### Tuples\n\nTuples are an **immutable** type. Like strings, once you create them, you cannot change them.\n\nBecause they are immutabile you can use them as keys in dictionaries.\n\nHowever, they are similar to lists in that they are a collection of data and that data can be of differing types.\n\nHere is a tuple version of our grocery list.\n\n::: {#e433ae5f .cell execution_count=59}\n``` {.python .cell-code}\ngroceries = ('orange', 'meat', 'asparagus', 2.5, True)\ngroceries\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```\n('orange', 'meat', 'asparagus', 2.5, True)\n```\n:::\n:::\n\n\n::: {#d24c4ac8 .cell execution_count=60}\n``` {.python .cell-code}\ngroceries[2]\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\n'asparagus'\n```\n:::\n:::\n\n\nWhat will happen here?\n\n::: {#109e2f77 .cell execution_count=61}\n``` {.python .cell-code}\ngroceries[2] = 'milk'\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg\">In[60], line 1</span>\n<span class=\"ansi-green-fg\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">groceries</span><span class=\"ansi-yellow-bg\">[</span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">2</span><span class=\"ansi-yellow-bg\">]</span> <span style=\"color:rgb(98,98,98)\">=</span> <span style=\"color:rgb(175,0,0)\">'</span><span style=\"color:rgb(175,0,0)\">milk</span><span style=\"color:rgb(175,0,0)\">'</span>\n\n<span class=\"ansi-red-fg\">TypeError</span>: 'tuple' object does not support item assignment</pre>\n```\n:::\n\n:::\n:::\n\n\n### Iterators and Generators\n\nWe can loop over the elements of a list using **for**\n\n::: {#08c13ff2 .cell execution_count=62}\n``` {.python .cell-code}\nfor i in range(4):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n1\n2\n3\n```\n:::\n:::\n\n\nWhen we use **for** for dictionaries it loops over the keys of the dictionary\n\n::: {#9cbdcc1f .cell execution_count=63}\n``` {.python .cell-code}\nfor k in {'thomas': 'gardos', 'scott': 'ladenheim'}:\n    print(k)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthomas\nscott\n```\n:::\n:::\n\n\nWhen we use **for** for strings it loops over the letters of the string:\n\n::: {#ea0708ad .cell execution_count=64}\n``` {.python .cell-code}\nfor l in 'python is magic':\n    print(l)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\np\ny\nt\nh\no\nn\n \ni\ns\n \nm\na\ng\ni\nc\n```\n:::\n:::\n\n\nWhat do these cases all have in common? All of them are **iterable** objects.\n\n::: {#412643b7 .cell execution_count=65}\n``` {.python .cell-code}\nlist({'thomas': 'gardos', 'scott': 'ladenheim'})\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\n['thomas', 'scott']\n```\n:::\n:::\n\n\n::: {#bfb3428f .cell execution_count=66}\n``` {.python .cell-code}\nlist('python is magic')\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```\n['p', 'y', 't', 'h', 'o', 'n', ' ', 'i', 's', ' ', 'm', 'a', 'g', 'i', 'c']\n```\n:::\n:::\n\n\n::: {#44885830 .cell execution_count=67}\n``` {.python .cell-code}\n'-'.join('thomas')\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```\n't-h-o-m-a-s'\n```\n:::\n:::\n\n\n::: {#17c1ba35 .cell execution_count=68}\n``` {.python .cell-code}\n'-'.join(['a', 'b', 'c'])\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```\n'a-b-c'\n```\n:::\n:::\n\n\n## Defining Functions\n\n::: {#cfbbdc23 .cell execution_count=69}\n``` {.python .cell-code}\ndef displayperson(name,age):\n    print(\"My name is {} and I am {} years old.\".format(name,age))\n    return\n    \ndisplayperson(\"Larry\", \"40\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMy name is Larry and I am 40 years old.\n```\n:::\n:::\n\n\n## Functional Programming\n\n<img src=\"figs/Functional-Homer.png\" width=\"400px\"/>\n\nFunctional programming is particularly valuable and common when working with data.\n\nWe'll see more sophisticated examples of this sort of programming later.\n\n### Lambda functions\n\nPython supports the creation of anonymous functions (i.e. functions that are not bound to a name) at runtime, using a construct called `lambda`.\n\n::: {#86a8277d .cell execution_count=70}\n``` {.python .cell-code}\ndef f(x):\n    return x**2\nf(8)\n```\n\n::: {.cell-output .cell-output-display execution_count=69}\n```\n64\n```\n:::\n:::\n\n\n::: {#2630d6b0 .cell execution_count=71}\n``` {.python .cell-code}\ng = lambda x: x**2\ng(8)\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\n64\n```\n:::\n:::\n\n\n::: {#d1ecdd0a .cell execution_count=72}\n``` {.python .cell-code}\n(lambda x: x**2)(8)\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```\n64\n```\n:::\n:::\n\n\nThe above pieces of code are all equivalent! Note that there is no `return` statement in the `lambda` function. Instead there is just a single expression, which defines what the function returns.\n\nA `lambda` function can take multiple arguments. However it has to get all its work done in a single line of code!\n\n::: {#ee9ce8be .cell execution_count=73}\n``` {.python .cell-code}\nf = lambda x, y : x + y\nf(2,3)\n```\n\n::: {.cell-output .cell-output-display execution_count=72}\n```\n5\n```\n:::\n:::\n\n\nA `lambda` function does not need to be assigned to variable, but it can be used within the code wherever a function is expected.\n\nHere is an example of 'currying': a function that returns a new function, with some of the original arguments bound.\n\n::: {#46c95e57 .cell execution_count=74}\n``` {.python .cell-code}\ndef multiply (n): \n    return lambda x: x*n\n \nf = multiply(2)\ng = multiply(6)\nf\n```\n\n::: {.cell-output .cell-output-display execution_count=73}\n```\n<function __main__.multiply.<locals>.<lambda>(x)>\n```\n:::\n:::\n\n\n::: {#f36d5d23 .cell execution_count=75}\n``` {.python .cell-code}\nf(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=74}\n```\n20\n```\n:::\n:::\n\n\n::: {#de8475c3 .cell execution_count=76}\n``` {.python .cell-code}\ng(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=75}\n```\n60\n```\n:::\n:::\n\n\n::: {#dddbe73e .cell execution_count=77}\n``` {.python .cell-code}\nmultiply(3)(30)\n```\n\n::: {.cell-output .cell-output-display execution_count=76}\n```\n90\n```\n:::\n:::\n\n\n### Map\n\nOur first example of functional programming will be the **map** operator:\n\n`r = map(func, s)`\n\n`func` is a function and `s` is a sequence (e.g., a list).\n\n`map()` returns an object that will apply function `func` to each of the elements of `s`.\n\n::: {#7b520809 .cell execution_count=78}\n``` {.python .cell-code}\ndef dollar2euro(x):\n    return 0.89*x\ndef euro2dollar(x):\n    return 1.12*x\n\namounts= (100, 200, 300, 400)\ndollars = map(dollar2euro, amounts)\nlist(dollars)\n```\n\n::: {.cell-output .cell-output-display execution_count=77}\n```\n[89.0, 178.0, 267.0, 356.0]\n```\n:::\n:::\n\n\n::: {#522dcc49 .cell execution_count=79}\n``` {.python .cell-code}\namounts= (100, 200, 300, 400)\neuros = map(euro2dollar, amounts)\nlist(euros)\n```\n\n::: {.cell-output .cell-output-display execution_count=78}\n```\n[112.00000000000001,\n 224.00000000000003,\n 336.00000000000006,\n 448.00000000000006]\n```\n:::\n:::\n\n\n::: {#5b60acc3 .cell execution_count=80}\n``` {.python .cell-code}\nlist(map(lambda x: 0.89*x, amounts))\n```\n\n::: {.cell-output .cell-output-display execution_count=79}\n```\n[89.0, 178.0, 267.0, 356.0]\n```\n:::\n:::\n\n\n**map** can also be applied to more than one list as long as they are of the same size and type\n\n::: {#4c602a27 .cell execution_count=81}\n``` {.python .cell-code}\na = [1, 2, 3, 4, 5]\nb = [10, 20 , 30, 40, 50]\n\nl1 = map(lambda x,y: x+y, a, b)\nlist(l1)\n```\n\n::: {.cell-output .cell-output-display execution_count=80}\n```\n[11, 22, 33, 44, 55]\n```\n:::\n:::\n\n\n### Filter\n\nThe next functional operator is **filter**.\n\n`filter(function, list)` returns a new list containing all the elements of `list` for which `function()` evaluates to `True.`\n\n::: {#95951707 .cell execution_count=82}\n``` {.python .cell-code}\nnums = [i for i in range(100)]\neven = filter(lambda x: x%2==0 and x!=0, nums)\nprint(even)\nlist(even)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<filter object at 0x11de26e60>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=81}\n```\n[2,\n 4,\n 6,\n 8,\n 10,\n 12,\n 14,\n 16,\n 18,\n 20,\n 22,\n 24,\n 26,\n 28,\n 30,\n 32,\n 34,\n 36,\n 38,\n 40,\n 42,\n 44,\n 46,\n 48,\n 50,\n 52,\n 54,\n 56,\n 58,\n 60,\n 62,\n 64,\n 66,\n 68,\n 70,\n 72,\n 74,\n 76,\n 78,\n 80,\n 82,\n 84,\n 86,\n 88,\n 90,\n 92,\n 94,\n 96,\n 98]\n```\n:::\n:::\n\n\n## Libraries\n\nPython is a high-level open-source language. But the *Python world* is inhabited by many packages or libraries that provide useful things like array operations, plotting functions, and much more.\n\nWe can (and we will) import many different libraries of functions to expand the capabilities of Python in our programs.\n\n::: {#4b5a2ba7 .cell execution_count=83}\n``` {.python .cell-code}\nimport random\nmyList = [2, 109, False, 10, \"data\", 482, \"mining\"]\nrandom.choice(myList)\n```\n\n::: {.cell-output .cell-output-display execution_count=82}\n```\n2\n```\n:::\n:::\n\n\n::: {#838dabee .cell execution_count=84}\n``` {.python .cell-code}\nfrom random import shuffle\nx = list(range(10))\nshuffle(x)\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=83}\n```\n[2, 6, 8, 4, 9, 0, 3, 1, 7, 5]\n```\n:::\n:::\n\n\n## APIs\n\nFor example, there are libraries that make it easy to interact with RESTful APIs.\n\nA RESTful API is a service available on the Internet that uses the HTTP protocol for access.\n\n::: {#4dd8fc21 .cell execution_count=85}\n``` {.python .cell-code}\nimport requests\n\nwidth = '200'\nheight = '300'\nresponse = requests.get('http://loremflickr.com/' + width + '/' + height)\n\nprint(response)\n\nwith open('img.jpg', 'wb') as f:\n    f.write(response.content)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Response [200]>\n```\n:::\n:::\n\n\n::: {#d67af69b .cell execution_count=86}\n``` {.python .cell-code}\nfrom IPython.display import Image\nImage(filename=\"img.jpg\")\n```\n\n::: {.cell-output .cell-output-display execution_count=85}\n![](01-Intro-to-Python_files/figure-html/cell-86-output-1.jpeg){}\n:::\n:::\n\n\n## Resources\n\nHere are some handy Python resources.\n\n- The official Python [webpage](https://www.python.org/).\n- Wes McKinney's [Python for Data Anaylsis, 3E](https://wesmckinney.com/book/).\n\nFor a quick hands-on refresher of Python you can always attend the (free) Python tutorials offered by Boston University's [Research Computing Services](https://www.bu.edu/tech/support/research/) (RCS). The tutorial schedule is at this [link](https://www.bu.edu/tech/about/training/classroom/rcs-tutorials/). In addition to Python, RCS offers tutorials on a variety of relevant topics in this course, such as machine learning, natural language processing, and using Pytorch. \n\n",
    "supporting": [
      "01-Intro-to-Python_files"
    ],
    "filters": [],
    "includes": {}
  }
}