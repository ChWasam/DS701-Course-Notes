{
  "hash": "f038e07f7b72ec86136727a98b365742",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: $k$-Means Clustering\njupyter: python3\n---\n\n::: {#c9ef7514 .cell execution_count=1}\n``` {.python .cell-code}\n%matplotlib inline\n%config InlineBackend.figure_format='retina'\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import Image, display_html, display, Math, HTML;\n```\n:::\n\n\n# Victorian England\n\n## 1854 Cholera Outbreak\n\n:::: {.columns }\n\n::: {.column width=\"40%\"}\n![London cholera outbreak](./figs/Punch-A_Court_for_King_Cholera.png){width=400}\n^[Public Domain, https://commons.wikimedia.org/w/index.php?curid=680455]\n:::\n\n::: {.column width=\"60%\" .incremental}\n- There was a horrific cholera outbreak in **1854** Soho, London.\n- Common wisdom at the time was that disease spread by breathing \"foul air\" (miasma).  \n- The London sewer system had not yet reached Soho.  \n- Most homes had cesspits under the floor, which often overflowed\n- \"Night Soil Men\" would regularly collect and sell to farmers or dump in the Thames\n:::\n\n::::\n\n## John Snow\n\n:::: {.columns }\n\n::: {.column width=\"60%\" .incremental}\n- John Snow, a local physician, extensively studied the patterns of illness across Soho due to cholera.\n- In the course of his studies, his attention was drawn to one neighborhood around Broad Street.\n- In 10 days, 500 people in the area died. \n:::\n\n::: {.column width=\"40%\"}\n![John Snow](./figs/L06-John-Snow-Portrait.png)\n:::\n\n::::\n\n## John's Snow Map\n\n:::: {.columns }\n\n::: {.column width=\"60%\"}\n![London cholera outbreak](figs/L6-Snow-cholera-map-1.png)\n:::\n\n::: {.column width=\"40%\" .incremental}\n- In uncovering the source of this outbreak, Snow prepared this map\n- From this map he could clearly see the deaths were clustered around an area\n- The neighborhood was all served by a water pump on Broad St.\n- The pump handle was removed and illnesses decreased dramatically\n\n::: {.fragment}\n![Broad St. water pump](./figs/L6-John_Snow_memorial_and_pub.png){width=180}\n:::\n\n:::\n\n::::\n\n---\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n![J. Snow Book](figs/L06-snow-book-cover.png){height=500}\n:::\n::: {.column width=\"50%\" .incremental}\n- He later published his results^[By John Snow - Published by C.F. Cheffins, Lith, Southhampton Buildings, London, England, 1854 in Snow, John. On the Mode of Communication of Cholera, 2nd Ed, John Churchill, New Burlington Street, London, England, 1855.]\n- Results from the cluster map\n- Results from a double blind study of two neighborhoods drawing water upriver\nand downriver of the polluted portion of the Thames\n- Other anecdotes of visitors to Soho, etc.\n:::\n::::\n\n::: {.content-hidden when-profile=\"slides\"}\n## References and Further Reading \n\nImages and information taken from [wikipedia](https://en.wikipedia.org/wiki/1854_Broad_Street_cholera_outbreak), \n[National Library of Medicine](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7150208/) and the \n[Internet Archive](https://archive.org/details/b28985266/page/n3/mode/2up) and\n[MSU's John Snow Archive](https://johnsnow.matrix.msu.edu/).\n\nJohn Snow's original data is recreated [here](https://blog.rtwilson.com/john-snows-cholera-data-in-more-formats/).\n:::\n\n# Clustering\n\n## Clustering\n\n::: {.fragment}\nClustering is a very important way of discovering __structure__ in data.\n:::\n\n::: {.fragment}\nIt is so important because it is __common__ for data to show clusters.\n:::\n\n::: {.incremental}\n* Locations where millionaires live\n* The number of hours people work each week\n* Demographics (\"soccer parents\", \"bored retirees\", \"unemployed millenials\", etc)\n:::\n\n::: {.content-hidden when-profile=\"web\"}\n## Clustering Continued\n:::\n\n::: {.incremental}\n* We can often simplify or compress our data if we recognize the existence of clusters.\n* Further, we can often interpret clusters by assigning them labels.\n* However, note that these categories or \"labels\" are assigned __after__ the fact.\n* And, we may __not__ be able to interpret clusters or assign them labels in some cases.\n* That is, clustering represents the first example we will see of __unsupervised__ learning.\n:::\n\n## Supervised vs Unsupervised\n\n__Supervised__ methods:  Data items have labels, and we want to learn a function that correctly assigns labels to new data items.\n\n__Unsupervised__ methods:  Data items do not have labels, and we want to learn a function that extracts  important patterns from the data.\n\n## Applications of Clustering\n\n* Image Processing\n    * Cluster images based on their visual content\n    * Compress images based on color clusters\n* Web Mining\n    * Cluster groups of users based on webpage access patterns\n    * Cluster web pages based on their content\n* Bioinformatics\n    * Cluster similar proteins together (by structure or function)\n    * Cluster cell types (by gene activity)\n* And many more ...\n\n## The Clustering Problem\n\nWhen we apply clustering, what problem are we trying to solve?\n\n::: {.fragment}\nWe will answer this question informally at first. \n:::\n\n::: {.fragment}\n(But soon we will look at formal criteria!)\n:::\n\n::: {.fragment .fade-in}\nInformally, a __clustering__ is:\n    \n> a grouping of data objects, such that the objects within a group are similar (or near) to one another and dissimilar (or far) from the objects in other groups.\n\n(keep in mind that if we use a distance function as a dissimilarity measure, then \"far\" implies \"different\")\n:::\n\n::: {.content-hidden when-profile=\"web\"}\n## The Clustering Problem, continued\n:::\n\n![](figs/L06-clustering-1.png){width=350 fig-align=\"center\"}\n    \nSo we want our clustering algorithm to:\n\n* <font color = \"blue\">minimize</font> intra-cluster distances\n* <font color = \"red\">maximize</font> inter-cluster distances\n\n\n::: {.content-hidden when-profile=\"web\"}\n## The Clustering Problem, continued\n\n![](figs/L06-clustering-1.png){width=350 fig-align=\"center\"}\n:::\nHere are the basic questions we need to ask about clustering:\n\n* What is the right kind of <font color = \"blue\">\"similarity\"</font> to use?\n* What is a <font color=\"blue\">\"good\" partition</font> of objects?\n    * ie, how is the quality of a solution measured?\n* <font color = \"blue\">How to find</font> a good partition?\n    * are there efficient algorithms?  \n    * are there algorithms that are guaranteed to find good clusters?\n\n::: {.content-hidden when-profile=\"web\"}\n## The Clustering Problem, continued\n:::\n\nNow note that even with our more-formal discussion, the criteria for deciding on\na \"best\" clustering can still be ambiguous.\n    \n![](figs/L06-clustering-2.png){width=600 fig-align=\"center\"}\n\nTo accommodate the ambiguity here, one approach is to seek a __hierarchical__ clustering:\n\nThat is, as set of nested clusters organized in a tree.\n\nWe'll discuss hierarchical cluster in an upcoming lecture.\n\n---\n\nFor today, we'll focus on __partitional__ clustering:  \n\nin a partitional clustering, the points are divided into a set of __non-overlapping__ groups.\n    \n![](figs/L06-partitional-clustering.png){width=600 fig-align=\"center\"}\n    \nIn a partitional clustering:\n\n* Each object belongs to __one__, and only one, cluster\n* The set of clusters covers all the objects\n\nWe are going to assume for now that the number of clusters is given in advance.\n\nWe will denote the number of clusters as $k$.\n\n# The $k$-means Algorithm\n\n## Assumptions\n\nNow, we are ready to state our first formalization of the clustering problem.\n\nWe will assume that \n\n* data items are represented by points in $d$-dimensional space, $\\mathbb{R}^d$.\n    * Stated another way, each data item has $d$ features.\n* the number of points, $n$, is given\n* the number of clusters $k$ is given\n\n## Minimizing a Cost Function\n\nFind $k$ points $c_1, \\dots, c_k$ (called <font color=\"blue\"> _centers_, _centroids_,</font> or <font color = \"blue\"> _means_,</font> so that the _cost_\n\n$$\n\\sum_{i=1}^n \\Vert x_i-c_j\\Vert^2_2 \n$$\n\nis minimized.\n\n::: aside\nSee [Useful Norms](./05-Distances-Timeseries.html#useful-norms) in\n[Distances and Timeseries](./05-Distances-Timeseries.html) for a refresher.\n:::\n\n## Minimizing a Partition Cost Function\n\n**Equivalently:** we can think in terms of the partition itself.\n\nConsider the set $X = \\{x_1, \\dots, x_n\\}$ where $x_i \\in \\mathbb{R}^d$.\n    \nFind $k$ points $c_1, \\dots, c_k$ and partition $X$ into subsets\n$\\{X_1, \\dots, X_k\\}$ by assigning each point $x_i$ in $X$ to its nearest\ncluster center,\n\nso that the cost\n\n$$\n\\sum_{i=1}^n \\Vert x_i-c_j\\Vert^2_2 = \\sum_{j=1}^k \\sum_{x \\in X_j} \\Vert x - c_j \\Vert^2_2 \n$$\n\nis minimized.\n\n---\n\nWe now have a <font color=\"blue\">formal</font> definition of a clustering.\n\nThis is not the only definition possible, but it is an intuitive and simple one.\n\nHow hard is it to solve this problem?\n\n* $k=1$ and $k=n$ are easy special cases (why?)\n* But, this problem is __NP-hard__ if the dimension of the data is at least 2\n    * We don't expect that there is any exact, efficient algorithm in general \n\n__Nonetheless,__ there is a simple algorithm that works quite well in practice!\n\n## The $k$-means Algorithm\n\n:::: {.columns }\n\n::: {.column width=\"40%\"}\n![](figs/L06-top-ten-algorithms-cover.png){width=300 fig-align=\"center\"}\n:::\n\n::: {.column width=\"60%\"}\n* There is a \"classic\" algorithm for this problem.\n* It was voted among the __top-10 algorithms__ in data mining!^[As determined at the 2006 IEEE International Conference on Data Mining]\n* It is such a good idea that it has been independently discovered multiple times.\n* It was first discovered by Lloyd in 1957, so it is often called Lloyd's algorithm.\n* It is called the \"$k$-means algorithm\"\n* (not to be confused with the $k$-means problem!)\n:::\n\n::::\n\n::: aside\nThe other from the top 10 were SVM, Apriori, EM, PageRank, AdaBoost, kNN, Naive Bayes and CART.\n:::\n\n::: {.content-hidden when-profile=\"web\"}\n## The $k$-means algorithm\n:::\n\n1. Pick $k$ cluster centers $\\{c_1, \\dots, c_k\\}$.  \n    - These can be chosen randomly, or by some other method.\n2. For each $j$, define the cluster $X_j$ as the set of points in $X$ that are <font color=\"blue\">closest to center</font> $c_j$.  \n    - Nearer to $c_j$ than to any other center.\n3. For each $j$, update $c_j$ to be <font color=\"blue\">the center of mass of cluster</font> $X_j$.  \n    - In other words, $c_j$ is the mean of the vectors in $X_j$.\n4. Repeat (ie, go to Step 2) until convergence^[Convergence to be defined].\n\n---\n\nLet's see this in practice:\n\n![](figs/L06-kmeans-example.png){width=600 fig-align=\"center\"}\n\n## Limitations of $k$-means\n\nAs you can see, $k$-means can work very well.\n\nHowever, we don't have any guarantees on the performance of $k$-means.\n\nIn particular, there are various settings in which $k$-means can fail to do a good job.\n\n---\n\n1. __$k$-means tries to find spherical clusters__.\n\nBecause each point is assigned to its closest center, the points in a cluster are implicitly assumed to be arranged in a sphere around the center.\n\n![](figs/L06-kmeans-nonspherical-clusters.png){width=600 fig-align=\"center\"}\n\n---\n\n2. __$k$-means tries to find equal-sized clusters.__\n\nFor the same reason, the sizes of clusters are implicitly assumed to be approximately equal.\n    \n![](figs/L06-kmeans-cluster-size.png){width=600 fig-align=\"center\"}\n\n---\n\n3. __$k$-means is sensitive to the starting cluster centers.__\n\nIf the initial guess (Step 1) is a bad one, $k$-means may get \"stuck\" in a bad solution.\n    \n![](figs/L06-kmeans-bad-initialization.png){width=600 fig-align=\"center\"}\n\n## Choosing a Good Initialization\n\n* How can we avoid the kind of bad initialization we just saw?\n* A good strategy is to pick points that are distant to each other.\n* This strategy is called \"$k$-means++\".  \n* It works very well in practice, and the `scikit-learn` implementation uses it by default.\n* (We will explore it in the next lecture.)\n\n## Choosing the right $k$\n\nGenerally, we would say that, given some $k$, the $k$-means algorithm \"learns\" the cluster centers -- that is, the parameters of the model.\n\nBut we have not yet considered how to choose the right number of clusters.\n\nThat's typically __not__ something one knows in advance.\n\nAs an aside:\n\n* This parameter ($k$) is the first example we have seen of a __hyperparameter__.\n* A hyperparameter is a parameter that must be set before the model parameters can be learned.\n\nOur basic strategy will be to\n\n* Iterate through different $k$ and use some criterion to decide which $k$ is most appropriate.\n* We will discuss this more in the next lecture.\n\n## Feature Scales\n\nFinally, given the tendency of $k$-means to look for spherical clusters, we\nshould consider the scales of the various features.\n\nIn fact, in general when constructing or selecting a distance metric, one needs\nto think carefully about the scale of the features being used.\n\n## Unscaled Features\n\nFor example, consider the case where we are clustering people based on their age, income, and gender.\n\nWe might use age in years, income in dollars, and assign gender to the values $\\{0, 1\\}$.\n\nThus, the following records:\n\n* Joe Smith, age 27, income USD 75,000, male\n* Eve Jones, age 45, income USD 42,000, female\n\nWould be encoded in feature space as:\n\n$$\n\\begin{bmatrix}27\\\\75000\\\\0\\end{bmatrix},\\begin{bmatrix}45\\\\42000\\\\1\\end{bmatrix} \n$$\n\n## Unscaled Features, Continued\n\nWhat would happen if we used Euclidean distance as our dissimilarity metric in this feature space?\n\n(This is what $k$-means uses.)\n\nClearly, the influence of income would dominate the other two features.  For\nexample, a difference of gender is about as significant as a difference of one\ndollar of yearly income.\n\nWe are unlikely to expose gender-based differences if we cluster using this representation.\n\nThe most common way to handle this is __feature scaling.__\n\n## Feature Scaling\n\nThe basic idea is to rescale each feature separately, so that its range of\nvalues is about the same as all other features.\n\nFor example, one may choose to:\n    \n* shift each feature independently by subtracting the mean over all observed values\n    * This means that each feature is now centered on zero\n* then rescale each feature so that the standard deviation overall observed values is 1.\n    * This means that the feature will have about the same range of values as all the others.\n\n## Feature Scaling Example\n\nFor example, let's work with Bortkiewicz's famous\n[horse-kick data](http://www.randomservices.org/random/data/HorseKicks.html)\nwhich is the the number of soilders in the Prussian cavalry killed by horse kicks\nover the 20 years between 1875 and 1894, inclusive.\n\n## Ladislaus Bortkiewicz\n\n:::: {.columns}\n::: {.column width=\"40%\"}\n![Ladislaus Bortkiewicz](figs/Ladislaus_Bortkiewicz.jpg){width=150}^[By no conegut - MacTutor History of Mathematics: http://www-history.mcs.st-andrews.ac.uk/PictDisplay/Bortkiewicz.html, Public Domain, https://commons.wikimedia.org/w/index.php?curid=79219622] ![Law of Small Numbers Book](figs/Bortkiewicz%20LSN%20Book.png){width=200}^[Law of Small Numbers]\n:::\n::: {.column width=\"60%\"}\n* Ladislaus Bortkiewicz (1868 -- 1931)\n* Wrote book [\"Law of Small Numbers\"](https://archive.org/details/dasgesetzderklei00bortrich/mode/2up) in 1898\n* Showed how the horse kick data fits the\n[Poisson model](03-Probability-and-Statistics-Refresher.html#the-poisson-distribution)\n* More generally that rare events in large populations can be statistically modeled using the Poisson distribution\n:::\n::::\n\n## Feature Scaling Example, Continued\n\nHere is the horse kick data:\n\n::: {#65acc95b .cell execution_count=2}\n``` {.python .cell-code}\n# source: http://www.randomservices.org/random/data/HorseKicks.html\nimport pandas as pd\ndf = pd.read_table('data/HorseKicks.txt',index_col='Year',dtype='float')\ncounts = df.sum(axis=1)\ncounts\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nYear\n1875.0     3.0\n1876.0     5.0\n1877.0     7.0\n1878.0     9.0\n1879.0    10.0\n1880.0    18.0\n1881.0     6.0\n1882.0    14.0\n1883.0    11.0\n1884.0     9.0\n1885.0     5.0\n1886.0    11.0\n1887.0    15.0\n1888.0     6.0\n1889.0    11.0\n1890.0    17.0\n1891.0    12.0\n1892.0    15.0\n1893.0     8.0\n1894.0     4.0\ndtype: float64\n```\n:::\n:::\n\n\nAnd here is the histogram by year number.\n\n::: {#28d59d51 .cell execution_count=3}\n``` {.python .cell-code}\ncounts.hist(bins=25,xlabelsize=16);\nplt.xlabel('# of Kick Deaths')\nplt.ylabel('Count')\nplt.title('Histogram of Kick Deaths')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](06-Clustering-I-kmeans_files/figure-html/cell-4-output-1.png){width=589 height=457}\n:::\n:::\n\n\nThe average:\n\n::: {#41c50d21 .cell execution_count=4}\n``` {.python .cell-code}\ncounts.mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n9.8\n```\n:::\n:::\n\n\n::: {.content-hidden when-profile=\"web\"}\n## Feature Scaling Example, Continued\n:::\n\nTo standardize to zero mean and unit standard deviation, we can use pre-processing\ntools from\nthe [scikit-learn](https://scikit-learn.org/stable/modules/preprocessing.html)\nlibrary.\n\n(We will discuss scikit-learn more in upcoming lectures.)\n\nThe distribution after rescaling:\n\n::: {#2f781dfd .cell execution_count=5}\n``` {.python .cell-code}\nfrom sklearn import preprocessing\ncounts_scaled = pd.DataFrame(preprocessing.scale(counts))\ncounts_scaled.hist(bins=25,xlabelsize=16);\n```\n\n::: {.cell-output .cell-output-display}\n![](06-Clustering-I-kmeans_files/figure-html/cell-6-output-1.png){width=576 height=439}\n:::\n:::\n\n\nWith a new mean:\n\n::: {#8e000fb3 .cell execution_count=6}\n``` {.python .cell-code}\ncounts_scaled.mean().values\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\narray([-1.33226763e-16])\n```\n:::\n:::\n\n\n::: {.content-hidden when-profile=\"web\"}\n## Feature Scaling Example, Continued\n:::\n\nNotice that values that used to be zero have now become negative.\n\nIn some situations it may not be sensible to change zeros into something else.\nIt may make more sense to map all values into a fixed range, for example $[0, 1]$.\n\n::: {#339fcf1a .cell execution_count=7}\n``` {.python .cell-code}\nmin_max_scaler = preprocessing.MinMaxScaler()\ncounts_minmax = min_max_scaler.fit_transform(counts.values.reshape(-1,1))\ncounts_minmax = pd.DataFrame(counts_minmax)\ncounts_minmax.hist(bins=25,xlabelsize=16);\n```\n\n::: {.cell-output .cell-output-display}\n![](06-Clustering-I-kmeans_files/figure-html/cell-8-output-1.png){width=571 height=439}\n:::\n:::\n\n\n## Example Application of k-means\n\nHere is a simple example of how $k$-means can be used to reduce\ncolor space and compress data.\n\nConsider the following image.  \n\n* Each color in the image is represented by an integer.  \n* Typically we might use 24 bits for each integer (8 bits for R, G, and B).\n    \n![](figs/L6-annie19980405.jpg){width=350 fig-align=\"center\"}\n\n::: {.content-hidden when-profile=\"web\"}\n## Example, Continued\n:::\n\nNow find $k=16$ clusters of pixels in three dimensional $(R, G, B)$ space\nand replace each pixel by its cluster center.\n\nBecause there are 16 centroids, we can represent by a 4-bit mapping \nfor a compression ratio of $24/4=6\\times$.\n    \n![](figs/L6-annie_016.png){width=500 fig-align=\"center\"}\n\n::: {.content-hidden when-profile=\"web\"}\n## Example, Continued\n:::\n\nHere we cluster into 8 groups (3 bits) for a compression ratio $24/3=8\\times$.\n    \n![](figs/L6-annie_008.png){width=500 fig-align=\"center\"}\n\n::: {.content-hidden when-profile=\"web\"}\n## Example, Continued\n:::\n\nHere we cluster into 4 groups (2 bits) for a compression ratio around $24/2=12\\times$.\n    \n![](figs/L6-annie_004.png){width=500 fig-align=\"center\"}\n\n::: {.content-hidden when-profile=\"web\"}\n## Example, Continued\n:::\n\nFinally, we use 1 bit (2 color groups) for a compression ratio of $24\\times$.\n    \n![](figs/L6-annie_002.png){width=500 fig-align=\"center\"}\n\n",
    "supporting": [
      "06-Clustering-I-kmeans_files"
    ],
    "filters": [],
    "includes": {}
  }
}