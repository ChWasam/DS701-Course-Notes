{
  "hash": "04c5acb1e560618d024007bf73162d19",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Essential Tools: Scikit-Learn'\njupyter: python3\ncode-fold: false\n---\n\n::: {.content-visible when-profile=\"web\"}\n## Introduction\n\n[![](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/tools4ds/DS701-Course-Notes/blob/main/ds701_book/jupyter_notebooks/02C-Sklearn.ipynb)\n\nIn this chapter we discuss another important Python package, Scikit-Learn (sklearn).\n:::\n\n::: {.content-visible when-profile=\"slides\"}\n## Scikit-Learn\n:::\n[Scikit-Learn](https://scikit-learn.org/stable/) (sklearn) is a powerful Python package for machine learning. The theoretical underpinnings of the methods introduced in this lecture will be covered in later lectures. The intent of this lecture is to demonstrate\n\n:::: {.incremental}\n1. how to implement a machine learning model using Scikit-Learn and\n1. understand the structure of the Scikit-Learn API.\n::::\n\n:::: {.fragment}\nThe 2nd point is key, because understanding the generality of the API will allow you to easily work with different sklearn machine learning models.\n::::\n\n::: {.content-visible when-profile=\"slides\"}\n## Scikit-Learn\n:::\n\nThe general framework for implementing a machine learning models in sklearn is\n\n:::: {.incremental}\n1. Import the sklearn objects you need.\n1. Prepare the dataset.\n1. Instantiate a machine learning object.\n1. Train your model on the dataset.\n1. Use the trained model to make predictions.\n1. Evaluate the performance of the model. \n::::\n\n::: {.content-visible when-profile=\"slides\"}\n## Scikit-Learn continued\n:::\n\n:::: {.fragment}\nWe will demonstrate the sklearn machine learning framework by working with the sklearn `LinearRegression` object. This object can be used to train a linear model that predicts continuous values. \n::::\n\n:::: {.fragment}\nIn this example we will work with the california housing dataset. We will see how to predict the median house price based on features, such as the age of the house, average number of bedrooms, etc. \n::::\n\n:::: {.fragment}\nWe will cover theoretical details of linear regression in the [Linear regression](17-Regression-I-Linear.qmd) lecture.\n::::\n\n::: {.content-visible when-profile=\"slides\"}\n## Scikit-Learn continued\n:::\n\nWe will also use sklearn when we cover\n\n:::: {.incremental}\n- [clustering](06-Clustering-I-kmeans.qmd),\n- [SVD](11-Dimensionality-Reduction-SVD-II.qmd),\n- [decision trees](14-Classification-I-Decision-Trees.qmd),\n- [k nearest neighbors](15-Classification-II-kNN.qmd),\n- [Naive Bayes and SVM](16-Classification-III-NB-SVM.qmd),\n- [Logistic regression](18-Regression-II-Logistic.qmd).\n::::\n\n## Import sklearn\n\nLet's first import all sklearn module and submodules that will be used in the following demonstrations.\n\n::: {#3a85913f .cell execution_count=2}\n``` {.python .cell-code}\nimport sklearn\nfrom sklearn.datasets import fetch_california_housing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\nprint(sklearn.__version__)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.6.1\n```\n:::\n:::\n\n\n## Fetching Datasets\n\nScikit-Learn provides a variety of datasets in the [`datasets`](https://scikit-learn.org/stable/api/sklearn.datasets.html) \nthat will take care of retrieving.\n\n| Function | Description |\n|----------|-------------|  \n| [`fetch_20newsgroups`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_20newsgroups.html) | Load the filenames and data from the 20 newsgroups dataset (classification). |\n| [`fetch_20newsgroups_vectorized`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_20newsgroups_vectorized.html) | Load and vectorize the 20 newsgroups dataset (classification). |\n| [`fetch_california_housing`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_california_housing.html) | Load the California housing dataset (regression). |\n| [`fetch_covtype`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_covtype.html) | Load the covertype dataset (classification). |\n| [`fetch_kddcup99`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_kddcup99.html) | Load the kddcup99 network intrusion detection dataset (classification). |\n| [`fetch_lfw_pairs`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_lfw_pairs.html) | Load the Labeled Faces in the Wild (LFW) pairs dataset (classification). |\n| [`fetch_lfw_people`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_lfw_people.html) | Load the Labeled Faces in the Wild (LFW) people dataset (classification). |\n| [`fetch_olivetti_faces`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_olivetti_faces.html) | Load the Olivetti faces data-set from AT&T (classification). |\n| [`fetch_rcv1`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_rcv1.html) | Load the Reuters Corpus Volume I multilabel dataset of 800K newswire stories (classification). |\n| [`fetch_species_distributions`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_species_distributions.html) | Loader for species distribution dataset from Phillips et. |\n\n## Loading Built-in Toy Datasets\n\n| Function | Description |\n|----------|-------------|  \n| [`load_breast_cancer`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_breast_cancer.html) | Load the breast cancer dataset (classification). |\n| [`load_diabetes`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_diabetes.html) | Load the diabetes dataset (regression). |\n| [`load_digits`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_digits.html) | Load the digits dataset (classification). |\n| [`load_iris`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_iris.html) | Load the iris dataset (classification). |\n| [`load_linnerud`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_linnerud.html) | Load the linnerud physiological and exercise dataset for 20 subjects (regression). |\n| [`load_wine`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_wine.html) | Load the wine dataset (classification). |\n| [`load_boston`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_boston.html) | Load the boston housing dataset (regression). |\n\n\n## Other Dataset Loading Functions\n\n| Function | Description |\n|----------|-------------|  \n| [`fetch_file`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_file.html) | Fetch a file from the web if not already present in the local folder, otherwise return file path. Check SHA256 checksum when provided. |\n| [`fetch_openml`](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_openml.html) | Fetch datasets from the over 6K available at [openml](https://www.openml.org/search?type=data&status=active) by name or dataset id. |\n\n\n::: {.content-visible when-profile=\"slides\"}\n## Prepare the dataset\n:::\n\n* Below we import the california housing dataset\n    * Predict the median house value of a district based on 8 features\n* We store the data features as a NumPy arrays called\n    * `X` (2-D) and \n    * the target (labels) `y` (1-D). \n\n::: {#64938661 .cell execution_count=3}\n``` {.python .cell-code}\n# Fetch data\nhousing_dataset = fetch_california_housing()\nX = housing_dataset[\"data\"]\ny = housing_dataset[\"target\"]\n```\n:::\n\n\n---\n\n* We can see a description of the dataset by using the `.DESCR` attribute.\n\n::: {#4a9d5217 .cell execution_count=4}\n``` {.python .cell-code}\nprint(housing_dataset.DESCR)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n.. _california_housing_dataset:\n\nCalifornia Housing dataset\n--------------------------\n\n**Data Set Characteristics:**\n\n:Number of Instances: 20640\n\n:Number of Attributes: 8 numeric, predictive attributes and the target\n\n:Attribute Information:\n    - MedInc        median income in block group\n    - HouseAge      median house age in block group\n    - AveRooms      average number of rooms per household\n    - AveBedrms     average number of bedrooms per household\n    - Population    block group population\n    - AveOccup      average number of household members\n    - Latitude      block group latitude\n    - Longitude     block group longitude\n\n:Missing Attribute Values: None\n\nThis dataset was obtained from the StatLib repository.\nhttps://www.dcc.fc.up.pt/~ltorgo/Regression/cal_housing.html\n\nThe target variable is the median house value for California districts,\nexpressed in hundreds of thousands of dollars ($100,000).\n\nThis dataset was derived from the 1990 U.S. census, using one row per census\nblock group. A block group is the smallest geographical unit for which the U.S.\nCensus Bureau publishes sample data (a block group typically has a population\nof 600 to 3,000 people).\n\nA household is a group of people residing within a home. Since the average\nnumber of rooms and bedrooms in this dataset are provided per household, these\ncolumns may take surprisingly large values for block groups with few households\nand many empty houses, such as vacation resorts.\n\nIt can be downloaded/loaded using the\n:func:`sklearn.datasets.fetch_california_housing` function.\n\n.. rubric:: References\n\n- Pace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions,\n  Statistics and Probability Letters, 33 (1997) 291-297\n\n```\n:::\n:::\n\n\n## Visualization?\n\nCan we visualize the dataset?\n\n::: {.fragment}\nNot directly because the dataset has 8 features (8-dimensional).\n\nLater we will talk about dimensionality reduction and clustering techniques that can help us visualize the dataset.\n:::\n\n::: {.content-visible when-profile=\"slides\"}\n## Train-test split\n:::\n\n* We are going to train a model to predict the median house value. \n* To train and test the model we are going to split the dataset into 80% training data and 20% test data. \n* We use the `train_test_split` function from sklearn.\n\n::: {#c1c9f659 .cell execution_count=5}\n``` {.python .cell-code}\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20 ,random_state=42)\n```\n:::\n\n\n::: {.content-visible when-profile=\"slides\"}\n## Dataset scaling\n:::\n\n:::: {.fragment}\n* As part of the data preparation we will want to scale the dataset. \n* Datasets often contain data with different orders of magnitude. \n* Scaling the dataset prevents data with a large magnitude from potentially dominating the model. \n::::\n\n:::: {.fragment}\nWe will use the `StandardScaler` object which scales data to have zero-mean and unit variance (i.e, standard deviation is 1). \n\n::: {.content-hidden when-profile=\"slides\"}\nThere are of course other scaling objects. See this [link](https://scikit-learn.org/stable/modules/preprocessing.html) for documentation. \n:::\n\nFor this example we are not going to scale the target variables because they represent a price in dollars. Depending on the application, you may need to scale your target variable.\n::::\n\n:::: {.fragment}\n\n::: {#89fb4335 .cell execution_count=6}\n``` {.python .cell-code}\n# Scale the data \nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n```\n:::\n\n\n::::\n\n## Instantiate and train the machine learning object\n\nWith our scaled dataset, we are now in a position to instantiate and train our model. The following code accomplishes this.\n\n::: {#80b74904 .cell execution_count=7}\n``` {.python .cell-code}\n# Create regression model\nreg = LinearRegression()\n# Train\nreg.fit(X_train, y_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<style>#sk-container-id-1 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: #000;\n  --sklearn-color-text-muted: #666;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-1 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-1 pre {\n  padding: 0;\n}\n\n#sk-container-id-1 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-1 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-1 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-1 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-1 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-1 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-1 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-1 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-1 label.sk-toggleable__label {\n  cursor: pointer;\n  display: flex;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n  align-items: start;\n  justify-content: space-between;\n  gap: 0.5em;\n}\n\n#sk-container-id-1 label.sk-toggleable__label .caption {\n  font-size: 0.6rem;\n  font-weight: lighter;\n  color: var(--sklearn-color-text-muted);\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-1 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n#sk-container-id-1 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-1 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-1 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-1 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-1 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 0.5em;\n  text-align: center;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-1 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-1 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>\n```\n:::\n:::\n\n\nWe instantiate a `LinearRegression()` object and store it in a variable called `reg`. We then call the `fit((X_train, y_train)` method to train the model. \n\nThe `fit()` method is a common function to train a variety of models in sklearn. \n\n## Prediction with the model\n\nThe linear regression model has now been trained. To make predictions we use the `predict()` method. This function is also shared across many machine learning model classes.\n\n::: {#1b4b53b6 .cell execution_count=8}\n``` {.python .cell-code}\n# Predict on test set\ny_pred = reg.predict(X_test)\n```\n:::\n\n\nThe values in `y_pred` are the models predictions of the median house prices based on the input features of `X_test`.\n\n## Model Evaluation -- $R^2$\n\n:::: {.fragment}\nTo evaluate the performance of the model, we can use the `score()` method, which\nis also shared across many model objects in sklearn.\n::::\n\n:::: {.fragment}\nIt calculates the $R^2$ value, which is a number between [0, 1] and provides a\nmeasure of how good the fit of the model is. \n\nA value of 1 means the model fits the data perfectly, while a value of 0\nindicates there is no linear relationship between the observed and predicted values.\n::::\n\n:::: {.fragment}\n$$\nR^2 = 1 - \\frac{\\sum_{i}^{n} (y_i - \\hat{y}_i)^2}{\\sum_{i}^{n} (y_i - \\bar{y})^2}\n$$\n\nwhere $\\bar{y}$ is the sample mean of the target vector.\n::::\n\n:::: {.fragment}\n**Note:** More on this in a later lecture.\n::::\n\n## Model Evaluation -- MSE\n\nThe mean squared error (MSE) is given by the formula\n\n$$ \n\\frac{1}{n}\\sum_{i}^{n} (y_i - \\hat{y}_i)^2,\n$$\n\nwhere \n    * $n$ is the number of data points in the target vector, \n    * $y_i$ are the true values of the test set (`y_test`), and \n    * $\\hat{y}_i$ are the predicted values (`y_pred`).\n\n## Computing $R^2$ and MSE\n\n::: {#272faa3a .cell execution_count=9}\n``` {.python .cell-code}\n# R^2 value\nr2 = reg.score(X_test, y_test)\nprint(\"The R^2 score is : \", r2)\n\n# Report Mean Square Error (mse)\nmse = mean_squared_error(y_test, y_pred)\nprint(\"Mean squared error: \", mse)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe R^2 score is :  0.5757877060324508\nMean squared error:  0.5558915986952444\n```\n:::\n:::\n\n\n## Summary\n\n* We demonstrated how to use Scikit-Learn to train a linear regression model.\n\nWe saw how to:\n\n* evaluate the performance of the model using the `score()` method and the `mean_squared_error()` function.\n* use the `train_test_split()` function to split the dataset into training and test sets.\n* use the `StandardScaler()` function to scale the dataset.\n* use the `LinearRegression()` function to train the model.\n* use the `predict()` function to make predictions.\n* use the `score()` function to evaluate the performance of the model.\n\n**You'll get a chance to practice this in the homework.**\n\n",
    "supporting": [
      "02C-Sklearn_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}