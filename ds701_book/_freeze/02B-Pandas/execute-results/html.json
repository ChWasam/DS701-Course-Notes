{
  "hash": "60e7b7414e45365b9bea774869d5841e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Essential Tools: Pandas'\njupyter: python3\ncode-fold: false\n---\n\n\n\n\n::: {.content-visible when-profile=\"web\"}\n## Introduction\n\n[![](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/tools4ds/DS701-Course-Notes/blob/main/ds701_book/jupyter_notebooks/02B-Pandas.ipynb)\n\nIn this lecture we discuss one of most useful Python packages for data \nscience -- Pandas.\n\nWe'll touch on some highlights here, but to learn more, start with the\n[Pandas Getting started tutorials](https://pandas.pydata.org/docs/getting_started/intro_tutorials/index.html)\n:::\n\n## Pandas\n\n::: {.incremental}\n\n- [Pandas](https://pandas.pydata.org/docs/index.html) is a Python library for data\nmanipulation and analysis with an emphasis on tabular data. \n- It can be used to produce high quality plots and integrates nicely with other\n  libraries that expect NumPy arrays. \n- Knowledge and use of Pandas is essential as a data scientist.\n:::\n\n:::: {.fragment}\nThe most important data structure provided by Pandas is the `DataFrame`\nimplemented in the \n[DataFrame](https://pandas.pydata.org/docs/reference/frame.html) class. \n::::\n\n:::: {.fragment}\nUnlike a numpy array, a `DataFrame` can have columns of different types.\n::::\n\n:::: {.fragment}\nMake it a habit that when you're given a tabular dataset, load it into a `DataFrame`.\n::::\n\n## Fetching, storing and retrieving your data\n\nFor demonstration purposes, we'll use the `yfinance` package to fetch financial \ndata via the Yahoo! API and store it in a dataframe.\n\n::: {#4fd25deb .cell execution_count=2}\n``` {.python .cell-code code-fold=\"false\"}\nimport pandas as pd\nimport yfinance as yf\n\n# download nvidia stock prices from 2023\nnvidia_stocks = pd.DataFrame(yf.download('NVDA', start='2023-01-01', end='2023-12-31', progress=False))\n```\n:::\n\n\n---\n\nIt's important to inspect the data you are working with and Pandas provides a\nvariety of methods to do so such as `.head()`, `.tail()`, `.info()`,\n`.describe()`, etc.\n\n::: {#0ef38afe .cell execution_count=3}\n``` {.python .cell-code code-fold=\"false\"}\nnvidia_stocks.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Volume</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-01-03</th>\n      <td>14.851</td>\n      <td>14.996</td>\n      <td>14.096</td>\n      <td>14.315</td>\n      <td>14.306805</td>\n      <td>401277000</td>\n    </tr>\n    <tr>\n      <th>2023-01-04</th>\n      <td>14.567</td>\n      <td>14.853</td>\n      <td>14.241</td>\n      <td>14.749</td>\n      <td>14.740557</td>\n      <td>431324000</td>\n    </tr>\n    <tr>\n      <th>2023-01-05</th>\n      <td>14.491</td>\n      <td>14.564</td>\n      <td>14.148</td>\n      <td>14.265</td>\n      <td>14.256832</td>\n      <td>389168000</td>\n    </tr>\n    <tr>\n      <th>2023-01-06</th>\n      <td>14.474</td>\n      <td>15.010</td>\n      <td>14.034</td>\n      <td>14.859</td>\n      <td>14.850493</td>\n      <td>405044000</td>\n    </tr>\n    <tr>\n      <th>2023-01-09</th>\n      <td>15.284</td>\n      <td>16.056</td>\n      <td>15.141</td>\n      <td>15.628</td>\n      <td>15.619054</td>\n      <td>504231000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNotice how each row has a label and each column has a label.\n\n---\n\nA DataFrame is a python object that has many associated methods to explore and\nmanipulate the data.\n\nThe method `.info()` gives you a description of the dataframe.\n\n::: {#63045e88 .cell execution_count=4}\n``` {.python .cell-code}\nnvidia_stocks.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nDatetimeIndex: 250 entries, 2023-01-03 to 2023-12-29\nData columns (total 6 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   Open       250 non-null    float64\n 1   High       250 non-null    float64\n 2   Low        250 non-null    float64\n 3   Close      250 non-null    float64\n 4   Adj Close  250 non-null    float64\n 5   Volume     250 non-null    int64  \ndtypes: float64(5), int64(1)\nmemory usage: 13.7 KB\n```\n:::\n:::\n\n\n---\n\nThe method `.describe()` gives you summary statistics of the dataframe.\n\n::: {#29c29d35 .cell execution_count=5}\n``` {.python .cell-code}\nnvidia_stocks.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Volume</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>250.000000</td>\n      <td>250.000000</td>\n      <td>250.000000</td>\n      <td>250.000000</td>\n      <td>250.000000</td>\n      <td>2.500000e+02</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>36.515168</td>\n      <td>37.123132</td>\n      <td>35.926540</td>\n      <td>36.569260</td>\n      <td>36.558143</td>\n      <td>4.735575e+08</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>10.849127</td>\n      <td>10.916913</td>\n      <td>10.657784</td>\n      <td>10.756455</td>\n      <td>10.756568</td>\n      <td>1.614028e+08</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>14.474000</td>\n      <td>14.564000</td>\n      <td>14.034000</td>\n      <td>14.265000</td>\n      <td>14.256832</td>\n      <td>1.982090e+08</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>26.831000</td>\n      <td>27.171000</td>\n      <td>26.428500</td>\n      <td>26.899750</td>\n      <td>26.888915</td>\n      <td>3.790238e+08</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>41.635500</td>\n      <td>42.503000</td>\n      <td>40.962500</td>\n      <td>41.893499</td>\n      <td>41.882687</td>\n      <td>4.341845e+08</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>45.770749</td>\n      <td>46.223248</td>\n      <td>44.988249</td>\n      <td>45.646250</td>\n      <td>45.633528</td>\n      <td>5.172652e+08</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>50.216000</td>\n      <td>50.548000</td>\n      <td>49.411999</td>\n      <td>50.409000</td>\n      <td>50.398064</td>\n      <td>1.543911e+09</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Reading to/from a ``.csv`` file\n\nPandas can read and write dataframes with many file formats such as `.csv`, `.json`, `.parquet`,\n`.xlsx`, `.html`, `SQL`, etc.\n\nHere we write the dataframe to a `.csv` file.\n\n::: {#7c35ae57 .cell execution_count=6}\n``` {.python .cell-code}\nnvidia_stocks.to_csv('nvidia_data.csv')\n```\n:::\n\n\nWe can escape a shell command using the `!` operator to see the top of the file.\n\n::: {#1bc14c00 .cell execution_count=7}\n``` {.python .cell-code}\n!head nvidia_data.csv\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDate,Open,High,Low,Close,Adj Close,Volume\r\n2023-01-03,14.85099983215332,14.996000289916992,14.095999717712402,14.3149995803833,14.306804656982422,401277000\r\n2023-01-04,14.567000389099121,14.852999687194824,14.241000175476074,14.74899959564209,14.740556716918945,431324000\r\n2023-01-05,14.491000175476074,14.564000129699707,14.14799976348877,14.265000343322754,14.256832122802734,389168000\r\n2023-01-06,14.473999977111816,15.010000228881836,14.034000396728516,14.859000205993652,14.850493431091309,405044000\r\n2023-01-09,15.284000396728516,16.055999755859375,15.140999794006348,15.628000259399414,15.619053840637207,504231000\r\n2023-01-10,15.506999969482422,15.961999893188477,15.472000122070312,15.909000396728516,15.899893760681152,384101000\r\n2023-01-11,15.84000015258789,16.027999877929688,15.562999725341797,16.000999450683594,15.991839408874512,353285000\r\n2023-01-12,16.100000381469727,16.636999130249023,15.491999626159668,16.51099967956543,16.501544952392578,551409000\r\n2023-01-13,16.277999877929688,16.922000885009766,16.165000915527344,16.89900016784668,16.889324188232422,447287000\r\n```\n:::\n:::\n\n\n---\n\nAnd of course we can likewise read a `.csv` file into a dataframe.  This is probably the most common way you will get data into Pandas.\n\n::: {#37ee4789 .cell execution_count=8}\n``` {.python .cell-code}\ndf = pd.read_csv('nvidia_data.csv')\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Volume</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2023-01-03</td>\n      <td>14.851</td>\n      <td>14.996</td>\n      <td>14.096</td>\n      <td>14.315</td>\n      <td>14.306805</td>\n      <td>401277000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2023-01-04</td>\n      <td>14.567</td>\n      <td>14.853</td>\n      <td>14.241</td>\n      <td>14.749</td>\n      <td>14.740557</td>\n      <td>431324000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2023-01-05</td>\n      <td>14.491</td>\n      <td>14.564</td>\n      <td>14.148</td>\n      <td>14.265</td>\n      <td>14.256832</td>\n      <td>389168000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2023-01-06</td>\n      <td>14.474</td>\n      <td>15.010</td>\n      <td>14.034</td>\n      <td>14.859</td>\n      <td>14.850493</td>\n      <td>405044000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2023-01-09</td>\n      <td>15.284</td>\n      <td>16.056</td>\n      <td>15.141</td>\n      <td>15.628</td>\n      <td>15.619054</td>\n      <td>504231000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.callout-caution}\nBut be careful, the index column is not automatically set.\n:::\n\n::: {#5114677f .cell execution_count=9}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 250 entries, 0 to 249\nData columns (total 7 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   Date       250 non-null    object \n 1   Open       250 non-null    float64\n 2   High       250 non-null    float64\n 3   Low        250 non-null    float64\n 4   Close      250 non-null    float64\n 5   Adj Close  250 non-null    float64\n 6   Volume     250 non-null    int64  \ndtypes: float64(5), int64(1), object(1)\nmemory usage: 13.8+ KB\n```\n:::\n:::\n\n\nNote the index description.\n\n---\n\nTo set the index column, we can use the `index_col` parameter.\n\n::: {#24b8d3b1 .cell execution_count=10}\n``` {.python .cell-code}\ndf = pd.read_csv('nvidia_data.csv', index_col=0)\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nIndex: 250 entries, 2023-01-03 to 2023-12-29\nData columns (total 6 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   Open       250 non-null    float64\n 1   High       250 non-null    float64\n 2   Low        250 non-null    float64\n 3   Close      250 non-null    float64\n 4   Adj Close  250 non-null    float64\n 5   Volume     250 non-null    int64  \ndtypes: float64(5), int64(1)\nmemory usage: 13.7+ KB\n```\n:::\n:::\n\n\n## Working with data columns\n\nIn general, we'll typically describe the rows in the dataframe as **items** \n(or **observations** or **data samples**) and the columns as **features**.\n\n::: {#17268171 .cell execution_count=11}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nIndex(['Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume'], dtype='object')\n```\n:::\n:::\n\n\nPandas allows you to reference a column similar to a python dictionary key,\nusing column names in square brackets.\n\n::: {#af103840 .cell execution_count=12}\n``` {.python .cell-code}\ndf['Open']\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nDate\n2023-01-03    14.851000\n2023-01-04    14.567000\n2023-01-05    14.491000\n2023-01-06    14.474000\n2023-01-09    15.284000\n                ...    \n2023-12-22    49.195000\n2023-12-26    48.967999\n2023-12-27    49.511002\n2023-12-28    49.643002\n2023-12-29    49.813000\nName: Open, Length: 250, dtype: float64\n```\n:::\n:::\n\n\nNote that this returns a `Series` object, the other fundamental data structure in Pandas.\n\n::: {#a29c84b0 .cell execution_count=13}\n``` {.python .cell-code}\ntype(df['Open'])\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\npandas.core.series.Series\n```\n:::\n:::\n\n\nAlso note that Series is indexed in this case by dates rather than simple integers.\n\n---\n\nPandas also allows you to refer to columns using an object attribute syntax.\n\nNote that the column name cannot include a space in this case.\n\n::: {#7342da42 .cell execution_count=14}\n``` {.python .cell-code}\ndf.Open\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nDate\n2023-01-03    14.851000\n2023-01-04    14.567000\n2023-01-05    14.491000\n2023-01-06    14.474000\n2023-01-09    15.284000\n                ...    \n2023-12-22    49.195000\n2023-12-26    48.967999\n2023-12-27    49.511002\n2023-12-28    49.643002\n2023-12-29    49.813000\nName: Open, Length: 250, dtype: float64\n```\n:::\n:::\n\n\n---\n\nYou can select a list of columns:\n\n::: {#ca8e69d9 .cell execution_count=15}\n``` {.python .cell-code}\ndf[['Open', 'Close']].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open</th>\n      <th>Close</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-01-03</th>\n      <td>14.851</td>\n      <td>14.315</td>\n    </tr>\n    <tr>\n      <th>2023-01-04</th>\n      <td>14.567</td>\n      <td>14.749</td>\n    </tr>\n    <tr>\n      <th>2023-01-05</th>\n      <td>14.491</td>\n      <td>14.265</td>\n    </tr>\n    <tr>\n      <th>2023-01-06</th>\n      <td>14.474</td>\n      <td>14.859</td>\n    </tr>\n    <tr>\n      <th>2023-01-09</th>\n      <td>15.284</td>\n      <td>15.628</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWhich is just another dataframe, which is why we can chain the `.head()` method.\n\n::: {#45b13457 .cell execution_count=16}\n``` {.python .cell-code}\ntype(df[['Open', 'Close']])\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\n---\n\nChanging column names is as simple as assigning to the `.columns` property.\n\nLet's adjust the column names to remove spaces.\n\n::: {#9fed4bec .cell execution_count=17}\n``` {.python .cell-code}\nnew_column_names = [x.lower().replace(' ', '_') for x in df.columns]\ndf.columns = new_column_names\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nIndex: 250 entries, 2023-01-03 to 2023-12-29\nData columns (total 6 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   open       250 non-null    float64\n 1   high       250 non-null    float64\n 2   low        250 non-null    float64\n 3   close      250 non-null    float64\n 4   adj_close  250 non-null    float64\n 5   volume     250 non-null    int64  \ndtypes: float64(5), int64(1)\nmemory usage: 21.8+ KB\n```\n:::\n:::\n\n\nObserve that we first created a list of column names without spaces using __list comprehension__. This is the pythonic way to generate a new list.\n\n---\n\nNow **all** columns can be accessed using the **dot** notation:\n\n::: {#3d0714ca .cell execution_count=18}\n``` {.python .cell-code}\ndf.adj_close.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nDate\n2023-01-03    14.306805\n2023-01-04    14.740557\n2023-01-05    14.256832\n2023-01-06    14.850493\n2023-01-09    15.619054\nName: adj_close, dtype: float64\n```\n:::\n:::\n\n\n## A sampling of DataFrame methods.\n\nThere are many useful methods in the DataFrame object. It is important to\nfamiliarize yourself with these methods.\n\nThe following methods calculate the mean, standard deviation, and median of the specified numeric columns.\n\n::: {#b77f559e .cell execution_count=19}\n``` {.python .cell-code}\ndf.mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nopen         3.651517e+01\nhigh         3.712313e+01\nlow          3.592654e+01\nclose        3.656926e+01\nadj_close    3.655814e+01\nvolume       4.735575e+08\ndtype: float64\n```\n:::\n:::\n\n\nor we can give a list of columns to the Dataframe object:\n\n::: {#ab8f0137 .cell execution_count=20}\n``` {.python .cell-code}\ndf[['open', 'close', 'volume', 'adj_close']].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nopen         3.651517e+01\nclose        3.656926e+01\nvolume       4.735575e+08\nadj_close    3.655814e+01\ndtype: float64\n```\n:::\n:::\n\n\n::: {#be6f8e17 .cell execution_count=21}\n``` {.python .cell-code}\ndf.std()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\nopen         1.084913e+01\nhigh         1.091691e+01\nlow          1.065778e+01\nclose        1.075645e+01\nadj_close    1.075657e+01\nvolume       1.614028e+08\ndtype: float64\n```\n:::\n:::\n\n\n::: {#221f5414 .cell execution_count=22}\n``` {.python .cell-code}\ndf.median()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nopen         4.163550e+01\nhigh         4.250300e+01\nlow          4.096250e+01\nclose        4.189350e+01\nadj_close    4.188269e+01\nvolume       4.341845e+08\ndtype: float64\n```\n:::\n:::\n\n\nOr apply the method to a single column:\n\n::: {#7f78a7a4 .cell execution_count=23}\n``` {.python .cell-code}\ndf.open.mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nnp.float64(36.515168033599856)\n```\n:::\n:::\n\n\n::: {#182174ac .cell execution_count=24}\n``` {.python .cell-code}\ndf.high.mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nnp.float64(37.12313207244873)\n```\n:::\n:::\n\n\n## Plotting methods\n\nPandas also wraps `matplotlib` and provides a variety of easy-to-use plotting\nfunctions directly from the dataframe object.\n\nThese are your \"first look\" functions and useful in exploratory data analysis.\n\nLater, we will use more specialized graphics packages to create more\nsophisticated visualizations.\n\n::: {#e4a1a15f .cell execution_count=25}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\ndf.high.plot(label='High')\ndf.low.plot(label='Low')\nplt.title('NVIDIA Stock Price')\nplt.ylabel('Dollars')\nplt.legend(loc='best')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](02B-Pandas_files/figure-html/cell-25-output-1.png){width=585 height=449}\n:::\n:::\n\n\n---\n\nOr a histogram on the adjusted closing price.\n\n::: {#d9a56e75 .cell execution_count=26}\n``` {.python .cell-code}\ndf.adj_close.hist()\nplt.xlabel('Adjusted Closing Price')\nplt.ylabel('Dollars')\nplt.title('NVIDIA Stock Price')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](02B-Pandas_files/figure-html/cell-26-output-1.png){width=585 height=449}\n:::\n:::\n\n\n## Accessing rows of the DataFrame\n\nSo far we've seen how to access a column of the DataFrame. To access a row we use different syntax.\n\nTo access a row by its index label, use the **`.loc()`** method ('location').\n\n::: {#562a2b0a .cell execution_count=27}\n``` {.python .cell-code}\ndf.loc['2023-01-23']\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\nopen         1.806400e+01\nhigh         1.924500e+01\nlow          1.781800e+01\nclose        1.919300e+01\nadj_close    1.918202e+01\nvolume       6.551630e+08\nName: 2023-01-23, dtype: float64\n```\n:::\n:::\n\n\nAs a tangent, we can use the `.apply()` method to format the output.\n\n::: {#b7f0ced8 .cell execution_count=28}\n``` {.python .cell-code}\ndf.loc['2023-01-23'].apply(lambda x: '{:,.2f}'.format(x) if isinstance(x, (int, float)) else x)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\nopen                  18.06\nhigh                  19.25\nlow                   17.82\nclose                 19.19\nadj_close             19.18\nvolume       655,163,000.00\nName: 2023-01-23, dtype: object\n```\n:::\n:::\n\n\n---\n\nTo access a row by its index number (i.e., like an array index), use **`.iloc()`** ('integer location')\n\n::: {#b725a42c .cell execution_count=29}\n``` {.python .cell-code}\ndf.iloc[0, :]\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\nopen         1.485100e+01\nhigh         1.499600e+01\nlow          1.409600e+01\nclose        1.431500e+01\nadj_close    1.430680e+01\nvolume       4.012770e+08\nName: 2023-01-03, dtype: float64\n```\n:::\n:::\n\n\nand similarly formatted:\n\n::: {#84ac20fe .cell execution_count=30}\n``` {.python .cell-code}\ndf.iloc[0, :].apply(lambda x: '{:,.2f}'.format(x) if isinstance(x, (int, float)) else x)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\nopen                  14.85\nhigh                  15.00\nlow                   14.10\nclose                 14.31\nadj_close             14.31\nvolume       401,277,000.00\nName: 2023-01-03, dtype: object\n```\n:::\n:::\n\n\n---\n\nTo iterate over the rows you can use **`.iterrows()`**.\n\n::: {#33a39b93 .cell execution_count=31}\n``` {.python .cell-code}\nnum_positive_days = 0\nfor idx, row in df.iterrows():\n    if row.close > row.open:\n        num_positive_days += 1\n\nprint(f\"The total number of positive-gain days is {num_positive_days} out of {len(df)} days or as percentage {num_positive_days/len(df):.2%}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe total number of positive-gain days is 137 out of 250 days or as percentage 54.80%\n```\n:::\n:::\n\n\n::: {.callout-note}\nThis is only capturing the intraday gain/loss, not the cumulative inter-day gain/loss.\n:::\n## Filtering\n\nIt is easy to select rows from the data.  \n\nAll the operations below return a new Series or DataFrame, which itself can be\ntreated the same way as all Series and DataFrames we have seen so far.\n\n::: {#4ff25496 .cell execution_count=32}\n``` {.python .cell-code}\ntmp_high = df.high > 45\ntmp_high.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\nDate\n2023-12-22    True\n2023-12-26    True\n2023-12-27    True\n2023-12-28    True\n2023-12-29    True\nName: high, dtype: bool\n```\n:::\n:::\n\n\nSumming a Boolean array is the same as counting the number of `True` values.\n\n::: {#543f4956 .cell execution_count=33}\n``` {.python .cell-code}\nsum(tmp_high)\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n87\n```\n:::\n:::\n\n\n---\n\nNow, let's select only the rows of `df` that correspond to `tmp_high`. \n\n::: {.callout-note}\nWe can pass a series to the dataframe to select rows.\n:::\n\n::: {#d2de2f10 .cell execution_count=34}\n``` {.python .cell-code}\ndf[tmp_high]\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>adj_close</th>\n      <th>volume</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-07-13</th>\n      <td>44.518002</td>\n      <td>46.154999</td>\n      <td>44.492001</td>\n      <td>45.977001</td>\n      <td>45.963242</td>\n      <td>478204000</td>\n    </tr>\n    <tr>\n      <th>2023-07-14</th>\n      <td>46.583000</td>\n      <td>48.088001</td>\n      <td>45.060001</td>\n      <td>45.469002</td>\n      <td>45.455391</td>\n      <td>772075000</td>\n    </tr>\n    <tr>\n      <th>2023-07-17</th>\n      <td>46.289001</td>\n      <td>46.495998</td>\n      <td>45.262001</td>\n      <td>46.460999</td>\n      <td>46.447094</td>\n      <td>510488000</td>\n    </tr>\n    <tr>\n      <th>2023-07-18</th>\n      <td>46.701000</td>\n      <td>47.896000</td>\n      <td>45.734001</td>\n      <td>47.493999</td>\n      <td>47.479786</td>\n      <td>569164000</td>\n    </tr>\n    <tr>\n      <th>2023-07-19</th>\n      <td>47.464001</td>\n      <td>47.818001</td>\n      <td>46.742001</td>\n      <td>47.077000</td>\n      <td>47.062908</td>\n      <td>427502000</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2023-12-22</th>\n      <td>49.195000</td>\n      <td>49.382999</td>\n      <td>48.466999</td>\n      <td>48.830002</td>\n      <td>48.823704</td>\n      <td>252507000</td>\n    </tr>\n    <tr>\n      <th>2023-12-26</th>\n      <td>48.967999</td>\n      <td>49.599998</td>\n      <td>48.959999</td>\n      <td>49.278999</td>\n      <td>49.272640</td>\n      <td>244200000</td>\n    </tr>\n    <tr>\n      <th>2023-12-27</th>\n      <td>49.511002</td>\n      <td>49.680000</td>\n      <td>49.084999</td>\n      <td>49.417000</td>\n      <td>49.410622</td>\n      <td>233648000</td>\n    </tr>\n    <tr>\n      <th>2023-12-28</th>\n      <td>49.643002</td>\n      <td>49.883999</td>\n      <td>49.411999</td>\n      <td>49.521999</td>\n      <td>49.515610</td>\n      <td>246587000</td>\n    </tr>\n    <tr>\n      <th>2023-12-29</th>\n      <td>49.813000</td>\n      <td>49.997002</td>\n      <td>48.750999</td>\n      <td>49.521999</td>\n      <td>49.515610</td>\n      <td>389293000</td>\n    </tr>\n  </tbody>\n</table>\n<p>87 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\n---\n\nPutting it all together, we can count the number of positive days without iterating over the rows.\n\n::: {#832aec7e .cell execution_count=35}\n``` {.python .cell-code}\npositive_days = df[df.close > df.open]\nprint(f\"Total number of positive-gain days is {len(positive_days)}\")\npositive_days.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTotal number of positive-gain days is 137\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>adj_close</th>\n      <th>volume</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-01-04</th>\n      <td>14.567</td>\n      <td>14.853</td>\n      <td>14.241</td>\n      <td>14.749000</td>\n      <td>14.740557</td>\n      <td>431324000</td>\n    </tr>\n    <tr>\n      <th>2023-01-06</th>\n      <td>14.474</td>\n      <td>15.010</td>\n      <td>14.034</td>\n      <td>14.859000</td>\n      <td>14.850493</td>\n      <td>405044000</td>\n    </tr>\n    <tr>\n      <th>2023-01-09</th>\n      <td>15.284</td>\n      <td>16.056</td>\n      <td>15.141</td>\n      <td>15.628000</td>\n      <td>15.619054</td>\n      <td>504231000</td>\n    </tr>\n    <tr>\n      <th>2023-01-10</th>\n      <td>15.507</td>\n      <td>15.962</td>\n      <td>15.472</td>\n      <td>15.909000</td>\n      <td>15.899894</td>\n      <td>384101000</td>\n    </tr>\n    <tr>\n      <th>2023-01-11</th>\n      <td>15.840</td>\n      <td>16.028</td>\n      <td>15.563</td>\n      <td>16.000999</td>\n      <td>15.991839</td>\n      <td>353285000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n---\n\nOr count the number of days with a gain of more than $2.\n\n::: {#7d31141c .cell execution_count=36}\n``` {.python .cell-code}\nvery_positive_days = df[(df.close - df.open) > 2]\nprint(f\"Total number of days with gain > $2 is {len(very_positive_days)}\")\nvery_positive_days.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTotal number of days with gain > $2 is 4\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>adj_close</th>\n      <th>volume</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-06-14</th>\n      <td>40.824001</td>\n      <td>43.000000</td>\n      <td>40.551998</td>\n      <td>42.997002</td>\n      <td>42.984131</td>\n      <td>740465000</td>\n    </tr>\n    <tr>\n      <th>2023-08-14</th>\n      <td>40.486000</td>\n      <td>43.799999</td>\n      <td>40.311001</td>\n      <td>43.752998</td>\n      <td>43.739902</td>\n      <td>690286000</td>\n    </tr>\n    <tr>\n      <th>2023-08-21</th>\n      <td>44.493999</td>\n      <td>47.064999</td>\n      <td>44.222000</td>\n      <td>46.966999</td>\n      <td>46.952946</td>\n      <td>692573000</td>\n    </tr>\n    <tr>\n      <th>2023-08-29</th>\n      <td>46.666000</td>\n      <td>49.081001</td>\n      <td>46.390999</td>\n      <td>48.784000</td>\n      <td>48.769402</td>\n      <td>701397000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNote that this doesn't the explain the total gain for the year. Why?\n\n## Creating new columns\n\nTo create a new column, simply assign values to it. The column name is similar to a key in a dictionary.\n\nLet's look at the daily change in closing price.\n\n::: {#38f9dec3 .cell execution_count=37}\n``` {.python .cell-code}\n# Calculate the daily change in closing price\ndf['daily_change'] = df['close'].diff()\n\n# Create the cumulative profit column\ndf['cum_profit'] = df['daily_change'].cumsum()\n\n# Display the first few rows to verify the new column\nprint(df[['close', 'daily_change', 'cum_profit']].head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             close  daily_change  cum_profit\nDate                                        \n2023-01-03  14.315           NaN         NaN\n2023-01-04  14.749      0.434000    0.434000\n2023-01-05  14.265     -0.483999   -0.049999\n2023-01-06  14.859      0.594000    0.544001\n2023-01-09  15.628      0.769000    1.313001\n```\n:::\n:::\n\n\nIt is convenient that `.diff()` by default is the difference between the current and previous row.\n\n---\n\nLet's look at the histogram of the daily change in stock price.\n\n::: {#cf90aafb .cell execution_count=38}\n``` {.python .cell-code}\n# Plot histogram of daily_change\nplt.figure(figsize=(10, 6))\ndf['daily_change'].hist(bins=50, edgecolor='black')\nplt.title('Histogram of Daily Change in Stock Price')\nplt.xlabel('Daily Change')\nplt.ylabel('Frequency')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](02B-Pandas_files/figure-html/cell-38-output-1.png){width=808 height=523}\n:::\n:::\n\n\n---\n\nLet's give each row a `gain` value as a categorical variable.\n\n::: {#1bef9019 .cell execution_count=39}\n``` {.python .cell-code}\nfor idx, row in df.iterrows():\n    if row.daily_change < 0:\n        df.loc[idx,'cat_gain']='negative'\n    elif row.daily_change < 1:\n        df.loc[idx,'cat_gain']='small_gain'\n    elif row.daily_change < 2:\n        df.loc[idx,'cat_gain']='medium_gain'\n    elif row.daily_change >= 2:\n        df.loc[idx,'cat_gain']='large_gain'\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>adj_close</th>\n      <th>volume</th>\n      <th>daily_change</th>\n      <th>cum_profit</th>\n      <th>cat_gain</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-01-03</th>\n      <td>14.851</td>\n      <td>14.996</td>\n      <td>14.096</td>\n      <td>14.315</td>\n      <td>14.306805</td>\n      <td>401277000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2023-01-04</th>\n      <td>14.567</td>\n      <td>14.853</td>\n      <td>14.241</td>\n      <td>14.749</td>\n      <td>14.740557</td>\n      <td>431324000</td>\n      <td>0.434000</td>\n      <td>0.434000</td>\n      <td>small_gain</td>\n    </tr>\n    <tr>\n      <th>2023-01-05</th>\n      <td>14.491</td>\n      <td>14.564</td>\n      <td>14.148</td>\n      <td>14.265</td>\n      <td>14.256832</td>\n      <td>389168000</td>\n      <td>-0.483999</td>\n      <td>-0.049999</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>2023-01-06</th>\n      <td>14.474</td>\n      <td>15.010</td>\n      <td>14.034</td>\n      <td>14.859</td>\n      <td>14.850493</td>\n      <td>405044000</td>\n      <td>0.594000</td>\n      <td>0.544001</td>\n      <td>small_gain</td>\n    </tr>\n    <tr>\n      <th>2023-01-09</th>\n      <td>15.284</td>\n      <td>16.056</td>\n      <td>15.141</td>\n      <td>15.628</td>\n      <td>15.619054</td>\n      <td>504231000</td>\n      <td>0.769000</td>\n      <td>1.313001</td>\n      <td>small_gain</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n---\n\nHere is another, more \"functional\", way to accomplish the same thing.\n\nFirst, let's drop the gain column so we can start fresh.\n\n::: {#b247a9ed .cell execution_count=40}\n``` {.python .cell-code}\ndf.drop('cat_gain', axis=1, inplace=True)\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>adj_close</th>\n      <th>volume</th>\n      <th>daily_change</th>\n      <th>cum_profit</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-01-03</th>\n      <td>14.851</td>\n      <td>14.996</td>\n      <td>14.096</td>\n      <td>14.315</td>\n      <td>14.306805</td>\n      <td>401277000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2023-01-04</th>\n      <td>14.567</td>\n      <td>14.853</td>\n      <td>14.241</td>\n      <td>14.749</td>\n      <td>14.740557</td>\n      <td>431324000</td>\n      <td>0.434000</td>\n      <td>0.434000</td>\n    </tr>\n    <tr>\n      <th>2023-01-05</th>\n      <td>14.491</td>\n      <td>14.564</td>\n      <td>14.148</td>\n      <td>14.265</td>\n      <td>14.256832</td>\n      <td>389168000</td>\n      <td>-0.483999</td>\n      <td>-0.049999</td>\n    </tr>\n    <tr>\n      <th>2023-01-06</th>\n      <td>14.474</td>\n      <td>15.010</td>\n      <td>14.034</td>\n      <td>14.859</td>\n      <td>14.850493</td>\n      <td>405044000</td>\n      <td>0.594000</td>\n      <td>0.544001</td>\n    </tr>\n    <tr>\n      <th>2023-01-09</th>\n      <td>15.284</td>\n      <td>16.056</td>\n      <td>15.141</td>\n      <td>15.628</td>\n      <td>15.619054</td>\n      <td>504231000</td>\n      <td>0.769000</td>\n      <td>1.313001</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n---\n\nDefine a function that classifies rows, and `apply` it to each row.\n\n::: {#8c2852e1 .cell execution_count=41}\n``` {.python .cell-code}\ndef namerow(row):\n    if row.daily_change < 0:\n        return 'negative'\n    elif row.daily_change < 1:\n        return 'small_gain'\n    elif row.daily_change < 2:\n        return 'medium_gain'\n    elif row.daily_change >= 2:\n        return 'large_gain'\n\ndf['cat_gain'] = df.apply(namerow, axis=1)\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>adj_close</th>\n      <th>volume</th>\n      <th>daily_change</th>\n      <th>cum_profit</th>\n      <th>cat_gain</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-01-03</th>\n      <td>14.851</td>\n      <td>14.996</td>\n      <td>14.096</td>\n      <td>14.315</td>\n      <td>14.306805</td>\n      <td>401277000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>2023-01-04</th>\n      <td>14.567</td>\n      <td>14.853</td>\n      <td>14.241</td>\n      <td>14.749</td>\n      <td>14.740557</td>\n      <td>431324000</td>\n      <td>0.434000</td>\n      <td>0.434000</td>\n      <td>small_gain</td>\n    </tr>\n    <tr>\n      <th>2023-01-05</th>\n      <td>14.491</td>\n      <td>14.564</td>\n      <td>14.148</td>\n      <td>14.265</td>\n      <td>14.256832</td>\n      <td>389168000</td>\n      <td>-0.483999</td>\n      <td>-0.049999</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>2023-01-06</th>\n      <td>14.474</td>\n      <td>15.010</td>\n      <td>14.034</td>\n      <td>14.859</td>\n      <td>14.850493</td>\n      <td>405044000</td>\n      <td>0.594000</td>\n      <td>0.544001</td>\n      <td>small_gain</td>\n    </tr>\n    <tr>\n      <th>2023-01-09</th>\n      <td>15.284</td>\n      <td>16.056</td>\n      <td>15.141</td>\n      <td>15.628</td>\n      <td>15.619054</td>\n      <td>504231000</td>\n      <td>0.769000</td>\n      <td>1.313001</td>\n      <td>small_gain</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Grouping\n\nA powerful DataFrame method is `groupby()`. \n\nThis is analagous to `GROUP BY` in SQL.\n\nIt will group the rows of a DataFrame by the values in one (or more) columns and let you iterate through each group.\n\nHere we will look at the average gain among the categories of gains (negative, small, medium, and large) we defined above and stored in the column `gain`.\n\n::: {#ca699280 .cell execution_count=42}\n``` {.python .cell-code}\ngain_groups = df.groupby(by='cat_gain')\n```\n:::\n\n\n---\n\nEssentially, `gain_groups` behaves like a dictionary:\n\n* the keys are the unique values found in the `gain` column, and \n* the values are DataFrames that contain only the rows having the corresponding unique values.\n\n::: {#a9c1b2c2 .cell execution_count=43}\n``` {.python .cell-code}\nfor gain, gain_data in gain_groups:\n    print(gain)\n    print(gain_data[['close', 'daily_change']].head())\n    print('=============================')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlarge_gain\n                close  daily_change\nDate                               \n2023-02-23  23.664000      2.910000\n2023-05-25  37.980000      7.441999\n2023-07-13  45.977001      2.075001\n2023-08-14  43.752998      2.897999\n2023-08-21  46.966999      3.667999\n=============================\nmedium_gain\n                close  daily_change\nDate                               \n2023-01-20  17.839001      1.074001\n2023-01-23  19.193001      1.354000\n2023-02-01  20.943001      1.406000\n2023-02-07  22.173000      1.084000\n2023-02-14  22.971001      1.183001\n=============================\nnegative\n                close  daily_change\nDate                               \n2023-01-05  14.265000     -0.483999\n2023-01-18  17.377001     -0.324999\n2023-01-19  16.764999     -0.612001\n2023-01-30  19.162001     -1.202999\n2023-02-03  21.100000     -0.608999\n=============================\nsmall_gain\n                close  daily_change\nDate                               \n2023-01-04  14.749000      0.434000\n2023-01-06  14.859000      0.594000\n2023-01-09  15.628000      0.769000\n2023-01-10  15.909000      0.281000\n2023-01-11  16.000999      0.091999\n=============================\n```\n:::\n:::\n\n\n::: {#51720b12 .cell execution_count=44}\n``` {.python .cell-code}\nfor gain, gain_data in df.groupby(\"cat_gain\"):\n    print('The average daily change for the {} group is {}'.format(gain,\n                                                           gain_data.daily_change.mean()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe average daily change for the large_gain group is 3.798599624633789\nThe average daily change for the medium_gain group is 1.29327072968354\nThe average daily change for the negative group is -0.6942264628860185\nThe average daily change for the small_gain group is 0.41535633389312465\n```\n:::\n:::\n\n\n## Other Pandas Classes\n\nA DataFrame is essentially an annotated 2-D array.\n\nPandas also has annotated versions of 1-D and 3-D arrays.\n\nA 1-D array in Pandas is called a [Series](https://pandas.pydata.org/docs/reference/series.html). \nYou can think of DataFrames as a dictionary of Series.\n\nA 3-D array in Pandas is created using a\n[MultiIndex](https://pandas.pydata.org/docs/reference/api/pandas.MultiIndex.html#).\n\nFor more information read the documentation.\n\n## Comparing multiple stocks\n\nAs a last task, we will use the experience we obtained so far -- and learn some\nnew things -- in order to compare the performance of different stocks.\n\n::: {#15ea18d7 .cell execution_count=45}\n``` {.python .cell-code}\nstocks = ['NVDA', 'META', 'MSFT', 'TSLA', 'IBM', 'INTC']\nstock_df = pd.DataFrame()\nfor s in stocks:\n    stock_df[s] = pd.DataFrame(yf.download(s, \n                                           start='2023-09-01', \n                                           end='2024-08-30', \n                                           progress=False))['Close']\nstock_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>NVDA</th>\n      <th>META</th>\n      <th>MSFT</th>\n      <th>TSLA</th>\n      <th>IBM</th>\n      <th>INTC</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-09-01</th>\n      <td>48.508999</td>\n      <td>296.380005</td>\n      <td>328.660004</td>\n      <td>245.009995</td>\n      <td>147.940002</td>\n      <td>36.610001</td>\n    </tr>\n    <tr>\n      <th>2023-09-05</th>\n      <td>48.548000</td>\n      <td>300.149994</td>\n      <td>333.549988</td>\n      <td>256.489990</td>\n      <td>148.130005</td>\n      <td>36.709999</td>\n    </tr>\n    <tr>\n      <th>2023-09-06</th>\n      <td>47.061001</td>\n      <td>299.170013</td>\n      <td>332.880005</td>\n      <td>251.919998</td>\n      <td>148.059998</td>\n      <td>36.980000</td>\n    </tr>\n    <tr>\n      <th>2023-09-07</th>\n      <td>46.241001</td>\n      <td>298.670013</td>\n      <td>329.910004</td>\n      <td>251.490005</td>\n      <td>147.520004</td>\n      <td>38.180000</td>\n    </tr>\n    <tr>\n      <th>2023-09-08</th>\n      <td>45.571999</td>\n      <td>297.890015</td>\n      <td>334.269989</td>\n      <td>248.500000</td>\n      <td>147.679993</td>\n      <td>38.009998</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n---\n\nLet's look at the closing prices of the stocks.\n\n::: {#bfe0b232 .cell execution_count=46}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nstock_df.plot()\nplt.title('Stock Closing Prices')\nplt.ylabel('Dollars')\nplt.legend(loc='best')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](02B-Pandas_files/figure-html/cell-46-output-1.png){width=593 height=432}\n:::\n:::\n\n\nBut that is not as interesting as the returns.\n\n---\n\nSo next, we calculate the returns over a period of length $T$. The returns are defined as\n\n$$\nr(t) = \\frac{f(t)-f(t-T)}{f(t-T)}. \n$$\n\nThe returns can be computed with a simple DataFrame method `pct_change()`.  Note that for the first $T$ timesteps, this value is not defined.\n\n::: {#0d743ccc .cell execution_count=47}\n``` {.python .cell-code}\nrets = stock_df.pct_change(30)\nrets.iloc[25:35]\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>NVDA</th>\n      <th>META</th>\n      <th>MSFT</th>\n      <th>TSLA</th>\n      <th>IBM</th>\n      <th>INTC</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-10-09</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2023-10-10</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2023-10-11</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2023-10-12</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2023-10-13</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2023-10-16</th>\n      <td>-0.049764</td>\n      <td>0.083575</td>\n      <td>0.012110</td>\n      <td>0.036366</td>\n      <td>-0.059010</td>\n      <td>-0.001366</td>\n    </tr>\n    <tr>\n      <th>2023-10-17</th>\n      <td>-0.094958</td>\n      <td>0.079460</td>\n      <td>-0.004467</td>\n      <td>-0.006394</td>\n      <td>-0.052724</td>\n      <td>-0.017706</td>\n    </tr>\n    <tr>\n      <th>2023-10-18</th>\n      <td>-0.103377</td>\n      <td>0.059498</td>\n      <td>-0.008321</td>\n      <td>-0.036678</td>\n      <td>-0.054640</td>\n      <td>-0.036236</td>\n    </tr>\n    <tr>\n      <th>2023-10-19</th>\n      <td>-0.089531</td>\n      <td>0.047343</td>\n      <td>0.004274</td>\n      <td>-0.124776</td>\n      <td>-0.064466</td>\n      <td>-0.065741</td>\n    </tr>\n    <tr>\n      <th>2023-10-20</th>\n      <td>-0.091833</td>\n      <td>0.036121</td>\n      <td>-0.022736</td>\n      <td>-0.146922</td>\n      <td>-0.071235</td>\n      <td>-0.081294</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n---\n\nNow we'll plot the timeseries of the rolling 30-day returns of the different stocks.\n\nNotice that the `NaN` values are dropped by the plotting function.\n\n::: {#862e4e61 .cell execution_count=48}\n``` {.python .cell-code}\nrets[['NVDA', 'META']].plot()\nplt.ylabel('Returns (%)')\nplt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: '{:.2f}%'.format(y * 100)))\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](02B-Pandas_files/figure-html/cell-48-output-1.png){width=623 height=412}\n:::\n:::\n\n\n---\n\nLet's do a scatter plot of the returns of NVDA versus META.\n\n::: {#8c79ea80 .cell execution_count=49}\n``` {.python .cell-code}\nplt.scatter(rets.NVDA, rets.META)\nplt.xlabel('NVDA 30-day returns')\nplt.gca().xaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: '{:.2f}%'.format(y * 100)))\nplt.ylabel('META 30-day returns')\nplt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: '{:.2f}%'.format(y * 100)))\nplt.tight_layout()  # Adjust layout to prevent label cutoff\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](02B-Pandas_files/figure-html/cell-49-output-1.png){width=662 height=470}\n:::\n:::\n\n\nThere appears to be some (fairly strong) correlation between the movement of\nNVDA and META stocks.  Let's measure this.\n\n---\n\nThe correlation coefficient between variables $X$ and $Y$ is defined as follows\n\n$$\n\\text{Corr}(X,Y) = \\frac{E\\left[(X-\\mu_X)(Y-\\mu_Y)\\right]}{\\sigma_X\\sigma_Y}. \n$$\n\nPandas provides a DataFrame method called `corr()` that computes the correlation coefficient of all pairs of columns.\n\n::: {#2827c1f1 .cell execution_count=50}\n``` {.python .cell-code}\nrets.corr()\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>NVDA</th>\n      <th>META</th>\n      <th>MSFT</th>\n      <th>TSLA</th>\n      <th>IBM</th>\n      <th>INTC</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>NVDA</th>\n      <td>1.000000</td>\n      <td>0.710654</td>\n      <td>0.534221</td>\n      <td>-0.120444</td>\n      <td>0.212919</td>\n      <td>0.189073</td>\n    </tr>\n    <tr>\n      <th>META</th>\n      <td>0.710654</td>\n      <td>1.000000</td>\n      <td>0.456792</td>\n      <td>-0.374675</td>\n      <td>0.574674</td>\n      <td>0.218855</td>\n    </tr>\n    <tr>\n      <th>MSFT</th>\n      <td>0.534221</td>\n      <td>0.456792</td>\n      <td>1.000000</td>\n      <td>-0.012553</td>\n      <td>0.331533</td>\n      <td>0.710729</td>\n    </tr>\n    <tr>\n      <th>TSLA</th>\n      <td>-0.120444</td>\n      <td>-0.374675</td>\n      <td>-0.012553</td>\n      <td>1.000000</td>\n      <td>-0.016866</td>\n      <td>0.305960</td>\n    </tr>\n    <tr>\n      <th>IBM</th>\n      <td>0.212919</td>\n      <td>0.574674</td>\n      <td>0.331533</td>\n      <td>-0.016866</td>\n      <td>1.000000</td>\n      <td>0.402570</td>\n    </tr>\n    <tr>\n      <th>INTC</th>\n      <td>0.189073</td>\n      <td>0.218855</td>\n      <td>0.710729</td>\n      <td>0.305960</td>\n      <td>0.402570</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIt takes a bit of time to examine that table and draw conclusions.  \n\n---\n\nTo speed that process up let's visualize the table.\n\n::: {#16383031 .cell execution_count=51}\n``` {.python .cell-code}\nimport seaborn as sns\n\nsns.heatmap(rets.corr(), annot=True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](02B-Pandas_files/figure-html/cell-51-output-1.png){width=544 height=416}\n:::\n:::\n\n\nIt does seem like there is a strong correlation between NVDA and META.\n\nWhat about TSLA and META?\n\n---\n\n::: {#6438aa2b .cell execution_count=52}\n``` {.python .cell-code}\nplt.scatter(rets.TSLA, rets.META)\nplt.xlabel('TESLA 30-day returns')\nplt.gca().xaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: '{:.2f}%'.format(y * 100)))\nplt.ylabel('META 30-day returns')\nplt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda y, _: '{:.2f}%'.format(y * 100)))\nplt.tight_layout()  # Adjust layout to prevent label cutoff\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](02B-Pandas_files/figure-html/cell-52-output-1.png){width=662 height=470}\n:::\n:::\n\n\nWhat can we say about the 30-day returns of TSLA and META?\n\n---\n\n\n## Pandas plotting\n\nAs mentioned, the plotting performed by Pandas is just a layer on top of\n`matplotlib` (i.e., the `plt` package).  \n\nSo Panda's plots can (and often should) be replaced or improved by using\nadditional functions from `matplotlib`.\n\nFor example, suppose we want to know both the returns as well as the standard\ndeviation of the returns of a stock (i.e., its risk).  \n\n---\n\nHere is a visualization of the result of such an analysis. We construct the plot using only functions from `matplotlib`.\n\n::: {#6ae758d7 .cell execution_count=53}\n``` {.python .cell-code}\nplt.scatter(rets.mean(), rets.std())\nplt.xlabel('Expected returns')\nplt.ylabel('Standard Deviation (Risk)')\nplt.xlim([-.05, .1])\nplt.ylim([0, .3])\nfor label, x, y in zip(rets.columns, rets.mean(), rets.std()):\n    plt.annotate(\n        label, \n        xy = (x, y), xytext = (30, -30),\n        textcoords = 'offset points', ha = 'right', va = 'bottom',\n        bbox = dict(boxstyle = 'round,pad=0.5', fc = 'yellow', alpha = 0.5),\n        arrowprops = dict(arrowstyle = '->', connectionstyle = 'arc3,rad=0'))\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](02B-Pandas_files/figure-html/cell-53-output-1.png){width=612 height=434}\n:::\n:::\n\n\nTo understand what these functions are doing, (especially the\n[annotate](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.annotate.html)\nfunction), you will need to consult the online documentation for\n[matplotlib](https://matplotlib.org/stable/api/index.html). \n\n## Recap\n\nIn this section we got a first glimpse of the Pandas library.\n\nWe learned how to:\n\n* load data from a CSV file\n* inspect the data\n* manipulate the data\n* plot the data\n* access rows and columns of the dataframe\n* filter the data\n* create new columns\n* group the data\n* compute the correlation between variables\n\n",
    "supporting": [
      "02B-Pandas_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}