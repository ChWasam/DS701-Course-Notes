{
  "hash": "3e984335f919247a81835089dab4926d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Essential Tools: Pandas'\njupyter: python3\n---\n\n\n\n\n\n\nPandas is the Python Data Analysis Library. \n\nPandas is an extremely versatile tool for manipulating datasets.   \n\nIt also produces high quality plots with matplotlib, and integrates nicely with other libraries that expect NumPy arrays.\n\nUse of Pandas is a data science __best practice.__\n\nThe most important tool provided by Pandas is the **data frame.**\n\nA data frame is a table in which each row and column is given a label.\n\nPandas DataFrames are documented at:\n\nhttp://pandas.pydata.org/pandas-docs/dev/generated/pandas.DataFrame.html\n\nGet in the habit: whenever you load data, place it into a dataframe as your first step.\n\n## Getting started\n\n::: {#59de24c3 .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport pandas_datareader.data as web\nfrom pandas import Series, DataFrame\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom datetime import datetime\n\n#pd.__version__\n\n%matplotlib inline\n```\n:::\n\n\n## Fetching, storing and retrieving your data\n\nFor demonstration purposes, we'll use a utility library that fetches data from standard online sources, such as Yahoo! Finance.\n\n::: {#6201fea9 .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=2}\n``` {.python .cell-code}\nimport yfinance as yf\n\nyahoo_stocks = pd.DataFrame(yf.download('YELP',start='2015-01-01',end='2015-12-31', progress = False))\n\nyahoo_stocks.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Volume</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2015-01-02</th>\n      <td>55.459999</td>\n      <td>55.599998</td>\n      <td>54.240002</td>\n      <td>55.150002</td>\n      <td>55.150002</td>\n      <td>1664500</td>\n    </tr>\n    <tr>\n      <th>2015-01-05</th>\n      <td>54.540001</td>\n      <td>54.950001</td>\n      <td>52.330002</td>\n      <td>52.529999</td>\n      <td>52.529999</td>\n      <td>2023000</td>\n    </tr>\n    <tr>\n      <th>2015-01-06</th>\n      <td>52.549999</td>\n      <td>53.930000</td>\n      <td>50.750000</td>\n      <td>52.439999</td>\n      <td>52.439999</td>\n      <td>3762800</td>\n    </tr>\n    <tr>\n      <th>2015-01-07</th>\n      <td>53.320000</td>\n      <td>53.750000</td>\n      <td>51.759998</td>\n      <td>52.209999</td>\n      <td>52.209999</td>\n      <td>1548200</td>\n    </tr>\n    <tr>\n      <th>2015-01-08</th>\n      <td>52.590000</td>\n      <td>54.139999</td>\n      <td>51.759998</td>\n      <td>53.830002</td>\n      <td>53.830002</td>\n      <td>2015300</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThis is a typical example of a dataframe.  \n\nNotice how each row has a label and each column has a label.\n\nA dataframe is an object that has __many__ methods associated with it, to do all sorts of useful things.\n\nHere is a simple method: ``.info()``\n\n::: {#cfdda85e .cell slideshow='{\"slide_type\":\"-\"}' execution_count=3}\n``` {.python .cell-code}\nyahoo_stocks.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nDatetimeIndex: 251 entries, 2015-01-02 to 2015-12-30\nData columns (total 6 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   Open       251 non-null    float64\n 1   High       251 non-null    float64\n 2   Low        251 non-null    float64\n 3   Close      251 non-null    float64\n 4   Adj Close  251 non-null    float64\n 5   Volume     251 non-null    int64  \ndtypes: float64(5), int64(1)\nmemory usage: 13.7 KB\n```\n:::\n:::\n\n\n### Reading to/from a ``.csv`` file\n\nContinuing to explore methods, let's write the dataframe out to a ``.csv`` file:\n\n::: {#ac986226 .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=4}\n``` {.python .cell-code}\nyahoo_stocks.to_csv('yahoo_data.csv')\n```\n:::\n\n\n::: {#6d3c8032 .cell execution_count=5}\n``` {.python .cell-code}\n!head yahoo_data.csv\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDate,Open,High,Low,Close,Adj Close,Volume\r\n2015-01-02,55.459999084472656,55.599998474121094,54.2400016784668,55.150001525878906,55.150001525878906,1664500\r\n2015-01-05,54.540000915527344,54.95000076293945,52.33000183105469,52.529998779296875,52.529998779296875,2023000\r\n2015-01-06,52.54999923706055,53.93000030517578,50.75,52.439998626708984,52.439998626708984,3762800\r\n2015-01-07,53.31999969482422,53.75,51.7599983215332,52.209999084472656,52.209999084472656,1548200\r\n2015-01-08,52.59000015258789,54.13999938964844,51.7599983215332,53.83000183105469,53.83000183105469,2015300\r\n2015-01-09,55.959999084472656,56.9900016784668,54.720001220703125,56.06999969482422,56.06999969482422,6224200\r\n2015-01-12,56.0,56.060001373291016,53.43000030517578,54.02000045776367,54.02000045776367,2407700\r\n2015-01-13,54.470001220703125,54.79999923706055,52.52000045776367,53.18000030517578,53.18000030517578,1958400\r\n2015-01-14,52.79999923706055,53.68000030517578,51.459999084472656,52.20000076293945,52.20000076293945,1854600\r\n```\n:::\n:::\n\n\nAnd of course we can likewise read a ``.csv`` file into a dataframe.   This is probably the most common way you will get data into Pandas.\n\n::: {#dd55b5aa .cell slideshow='{\"slide_type\":\"-\"}' execution_count=6}\n``` {.python .cell-code}\ndf = pd.read_csv('yahoo_data.csv')\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Volume</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2015-01-02</td>\n      <td>55.459999</td>\n      <td>55.599998</td>\n      <td>54.240002</td>\n      <td>55.150002</td>\n      <td>55.150002</td>\n      <td>1664500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2015-01-05</td>\n      <td>54.540001</td>\n      <td>54.950001</td>\n      <td>52.330002</td>\n      <td>52.529999</td>\n      <td>52.529999</td>\n      <td>2023000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2015-01-06</td>\n      <td>52.549999</td>\n      <td>53.930000</td>\n      <td>50.750000</td>\n      <td>52.439999</td>\n      <td>52.439999</td>\n      <td>3762800</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2015-01-07</td>\n      <td>53.320000</td>\n      <td>53.750000</td>\n      <td>51.759998</td>\n      <td>52.209999</td>\n      <td>52.209999</td>\n      <td>1548200</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2015-01-08</td>\n      <td>52.590000</td>\n      <td>54.139999</td>\n      <td>51.759998</td>\n      <td>53.830002</td>\n      <td>53.830002</td>\n      <td>2015300</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Working with data columns\n\nIn general, we'll usually organize things so that rows in the dataframe are __items__ and columns are __features__.\n\n::: {#ac923208 .cell slideshow='{\"slide_type\":\"-\"}' execution_count=7}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nIndex(['Date', 'Open', 'High', 'Low', 'Close', 'Adj Close', 'Volume'], dtype='object')\n```\n:::\n:::\n\n\nPandas allows you to use standard python __indexing__ to refer to columns (eg features) in your dataframe:\n\n::: {#f411f82f .cell slideshow='{\"slide_type\":\"-\"}' execution_count=8}\n``` {.python .cell-code}\ndf['Open']\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n0      55.459999\n1      54.540001\n2      52.549999\n3      53.320000\n4      52.590000\n         ...    \n246    27.950001\n247    28.270000\n248    28.120001\n249    27.950001\n250    28.580000\nName: Open, Length: 251, dtype: float64\n```\n:::\n:::\n\n\nPandas also allows you to use a syntax like an object attribute to refer to a column.\n\nBut note that the column name cannot include a space in this case.\n\n::: {#fc8c4166 .cell slideshow='{\"slide_type\":\"-\"}' execution_count=9}\n``` {.python .cell-code}\ndf.Open\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n0      55.459999\n1      54.540001\n2      52.549999\n3      53.320000\n4      52.590000\n         ...    \n246    27.950001\n247    28.270000\n248    28.120001\n249    27.950001\n250    28.580000\nName: Open, Length: 251, dtype: float64\n```\n:::\n:::\n\n\nYou can select a list of columns:\n\n::: {#c42d2e1b .cell slideshow='{\"slide_type\":\"-\"}' execution_count=10}\n``` {.python .cell-code}\ndf[['Open','Close']].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open</th>\n      <th>Close</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>55.459999</td>\n      <td>55.150002</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>54.540001</td>\n      <td>52.529999</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>52.549999</td>\n      <td>52.439999</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>53.320000</td>\n      <td>52.209999</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>52.590000</td>\n      <td>53.830002</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nPutting things together -- make sure this syntax is clear to you:\n\n::: {#f0a7a543 .cell slideshow='{\"slide_type\":\"-\"}' execution_count=11}\n``` {.python .cell-code}\ndf.Date.head(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n0    2015-01-02\n1    2015-01-05\n2    2015-01-06\n3    2015-01-07\n4    2015-01-08\n5    2015-01-09\n6    2015-01-12\n7    2015-01-13\n8    2015-01-14\n9    2015-01-15\nName: Date, dtype: object\n```\n:::\n:::\n\n\n::: {#bcfb3124 .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=12}\n``` {.python .cell-code}\ndf.Date.tail(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n241    2015-12-16\n242    2015-12-17\n243    2015-12-18\n244    2015-12-21\n245    2015-12-22\n246    2015-12-23\n247    2015-12-24\n248    2015-12-28\n249    2015-12-29\n250    2015-12-30\nName: Date, dtype: object\n```\n:::\n:::\n\n\nChanging column names is as simple as assigning to the ``.columns`` property.\n\nLet's adjust column names so that none of them include spaces:\n\n::: {#a6d352df .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=13}\n``` {.python .cell-code}\nnew_column_names = [x.lower().replace(' ','_') for x in df.columns]\ndf.columns = new_column_names\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 251 entries, 0 to 250\nData columns (total 7 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   date       251 non-null    object \n 1   open       251 non-null    float64\n 2   high       251 non-null    float64\n 3   low        251 non-null    float64\n 4   close      251 non-null    float64\n 5   adj_close  251 non-null    float64\n 6   volume     251 non-null    int64  \ndtypes: float64(5), int64(1), object(1)\nmemory usage: 13.9+ KB\n```\n:::\n:::\n\n\n(Be sure you understand the __list comprehension__ used above -- it's a common and important way to process a list in python.)\n\nNow **all** columns can be accessed using the **dot** notation:\n\n::: {#fa556ce0 .cell slideshow='{\"slide_type\":\"-\"}' execution_count=14}\n``` {.python .cell-code}\ndf.adj_close.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n0    55.150002\n1    52.529999\n2    52.439999\n3    52.209999\n4    53.830002\nName: adj_close, dtype: float64\n```\n:::\n:::\n\n\n## A sampling of DataFrame methods.\n\nA dataframe object has many useful methods.\n\nFamiliarize yourself with dataframe methods -- they are very useful.\n\nThese should be self-explanatory.\n\n::: {#8f188201 .cell slideshow='{\"slide_type\":\"slide\"}' execution_count=15}\n``` {.python .cell-code}\ndf[['high', 'low', 'open', 'close', 'volume', 'adj_close']].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nhigh         3.809084e+01\nlow          3.659777e+01\nopen         3.732426e+01\nclose        3.733303e+01\nvolume       3.501135e+06\nadj_close    3.733303e+01\ndtype: float64\n```\n:::\n:::\n\n\n::: {#7916c192 .cell slideshow='{\"slide_type\":\"slide\"}' execution_count=16}\n``` {.python .cell-code}\ndf[['high', 'low', 'open', 'close', 'volume', 'adj_close']].std()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nhigh         1.138931e+01\nlow          1.114006e+01\nopen         1.128846e+01\nclose        1.126194e+01\nvolume       4.152341e+06\nadj_close    1.126194e+01\ndtype: float64\n```\n:::\n:::\n\n\n::: {#e85df321 .cell slideshow='{\"slide_type\":\"slide\"}' execution_count=17}\n``` {.python .cell-code}\ndf[['high', 'low', 'open', 'close', 'volume', 'adj_close']].median()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nhigh         3.909000e+01\nlow          3.665000e+01\nopen         3.822000e+01\nclose        3.818000e+01\nvolume       2.356000e+06\nadj_close    3.818000e+01\ndtype: float64\n```\n:::\n:::\n\n\n::: {#88dd8ae2 .cell slideshow='{\"slide_type\":\"slide\"}' execution_count=18}\n``` {.python .cell-code}\ndf.open.mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n37.3242629229785\n```\n:::\n:::\n\n\n::: {#797f260e .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=19}\n``` {.python .cell-code}\ndf.high.mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n38.09083672633684\n```\n:::\n:::\n\n\n### Plotting methods\n\nPandas has an extensive library of plotting functions, and they are very easy to use.\n\nThese are your \"first look\" functions.\n\n(Later you will use specialized graphics packages for more sophisticated visualizations.)\n\n::: {#342e261a .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=20}\n``` {.python .cell-code}\ndf.high.plot(label='High')\ndf.low.plot(label='Low')\nplt.title('YELP Stock Price')\nplt.ylabel('Dollars')\nplt.legend(loc='best');\n```\n\n::: {.cell-output .cell-output-display}\n![](02B-Pandas_files/figure-html/cell-21-output-1.png){width=585 height=431}\n:::\n:::\n\n\n::: {#40beba7a .cell slideshow='{\"slide_type\":\"slide\"}' execution_count=21}\n``` {.python .cell-code}\ndf.adj_close.hist()\nplt.xlabel('Adjusted Closing Price')\nplt.ylabel('Dollars')\nplt.title('YELP');\n```\n\n::: {.cell-output .cell-output-display}\n![](02B-Pandas_files/figure-html/cell-22-output-1.png){width=585 height=449}\n:::\n:::\n\n\n### Bulk Operations\n\nMethods like ``sum()`` and ``std()`` work on entire columns. \n\nWe can run our own functions across all values in a column (or row) using ``apply()``.\n\nAs an example, let's go back to this plot:\n\n::: {#f992c525 .cell execution_count=22}\n``` {.python .cell-code}\ndf.high.plot(label='High')\ndf.low.plot(label='Low')\nplt.title('YELP Stock Price')\nplt.ylabel('Dollars')\nplt.legend(loc='best');\n```\n\n::: {.cell-output .cell-output-display}\n![](02B-Pandas_files/figure-html/cell-23-output-1.png){width=585 height=431}\n:::\n:::\n\n\nIt's __almost__ perfect.  The only problem is the $x$-axis: it should show time.\n\nTo fix this, we need to make the dataframe __index__ -- that is, the __row labels__ -- into dates.\n\nWe have a problem however: the \"dates\" in our data are only __strings__.   We need Pandas to understand that they are actually dates.\n\n::: {#6aafb1a2 .cell slideshow='{\"slide_type\":\"-\"}' execution_count=23}\n``` {.python .cell-code}\ndf.date.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n0    2015-01-02\n1    2015-01-05\n2    2015-01-06\n3    2015-01-07\n4    2015-01-08\nName: date, dtype: object\n```\n:::\n:::\n\n\nTo convert each string in the ``date`` column to an actual date we will use ``.apply()``:\n\n::: {#d332f1d7 .cell slideshow='{\"slide_type\":\"-\"}' execution_count=24}\n``` {.python .cell-code}\nnew_df = df.copy()\nnew_df.date = df.date.apply(lambda d: datetime.strptime(d.split()[0], \"%Y-%m-%d\"))\nnew_df.date.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n0   2015-01-02\n1   2015-01-05\n2   2015-01-06\n3   2015-01-07\n4   2015-01-08\nName: date, dtype: datetime64[ns]\n```\n:::\n:::\n\n\nEach row in a DataFrame is associated with an index, which is a label that uniquely identifies a row.\n\nThe row indices so far have been auto-generated by pandas, and are simply integers starting from 0. \n\nFixing this is as easy as assigning to the `index` property of the DataFrame.\n\n::: {#eaf7e4cc .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=25}\n``` {.python .cell-code}\nnew_df.index = new_df.date\nnew_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>adj_close</th>\n      <th>volume</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2015-01-02</th>\n      <td>2015-01-02</td>\n      <td>55.459999</td>\n      <td>55.599998</td>\n      <td>54.240002</td>\n      <td>55.150002</td>\n      <td>55.150002</td>\n      <td>1664500</td>\n    </tr>\n    <tr>\n      <th>2015-01-05</th>\n      <td>2015-01-05</td>\n      <td>54.540001</td>\n      <td>54.950001</td>\n      <td>52.330002</td>\n      <td>52.529999</td>\n      <td>52.529999</td>\n      <td>2023000</td>\n    </tr>\n    <tr>\n      <th>2015-01-06</th>\n      <td>2015-01-06</td>\n      <td>52.549999</td>\n      <td>53.930000</td>\n      <td>50.750000</td>\n      <td>52.439999</td>\n      <td>52.439999</td>\n      <td>3762800</td>\n    </tr>\n    <tr>\n      <th>2015-01-07</th>\n      <td>2015-01-07</td>\n      <td>53.320000</td>\n      <td>53.750000</td>\n      <td>51.759998</td>\n      <td>52.209999</td>\n      <td>52.209999</td>\n      <td>1548200</td>\n    </tr>\n    <tr>\n      <th>2015-01-08</th>\n      <td>2015-01-08</td>\n      <td>52.590000</td>\n      <td>54.139999</td>\n      <td>51.759998</td>\n      <td>53.830002</td>\n      <td>53.830002</td>\n      <td>2015300</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNow that we have made an index based on a real date, we can drop the original `date` column.\n\n::: {#2ff60cde .cell slideshow='{\"slide_type\":\"-\"}' execution_count=26}\n``` {.python .cell-code}\nnew_df = new_df.drop(['date'],axis=1)\nnew_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>adj_close</th>\n      <th>volume</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2015-01-02</th>\n      <td>55.459999</td>\n      <td>55.599998</td>\n      <td>54.240002</td>\n      <td>55.150002</td>\n      <td>55.150002</td>\n      <td>1664500</td>\n    </tr>\n    <tr>\n      <th>2015-01-05</th>\n      <td>54.540001</td>\n      <td>54.950001</td>\n      <td>52.330002</td>\n      <td>52.529999</td>\n      <td>52.529999</td>\n      <td>2023000</td>\n    </tr>\n    <tr>\n      <th>2015-01-06</th>\n      <td>52.549999</td>\n      <td>53.930000</td>\n      <td>50.750000</td>\n      <td>52.439999</td>\n      <td>52.439999</td>\n      <td>3762800</td>\n    </tr>\n    <tr>\n      <th>2015-01-07</th>\n      <td>53.320000</td>\n      <td>53.750000</td>\n      <td>51.759998</td>\n      <td>52.209999</td>\n      <td>52.209999</td>\n      <td>1548200</td>\n    </tr>\n    <tr>\n      <th>2015-01-08</th>\n      <td>52.590000</td>\n      <td>54.139999</td>\n      <td>51.759998</td>\n      <td>53.830002</td>\n      <td>53.830002</td>\n      <td>2015300</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNow we can see that Pandas handles these dates quite nicely:\n\n::: {#e0527cec .cell execution_count=27}\n``` {.python .cell-code}\nnew_df.high.plot(label='High')\nnew_df.low.plot(label='Low')\nplt.title('YELP Stock Price')\nplt.ylabel('Dollars')\nplt.legend(loc='best');\n```\n\n::: {.cell-output .cell-output-display}\n![](02B-Pandas_files/figure-html/cell-28-output-1.png){width=585 height=432}\n:::\n:::\n\n\n### Accessing rows of the DataFrame\n\nSo far we've seen how to access a column of the DataFrame.  To access a row we use a different notation.\n\nTo access a row by its index value, use the **`.loc()`** method.\n\n::: {#811802c9 .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=28}\n``` {.python .cell-code}\nnew_df.loc[datetime(2015,1,23,0,0)]\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\nopen         5.466000e+01\nhigh         5.564000e+01\nlow          5.430000e+01\nclose        5.519000e+01\nadj_close    5.519000e+01\nvolume       1.636400e+06\nName: 2015-01-23 00:00:00, dtype: float64\n```\n:::\n:::\n\n\nTo access a row by its sequence number (ie, like an array index), use **`.iloc()`** ('Integer Location')\n\n::: {#37519f19 .cell slideshow='{\"slide_type\":\"-\"}' execution_count=29}\n``` {.python .cell-code}\nnew_df.iloc[0,:]\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\nopen         5.546000e+01\nhigh         5.560000e+01\nlow          5.424000e+01\nclose        5.515000e+01\nadj_close    5.515000e+01\nvolume       1.664500e+06\nName: 2015-01-02 00:00:00, dtype: float64\n```\n:::\n:::\n\n\nTo iterate over the rows, use **`.iterrows()`**\n\n::: {#4bf14fce .cell slideshow='{\"slide_type\":\"-\"}' execution_count=30}\n``` {.python .cell-code}\nnum_positive_days = 0\nfor idx, row in df.iterrows():\n    if row.close > row.open:\n        num_positive_days += 1\n        \nprint(\"The total number of positive-gain days is {}.\".format(num_positive_days))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe total number of positive-gain days is 125.\n```\n:::\n:::\n\n\n## Filtering\n\nIt is easy to select interesting rows from the data.  \n\nAll the operations below return a new DataFrame, which itself can be treated the same way as all DataFrames we have seen so far.\n\n::: {#e06d9269 .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=31}\n``` {.python .cell-code}\ntmp_high = new_df.high > 55\ntmp_high.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\ndate\n2015-01-02     True\n2015-01-05    False\n2015-01-06    False\n2015-01-07    False\n2015-01-08    False\nName: high, dtype: bool\n```\n:::\n:::\n\n\nSumming a Boolean array is the same as counting the number of **`True`** values.\n\n::: {#e41b11e8 .cell slideshow='{\"slide_type\":\"-\"}' execution_count=32}\n``` {.python .cell-code}\nsum(tmp_high)\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n11\n```\n:::\n:::\n\n\nNow, let's select only the rows of **`df1`** that correspond to **`tmp_high`**\n\n::: {#b7f16936 .cell slideshow='{\"slide_type\":\"-\"}' execution_count=33}\n``` {.python .cell-code}\nnew_df[tmp_high]\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>adj_close</th>\n      <th>volume</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2015-01-02</th>\n      <td>55.459999</td>\n      <td>55.599998</td>\n      <td>54.240002</td>\n      <td>55.150002</td>\n      <td>55.150002</td>\n      <td>1664500</td>\n    </tr>\n    <tr>\n      <th>2015-01-09</th>\n      <td>55.959999</td>\n      <td>56.990002</td>\n      <td>54.720001</td>\n      <td>56.070000</td>\n      <td>56.070000</td>\n      <td>6224200</td>\n    </tr>\n    <tr>\n      <th>2015-01-12</th>\n      <td>56.000000</td>\n      <td>56.060001</td>\n      <td>53.430000</td>\n      <td>54.020000</td>\n      <td>54.020000</td>\n      <td>2407700</td>\n    </tr>\n    <tr>\n      <th>2015-01-22</th>\n      <td>53.869999</td>\n      <td>55.279999</td>\n      <td>53.119999</td>\n      <td>54.799999</td>\n      <td>54.799999</td>\n      <td>2295400</td>\n    </tr>\n    <tr>\n      <th>2015-01-23</th>\n      <td>54.660000</td>\n      <td>55.639999</td>\n      <td>54.299999</td>\n      <td>55.189999</td>\n      <td>55.189999</td>\n      <td>1636400</td>\n    </tr>\n    <tr>\n      <th>2015-01-26</th>\n      <td>55.119999</td>\n      <td>55.790001</td>\n      <td>54.830002</td>\n      <td>55.410000</td>\n      <td>55.410000</td>\n      <td>1450300</td>\n    </tr>\n    <tr>\n      <th>2015-01-27</th>\n      <td>56.060001</td>\n      <td>56.160000</td>\n      <td>54.570000</td>\n      <td>55.630001</td>\n      <td>55.630001</td>\n      <td>2410400</td>\n    </tr>\n    <tr>\n      <th>2015-01-28</th>\n      <td>56.150002</td>\n      <td>56.150002</td>\n      <td>52.919998</td>\n      <td>53.000000</td>\n      <td>53.000000</td>\n      <td>2013100</td>\n    </tr>\n    <tr>\n      <th>2015-02-03</th>\n      <td>53.830002</td>\n      <td>55.930000</td>\n      <td>53.410000</td>\n      <td>55.779999</td>\n      <td>55.779999</td>\n      <td>2885400</td>\n    </tr>\n    <tr>\n      <th>2015-02-04</th>\n      <td>55.529999</td>\n      <td>57.070000</td>\n      <td>55.250000</td>\n      <td>56.740002</td>\n      <td>56.740002</td>\n      <td>2498600</td>\n    </tr>\n    <tr>\n      <th>2015-02-05</th>\n      <td>57.599998</td>\n      <td>57.700001</td>\n      <td>56.080002</td>\n      <td>57.470001</td>\n      <td>57.470001</td>\n      <td>4657300</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nPutting it all together, we have the following commonly-used patterns:\n\n::: {#accafccb .cell slideshow='{\"slide_type\":\"-\"}' execution_count=34}\n``` {.python .cell-code}\npositive_days = new_df[new_df.close > new_df.open]\npositive_days.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>adj_close</th>\n      <th>volume</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2015-01-08</th>\n      <td>52.590000</td>\n      <td>54.139999</td>\n      <td>51.759998</td>\n      <td>53.830002</td>\n      <td>53.830002</td>\n      <td>2015300</td>\n    </tr>\n    <tr>\n      <th>2015-01-09</th>\n      <td>55.959999</td>\n      <td>56.990002</td>\n      <td>54.720001</td>\n      <td>56.070000</td>\n      <td>56.070000</td>\n      <td>6224200</td>\n    </tr>\n    <tr>\n      <th>2015-01-16</th>\n      <td>50.180000</td>\n      <td>51.490002</td>\n      <td>50.029999</td>\n      <td>51.389999</td>\n      <td>51.389999</td>\n      <td>2183300</td>\n    </tr>\n    <tr>\n      <th>2015-01-21</th>\n      <td>51.200001</td>\n      <td>53.500000</td>\n      <td>51.200001</td>\n      <td>53.410000</td>\n      <td>53.410000</td>\n      <td>3248100</td>\n    </tr>\n    <tr>\n      <th>2015-01-22</th>\n      <td>53.869999</td>\n      <td>55.279999</td>\n      <td>53.119999</td>\n      <td>54.799999</td>\n      <td>54.799999</td>\n      <td>2295400</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#e06502e4 .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=35}\n``` {.python .cell-code}\nvery_positive_days = new_df[(new_df.close - new_df.open) > 4]\nvery_positive_days.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>adj_close</th>\n      <th>volume</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2015-05-07</th>\n      <td>38.220001</td>\n      <td>48.73</td>\n      <td>38.220001</td>\n      <td>47.009998</td>\n      <td>47.009998</td>\n      <td>33831600</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Creating new columns\n\nTo create a new column, simply assign values to it.  Think of the columns as a dictionary:\n\n::: {#2bcb0a2f .cell slideshow='{\"slide_type\":\"-\"}' execution_count=36}\n``` {.python .cell-code}\nnew_df['profit'] = (new_df.open < new_df.close)\nnew_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>adj_close</th>\n      <th>volume</th>\n      <th>profit</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2015-01-02</th>\n      <td>55.459999</td>\n      <td>55.599998</td>\n      <td>54.240002</td>\n      <td>55.150002</td>\n      <td>55.150002</td>\n      <td>1664500</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2015-01-05</th>\n      <td>54.540001</td>\n      <td>54.950001</td>\n      <td>52.330002</td>\n      <td>52.529999</td>\n      <td>52.529999</td>\n      <td>2023000</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2015-01-06</th>\n      <td>52.549999</td>\n      <td>53.930000</td>\n      <td>50.750000</td>\n      <td>52.439999</td>\n      <td>52.439999</td>\n      <td>3762800</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2015-01-07</th>\n      <td>53.320000</td>\n      <td>53.750000</td>\n      <td>51.759998</td>\n      <td>52.209999</td>\n      <td>52.209999</td>\n      <td>1548200</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2015-01-08</th>\n      <td>52.590000</td>\n      <td>54.139999</td>\n      <td>51.759998</td>\n      <td>53.830002</td>\n      <td>53.830002</td>\n      <td>2015300</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's give each row a ``gain`` value as a categorical variable:\n\n::: {#603868bf .cell slideshow='{\"slide_type\":\"-\"}' execution_count=37}\n``` {.python .cell-code}\nfor idx, row in new_df.iterrows():\n    if row.open > row.close:\n        new_df.loc[idx,'gain']='negative'\n    elif (row.close - row.open) < 1:\n        new_df.loc[idx,'gain']='small_gain'\n    elif (row.close - row.open) < 6:\n        new_df.loc[idx,'gain']='medium_gain'\n    else:\n        new_df.loc[idx,'gain']='large_gain'\nnew_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>adj_close</th>\n      <th>volume</th>\n      <th>profit</th>\n      <th>gain</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2015-01-02</th>\n      <td>55.459999</td>\n      <td>55.599998</td>\n      <td>54.240002</td>\n      <td>55.150002</td>\n      <td>55.150002</td>\n      <td>1664500</td>\n      <td>False</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>2015-01-05</th>\n      <td>54.540001</td>\n      <td>54.950001</td>\n      <td>52.330002</td>\n      <td>52.529999</td>\n      <td>52.529999</td>\n      <td>2023000</td>\n      <td>False</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>2015-01-06</th>\n      <td>52.549999</td>\n      <td>53.930000</td>\n      <td>50.750000</td>\n      <td>52.439999</td>\n      <td>52.439999</td>\n      <td>3762800</td>\n      <td>False</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>2015-01-07</th>\n      <td>53.320000</td>\n      <td>53.750000</td>\n      <td>51.759998</td>\n      <td>52.209999</td>\n      <td>52.209999</td>\n      <td>1548200</td>\n      <td>False</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>2015-01-08</th>\n      <td>52.590000</td>\n      <td>54.139999</td>\n      <td>51.759998</td>\n      <td>53.830002</td>\n      <td>53.830002</td>\n      <td>2015300</td>\n      <td>True</td>\n      <td>medium_gain</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nHere is another, more \"functional\", way to accomplish the same thing.\n\nDefine a function that classifies rows, and **`apply`** it to each row.\n\n::: {#cf1667df .cell slideshow='{\"slide_type\":\"-\"}' execution_count=38}\n``` {.python .cell-code}\ndef namerow(row):\n    if row.open > row.close:\n        return 'negative'\n    elif (row.close - row.open) < 1:\n        return 'small_gain'\n    elif (row.close - row.open) < 6:\n        return 'medium_gain'\n    else:\n        return 'large_gain'\n\nnew_df['test_column'] = new_df.apply(namerow, axis = 1)\n```\n:::\n\n\n::: {#ac5d5c8e .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=39}\n``` {.python .cell-code}\nnew_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>adj_close</th>\n      <th>volume</th>\n      <th>profit</th>\n      <th>gain</th>\n      <th>test_column</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2015-01-02</th>\n      <td>55.459999</td>\n      <td>55.599998</td>\n      <td>54.240002</td>\n      <td>55.150002</td>\n      <td>55.150002</td>\n      <td>1664500</td>\n      <td>False</td>\n      <td>negative</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>2015-01-05</th>\n      <td>54.540001</td>\n      <td>54.950001</td>\n      <td>52.330002</td>\n      <td>52.529999</td>\n      <td>52.529999</td>\n      <td>2023000</td>\n      <td>False</td>\n      <td>negative</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>2015-01-06</th>\n      <td>52.549999</td>\n      <td>53.930000</td>\n      <td>50.750000</td>\n      <td>52.439999</td>\n      <td>52.439999</td>\n      <td>3762800</td>\n      <td>False</td>\n      <td>negative</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>2015-01-07</th>\n      <td>53.320000</td>\n      <td>53.750000</td>\n      <td>51.759998</td>\n      <td>52.209999</td>\n      <td>52.209999</td>\n      <td>1548200</td>\n      <td>False</td>\n      <td>negative</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>2015-01-08</th>\n      <td>52.590000</td>\n      <td>54.139999</td>\n      <td>51.759998</td>\n      <td>53.830002</td>\n      <td>53.830002</td>\n      <td>2015300</td>\n      <td>True</td>\n      <td>medium_gain</td>\n      <td>medium_gain</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nOK, point made, let's get rid of that extraneous `test_column`:\n\n::: {#b6d0d589 .cell slideshow='{\"slide_type\":\"-\"}' execution_count=40}\n``` {.python .cell-code}\nnew_df.drop('test_column', axis = 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>adj_close</th>\n      <th>volume</th>\n      <th>profit</th>\n      <th>gain</th>\n    </tr>\n    <tr>\n      <th>date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2015-01-02</th>\n      <td>55.459999</td>\n      <td>55.599998</td>\n      <td>54.240002</td>\n      <td>55.150002</td>\n      <td>55.150002</td>\n      <td>1664500</td>\n      <td>False</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>2015-01-05</th>\n      <td>54.540001</td>\n      <td>54.950001</td>\n      <td>52.330002</td>\n      <td>52.529999</td>\n      <td>52.529999</td>\n      <td>2023000</td>\n      <td>False</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>2015-01-06</th>\n      <td>52.549999</td>\n      <td>53.930000</td>\n      <td>50.750000</td>\n      <td>52.439999</td>\n      <td>52.439999</td>\n      <td>3762800</td>\n      <td>False</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>2015-01-07</th>\n      <td>53.320000</td>\n      <td>53.750000</td>\n      <td>51.759998</td>\n      <td>52.209999</td>\n      <td>52.209999</td>\n      <td>1548200</td>\n      <td>False</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>2015-01-08</th>\n      <td>52.590000</td>\n      <td>54.139999</td>\n      <td>51.759998</td>\n      <td>53.830002</td>\n      <td>53.830002</td>\n      <td>2015300</td>\n      <td>True</td>\n      <td>medium_gain</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2015-12-23</th>\n      <td>27.950001</td>\n      <td>28.420000</td>\n      <td>27.440001</td>\n      <td>28.150000</td>\n      <td>28.150000</td>\n      <td>1001000</td>\n      <td>True</td>\n      <td>small_gain</td>\n    </tr>\n    <tr>\n      <th>2015-12-24</th>\n      <td>28.270000</td>\n      <td>28.590000</td>\n      <td>27.900000</td>\n      <td>28.400000</td>\n      <td>28.400000</td>\n      <td>587400</td>\n      <td>True</td>\n      <td>small_gain</td>\n    </tr>\n    <tr>\n      <th>2015-12-28</th>\n      <td>28.120001</td>\n      <td>28.379999</td>\n      <td>27.770000</td>\n      <td>27.879999</td>\n      <td>27.879999</td>\n      <td>1004500</td>\n      <td>False</td>\n      <td>negative</td>\n    </tr>\n    <tr>\n      <th>2015-12-29</th>\n      <td>27.950001</td>\n      <td>28.540001</td>\n      <td>27.740000</td>\n      <td>28.480000</td>\n      <td>28.480000</td>\n      <td>1103900</td>\n      <td>True</td>\n      <td>small_gain</td>\n    </tr>\n    <tr>\n      <th>2015-12-30</th>\n      <td>28.580000</td>\n      <td>28.780001</td>\n      <td>28.170000</td>\n      <td>28.250000</td>\n      <td>28.250000</td>\n      <td>1068000</td>\n      <td>False</td>\n      <td>negative</td>\n    </tr>\n  </tbody>\n</table>\n<p>251 rows × 8 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Grouping\n\nAn **extremely** powerful DataFrame method is **`groupby()`**. \n\nThis is entirely analagous to **`GROUP BY`** in SQL.\n\nIt will group the rows of a DataFrame by the values in one (or more) columns, and let you iterate through each group.\n\nHere we will look at the average gain among the  categories of gains (negative, small, medium and large) we defined above and stored in column `gain`.\n\n::: {#87fead39 .cell slideshow='{\"slide_type\":\"-\"}' execution_count=41}\n``` {.python .cell-code}\ngain_groups = new_df.groupby('gain')\n```\n:::\n\n\nEssentially, **`gain_groups`** behaves like a dictionary:\n* the keys are the unique values found in the `gain` column, and \n* the values are DataFrames that contain only the rows having the corresponding unique values.\n\n::: {#b5cd6af2 .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=42}\n``` {.python .cell-code}\nfor gain, gain_data in gain_groups:\n    print(gain)\n    print(gain_data.head())\n    print('=============================')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlarge_gain\n                 open   high        low      close  adj_close    volume  \\\ndate                                                                      \n2015-05-07  38.220001  48.73  38.220001  47.009998  47.009998  33831600   \n\n            profit        gain test_column  \ndate                                        \n2015-05-07    True  large_gain  large_gain  \n=============================\nmedium_gain\n                 open       high        low      close  adj_close   volume  \\\ndate                                                                         \n2015-01-08  52.590000  54.139999  51.759998  53.830002  53.830002  2015300   \n2015-01-16  50.180000  51.490002  50.029999  51.389999  51.389999  2183300   \n2015-01-21  51.200001  53.500000  51.200001  53.410000  53.410000  3248100   \n2015-02-03  53.830002  55.930000  53.410000  55.779999  55.779999  2885400   \n2015-02-04  55.529999  57.070000  55.250000  56.740002  56.740002  2498600   \n\n            profit         gain  test_column  \ndate                                          \n2015-01-08    True  medium_gain  medium_gain  \n2015-01-16    True  medium_gain  medium_gain  \n2015-01-21    True  medium_gain  medium_gain  \n2015-02-03    True  medium_gain  medium_gain  \n2015-02-04    True  medium_gain  medium_gain  \n=============================\nnegative\n                 open       high        low      close  adj_close   volume  \\\ndate                                                                         \n2015-01-02  55.459999  55.599998  54.240002  55.150002  55.150002  1664500   \n2015-01-05  54.540001  54.950001  52.330002  52.529999  52.529999  2023000   \n2015-01-06  52.549999  53.930000  50.750000  52.439999  52.439999  3762800   \n2015-01-07  53.320000  53.750000  51.759998  52.209999  52.209999  1548200   \n2015-01-12  56.000000  56.060001  53.430000  54.020000  54.020000  2407700   \n\n            profit      gain test_column  \ndate                                      \n2015-01-02   False  negative    negative  \n2015-01-05   False  negative    negative  \n2015-01-06   False  negative    negative  \n2015-01-07   False  negative    negative  \n2015-01-12   False  negative    negative  \n=============================\nsmall_gain\n                 open       high        low      close  adj_close   volume  \\\ndate                                                                         \n2015-01-09  55.959999  56.990002  54.720001  56.070000  56.070000  6224200   \n2015-01-22  53.869999  55.279999  53.119999  54.799999  54.799999  2295400   \n2015-01-23  54.660000  55.639999  54.299999  55.189999  55.189999  1636400   \n2015-01-26  55.119999  55.790001  54.830002  55.410000  55.410000  1450300   \n2015-01-29  52.849998  53.310001  51.410000  52.930000  52.930000  1844100   \n\n            profit        gain test_column  \ndate                                        \n2015-01-09    True  small_gain  small_gain  \n2015-01-22    True  small_gain  small_gain  \n2015-01-23    True  small_gain  small_gain  \n2015-01-26    True  small_gain  small_gain  \n2015-01-29    True  small_gain  small_gain  \n=============================\n```\n:::\n:::\n\n\n::: {#738b5b8c .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=43}\n``` {.python .cell-code}\nfor gain, gain_data in new_df.groupby(\"gain\"):\n    print('The average closing value for the {} group is {}'.format(gain,\n                                                           gain_data.close.mean()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe average closing value for the large_gain group is 47.0099983215332\nThe average closing value for the medium_gain group is 39.72307696709266\nThe average closing value for the negative group is 37.38476184057811\nThe average closing value for the small_gain group is 36.53367346160266\n```\n:::\n:::\n\n\n## Other Pandas Classes\n\nA DataFrame is essentially an annotated 2-D array.\n\nPandas also has annotated versions of 1-D and 3-D arrays.\n\nA 1-D array in Pandas is called a `Series`.\n\nA 3-D array in Pandas is created using a ``MultiIndex``.\n\nTo use these, read the documentation!\n\n## Comparing multiple stocks\n\nAs a last task, we will use the experience we obtained so far -- and learn some new things -- in order to compare the performance of different stocks we obtained from Yahoo finance.\n\n::: {#b2859634 .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=44}\n``` {.python .cell-code}\nstocks = ['ORCL', 'TSLA', 'IBM','YELP', 'MSFT']\nstock_df = pd.DataFrame()\nfor s in stocks:\n    stock_df[s] = pd.DataFrame(yf.download(s,start='2014-01-01',end='2014-12-31', progress = False))['Close']\nstock_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ORCL</th>\n      <th>TSLA</th>\n      <th>IBM</th>\n      <th>YELP</th>\n      <th>MSFT</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2014-01-02</th>\n      <td>37.840000</td>\n      <td>10.006667</td>\n      <td>177.370941</td>\n      <td>67.919998</td>\n      <td>37.160000</td>\n    </tr>\n    <tr>\n      <th>2014-01-03</th>\n      <td>37.619999</td>\n      <td>9.970667</td>\n      <td>178.432129</td>\n      <td>67.660004</td>\n      <td>36.910000</td>\n    </tr>\n    <tr>\n      <th>2014-01-06</th>\n      <td>37.470001</td>\n      <td>9.800000</td>\n      <td>177.820267</td>\n      <td>71.720001</td>\n      <td>36.130001</td>\n    </tr>\n    <tr>\n      <th>2014-01-07</th>\n      <td>37.849998</td>\n      <td>9.957333</td>\n      <td>181.367111</td>\n      <td>72.660004</td>\n      <td>36.410000</td>\n    </tr>\n    <tr>\n      <th>2014-01-08</th>\n      <td>37.720001</td>\n      <td>10.085333</td>\n      <td>179.703629</td>\n      <td>78.419998</td>\n      <td>35.759998</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#4982d7af .cell execution_count=45}\n``` {.python .cell-code}\nstock_df.plot();\n```\n\n::: {.cell-output .cell-output-display}\n![](02B-Pandas_files/figure-html/cell-46-output-1.png){width=575 height=412}\n:::\n:::\n\n\nNext, we will calculate returns over a period of length $T,$ defined as:\n\n$$ r(t) = \\frac{f(t)-f(t-T)}{f(t)} $$\n\nThe returns can be computed with a simple DataFrame method **`pct_change()`**.  Note that for the first $T$ timesteps, this value is not defined (of course):\n\n::: {#6429fb60 .cell slideshow='{\"slide_type\":\"-\"}' execution_count=46}\n``` {.python .cell-code}\nrets = stock_df.pct_change(30)\nrets.iloc[25:35]\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ORCL</th>\n      <th>TSLA</th>\n      <th>IBM</th>\n      <th>YELP</th>\n      <th>MSFT</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2014-02-07</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2014-02-10</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2014-02-11</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2014-02-12</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2014-02-13</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2014-02-14</th>\n      <td>0.003700</td>\n      <td>0.320653</td>\n      <td>-0.009918</td>\n      <td>0.321849</td>\n      <td>0.012379</td>\n    </tr>\n    <tr>\n      <th>2014-02-18</th>\n      <td>0.009304</td>\n      <td>0.361995</td>\n      <td>-0.018485</td>\n      <td>0.355897</td>\n      <td>0.013817</td>\n    </tr>\n    <tr>\n      <th>2014-02-19</th>\n      <td>0.010675</td>\n      <td>0.317279</td>\n      <td>-0.016398</td>\n      <td>0.254880</td>\n      <td>0.038195</td>\n    </tr>\n    <tr>\n      <th>2014-02-20</th>\n      <td>0.011096</td>\n      <td>0.405798</td>\n      <td>-0.028728</td>\n      <td>0.257501</td>\n      <td>0.036803</td>\n    </tr>\n    <tr>\n      <th>2014-02-21</th>\n      <td>0.010074</td>\n      <td>0.385510</td>\n      <td>-0.027558</td>\n      <td>0.170875</td>\n      <td>0.062081</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNow we'll plot the timeseries of the returns of the different stocks.\n\nNotice that the `NaN` values are gracefully dropped by the plotting function.\n\n::: {#14c415cb .cell slideshow='{\"slide_type\":\"-\"}' execution_count=47}\n``` {.python .cell-code}\nrets.plot();\n```\n\n::: {.cell-output .cell-output-display}\n![](02B-Pandas_files/figure-html/cell-48-output-1.png){width=590 height=412}\n:::\n:::\n\n\n::: {#e3a86125 .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=48}\n``` {.python .cell-code}\nplt.scatter(rets.TSLA, rets.YELP)\nplt.xlabel('TESLA 30-day returns')\nplt.ylabel('YELP 30-day returns');\n```\n\n::: {.cell-output .cell-output-display}\n![](02B-Pandas_files/figure-html/cell-49-output-1.png){width=600 height=429}\n:::\n:::\n\n\nThere appears to be some (fairly strong) correlation between the movement of TSLA and YELP stocks.  Let's measure this.\n\nThe correlation coefficient between variables $X$ and $Y$ is defined as follows:\n\n$$ \\text{Corr}(X,Y) = \\frac{E\\left[(X-\\mu_X)(Y-\\mu_Y)\\right]}{\\sigma_X\\sigma_Y} $$\n\nPandas provides a dataframe method to compute the correlation coefficient of all pairs of columns: **`corr()`**.\n\n::: {#7a365cb3 .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=49}\n``` {.python .cell-code}\nrets.corr()\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ORCL</th>\n      <th>TSLA</th>\n      <th>IBM</th>\n      <th>YELP</th>\n      <th>MSFT</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ORCL</th>\n      <td>1.000000</td>\n      <td>0.007218</td>\n      <td>0.026666</td>\n      <td>-0.083688</td>\n      <td>0.131830</td>\n    </tr>\n    <tr>\n      <th>TSLA</th>\n      <td>0.007218</td>\n      <td>1.000000</td>\n      <td>0.196371</td>\n      <td>0.769623</td>\n      <td>0.411348</td>\n    </tr>\n    <tr>\n      <th>IBM</th>\n      <td>0.026666</td>\n      <td>0.196371</td>\n      <td>1.000000</td>\n      <td>0.104705</td>\n      <td>0.343697</td>\n    </tr>\n    <tr>\n      <th>YELP</th>\n      <td>-0.083688</td>\n      <td>0.769623</td>\n      <td>0.104705</td>\n      <td>1.000000</td>\n      <td>0.264703</td>\n    </tr>\n    <tr>\n      <th>MSFT</th>\n      <td>0.131830</td>\n      <td>0.411348</td>\n      <td>0.343697</td>\n      <td>0.264703</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIt takes a bit of time to examine that table and draw conclusions.  \n\nTo speed that process up it helps to visualize the table.\n\nWe will learn more about visualization later, but for now this is a simple example.\n\n::: {#cccac583 .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=50}\n``` {.python .cell-code}\nsns.heatmap(rets.corr(), annot=True);\n```\n\n::: {.cell-output .cell-output-display}\n![](02B-Pandas_files/figure-html/cell-51-output-1.png){width=533 height=416}\n:::\n:::\n\n\nFinally, it is important to know that the plotting performed by Pandas is just a layer on top of `matplotlib` (i.e., the `plt` package).  \n\nSo Panda's plots can (and often should) be replaced or improved by using additional functions from `matplotlib`.\n\nFor example, suppose we want to know both the returns as well as the standard deviation of the returns of a stock (i.e., its risk).  \n\nHere is visualization of the result of such an analysis, and we construct the plot using only functions from `matplotlib`.\n\n::: {#28d40f06 .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=51}\n``` {.python .cell-code}\n# plt.scatter(rets.mean(), rets.std());\nplt.xlabel('Expected returns')\nplt.ylabel('Standard Deviation (Risk)')\nplt.xlim([-.05,.1])\nplt.ylim([0,.3])\nfor label, x, y in zip(rets.columns, rets.mean(), rets.std()):\n    plt.annotate(\n        label, \n        xy = (x, y), xytext = (30, -30),\n        textcoords = 'offset points', ha = 'right', va = 'bottom',\n        bbox = dict(boxstyle = 'round,pad=0.5', fc = 'yellow', alpha = 0.5),\n        arrowprops = dict(arrowstyle = '->', connectionstyle = 'arc3,rad=0'))\n```\n\n::: {.cell-output .cell-output-display}\n![](02B-Pandas_files/figure-html/cell-52-output-1.png){width=612 height=434}\n:::\n:::\n\n\nTo understand what these functions are doing, (especially the `annotate` function), you will need to consult the online documentation for matplotlib.  Just use Google to find it.\n\n",
    "supporting": [
      "02B-Pandas_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}