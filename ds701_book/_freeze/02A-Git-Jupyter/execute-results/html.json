{
  "hash": "9cb82738e35fd7a2c9eefbbaed2e72a9",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Essential Tools: Git and Jupyter'\njupyter: python3\nformat: html\n---\n\n::: {#0a693300 .cell hide_input='true' nbpresent='{\"id\":\"5a4b2ca5-894e-4f77-aaf0-556fff477982\"}' slideshow='{\"slide_type\":\"skip\"}' tags='[\"hide-input\"]' execution_count=1}\n``` {.python .cell-code}\n%matplotlib inline\n%config InlineBackend.figure_format='retina'\n# %run -i common.py\n# %run -i ln_preamble.py\nfrom importlib import reload\nfrom datetime import datetime\n```\n:::\n\n\n## Critical Course Tools\n\nThis course focuses on developing practical skills in working with data and providing students with a hands-on understanding of classical data analysis techniques. \n\nThis will be a coding-intensive course. \n\nInstruction in this course will use [Python](https://www.python.org/), since it allows for fast prototyping and is supported by a great variety of scientific (and, specifically, data related) libraries.\n\nThe materials of this course can be found under [this GitHub account](https://github.com/mcrovella/DS701-Tools-for-Data-Science). \n\nBoth the lectures and the homeworks of this course are in the format of [Jupyter notebooks](https://jupyter.org).\n\n__Today's Agenda__ is a quick review of essential tools you will need for this course.\n\nWe are __not__ providing a comprehensive introduction to these tools.\n\nThey are all __extensively__ documented online and you will need to familiarize with online resources to learn what you need.  \n\nStack overflow, etc, is also your friend -- but as a reference, not as a way to solve homework problems!\n\n__The key tools you will need__ are:\n1. Git\n2. Jupyter\n3. Pandas \n\n## Python\n\nWe will not be teaching you python in this course.  \n\nYou are assumed to be proficient in python.\n\nIf you need to refresh your memory, there is a quick review of Python in the online lecture notes.\n\nThere are many ways to install Python.  \n\nThe biggest challenge in installing Python is configuring the many different packages that can be used.\n\nFor that reason, I recommend the free **Anaconda Scientific Python** distribution, which you can find via Google. This Python distribution contains most of the packages that we will be using throughout the course. It also includes an easy-to-use but powerful package install/update system, **`conda`**.\n\nNote that we are using Python 3 (get the latest version, which should be 3.9 or later).  \n\n## Git\n\nOne of the goals of this course is make you familiar with the modern workflow of code-versioning and collaboration. \n\n\n\nIf you don't have it already, download **git** from [here](http://git-scm.com/downloads). \n\nIf you don't already have one, you __must__ also create an account on GitHub.\n\nYou can find extensive documentation on how to use **git** on the [Help Pages of Github](https://docs.github.com/en/get-started/quickstart), on [Atlassian](https://www.atlassian.com/git/tutorials/setting-up-a-repository), and many other sites.\n\n## Working with Git\n\n### Configuration\n\nThe first time we use *git* on a new machine, we need to configure our name and email\n\n```\n$ git config --global user.name \"Mark Crovella\"\n$ git config --global user.mail \"crovella@bu.edu\"\n```\nUse the email that you used for your GitHub account.\n\n### Creating a Repository\n\n\nAfter installing Git, we can configure our first repository. First, let's create a new directory.\n\n```\n$ mkdir thoughts\n$ cd thoughts\n```\n\nNow, we can create a *git* repository in this directory.\n\n```\n$ git init\n```\n\nWe can check that everything is set up correctly by asking *git* to tell us the status of our project.\n\n```\n$ git status\nOn branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)\n```\n\n\nNow, create a file named ```science.txt```, edit it with your favorite text editor and add the following lines\n\n```\nStarting to think about data\n```\n\nIf we check the status of our repository again, *git* tells us that there is a new file:\n```\n$ git status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        science.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n```\n\nTo give you precise control about what changes are included in each revision, *git* has a special staging area.\n\nIn the staging area it keeps track of things that you have added to the current change set but not yet committed. \n\n```git add``` puts things in this area, and ```git commit``` then copies them to long-term storage (as a commit):\n\n![Alt text](./figs/git-staging-area.png)\n\n\nThe \"untracked files\" message means that there's a file in the directory that *git* isn't keeping track of. We can tell *git* that it should do so using ```git add```:\n\n```\n$ git add science.txt\n```\n\nand then check that the file is now being tracked:\n\n```\n$ git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n\n        new file:   science.txt\n\n```\n\n*git* now knows that it's supposed to keep track of ```science.txt```, but it hasn't yet recorded any changes for posterity as a commit. \n\nTo get it to do that, we need to run one more command:\n\n```\n$ git commit -m \"Preparing for science\"\n[master (root-commit) f516d22] Preparing for science\n 1 file changed, 1 insertion(+)\n create mode 100644 science.txt\n```\n\n\nWhen we run ```git commit```, *git* takes everything we have told it to save by using ```git add``` and stores a copy permanently inside the special ```.git``` directory. \n\nThis permanent copy is called a **revision** and its short identifier is *f516d22*. (Your revision will have another identifier.)\n\nWe use the -m flag (for \"message\") to record a comment that will help us remember later on what we did and why. \n\nIf we just run ```git commit``` without the ```-m``` option, *git* will launch an editor such as ```vim``` (or whatever other editor we configured at the start) so that we can write a longer message. \n\nIf we run git status now:\n```\n$ git status\nOn branch master\nnothing to commit, working tree clean\n```\n\nit tells us everything is up to date. If we want to know what we've done recently, we can ask *git* to show us the project's history using ```git log```:\n\n```\n$ git log\nAuthor: Mark Crovella <crovella@bu.edu>\nDate:   Sun Jan 25 12:48:44 2015 -0500\n\n    Preparing for science\n```\n\n### Changing a file\n\n\nNow, suppose that we edit the file:\n\n```\nStarting to think about data\nI need to attend CS506\n```\n\nNow if we run ```git status```, *git* will tell us that a file that it is tracking has been modified:\n\n```\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   science.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\nThe last line is the key phrase: *\"no changes added to commit\"*. \n\nWe have changed this file, but we haven't told *git* we will want to save those changes (which we do with ```git add```) much less actually saved them. \n\nLet's double-check our work using ```git diff```, which shows us the differences between the current state of the file and the most recently saved version:\n\n```\n$ git diff\ndiff --git a/science.txt b/science.txt\nindex 0ac4b7b..c5b1b05 100644\n--- a/science.txt\n+++ b/science.txt\n@@ -1 +1,2 @@\n Starting to think about data\n+I need to attend CS506\n```\n\n\nOK, we are happy with that, so let's commit our change:\n```\n$ git commit -m \"Related course\"\nOn branch master\nChanges not staged for commit:\n        modified:   science.txt\n\nno changes added to commit\n```\n\n*Whoops!* *Git* won't commit the file because we didn't use ```git add``` first. Let's fix that:\n```\n$ git add science.txt\n$ git commit -m \"Related course\"\n[master 1bd7277] Related course\n 1 file changed, 1 insertion(+)\n```\n\n*Git* insists that we add files to the set we want to commit before actually committing anything because we may not want to commit everything at once. \n\nFor example, suppose we're adding a few citations to our project. We might want to commit those additions, and the corresponding addition to the bibliography, but not commit the work we're doing on the analysis (which we haven't finished yet).\n\n### Recovering old versions\n\n\nWe can save changes to files and see what we have changed. How can we restore older versions however? Let's suppose we accidentally overwrite the file:\n\n```\n$ cat science.txt\nDespair! Nothing works\n```\n\nNow, ```git status``` tells us that the file has been changed, but those changes haven't been staged:\n\n```\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   science.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\nWe can put things back the way they were by using ```git checkout```:\n\n```\n$ git checkout HEAD science.txt\n$ cat science.txt\nStarting to think about data\nI need to attend CS506\n```\n\n## GitHub\n\nSystems like *git* allow us to move work between any two repositories.\n\nIn practice, though, it's easiest to use one copy as a central hub, and to keep it on the web rather than on someone's laptop. Most programmers use hosting services like [GitHub](https://github.com/) to hold those master copies. \n\nFor the purpose of our course, we will be using [GitHub](https://github.com/) to host the course material. \n\nYou will also submit your homeworks through this platform. \n\nNext, we will cover how you can clone the course's repository and how to submit your solutions to the homework. \n\nFor more information on how to create your own repository on GitHub and upload code to it, please see the tutorial by [Software Carpentry](http://swcarpentry.github.io/git-novice/).\n\n<img src=\"./figs/github-workflow.jpg\" alt=\"Drawing\" width=\"500px\">\n\nThis workflow shows you the essential new commands:\n\n* ``git pull``\n* ``git push``\n\nAnd when you first copy a remote repository, you will use:\n\n* ``git clone``\n\n### Course repositories\n\nThe material of the course is hosted on GitHub, under [this account](https://github.com/mcrovella/CS506-Computational-Tools-for-Data-Science).\n\nIn order to download a copy of the lectures and run them locally on your computer, you need to clone the lecture repository. To do that:\n\n1. Create a new folder for the course.\n```\n$ mkdir cs506\n$ cd cs506\n```\n2. Copy the clone url from the [repository's website](https://github.com/mcrovella/CS506-Computational-Tools-for-Data-Science).\n3. Clone the repository from *git*.\n```\n$ git clone https://github.com/mcrovella/CS506-Computational-Tools-for-Data-Science.git\n```\n\nYou should now have a directory with the course material.\n\nTo update the repository and download the **new material**, type\n```\n$ git pull\n```\n\n### Create a private homework repository\n\nEach assignment will have its own private repository, on GitHub shared only by you and the instructors.  \n\nThe last commit time on the repo will be used as the submission time.\n\n## Jupyter Notebook\n\nYou should get used to developing your code _incrementally._\n\nIf you typically are writing files that you then run from the command line, e.g., `python code.py`, then you are not getting one of the main benefits of working in python.\n\nInstead you should __interact with the interpreter.__  \n\nAn ideal way to do this is to use `Jupyter notebook`.   This puts a browser front-end on `ipython`.  \n\nIn fact, these slides are actually just a Jupyter notebook.\n\nTo run the Jupyter Notebook server from the command line, type ```jupyter notebook```. Your web browser will open and load the environment.\n\nIn the notebook, you can type and run code:\n\n::: {#d88f2a82 .cell nbpresent='{\"id\":\"c82fac99-51ab-41f4-af0d-b272bee62cdc\"}' slideshow='{\"slide_type\":\"-\"}' execution_count=9}\n``` {.python .cell-code}\nprint(\"whatever!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nwhatever!\n```\n:::\n:::\n\n\n### Ideal Use of Jupyter Notebook\n\nThe Jupyter Notebook environment is beneficially used as follows:\n* Documentation Cell(s)\n* Computation Cell(s)\n* Visualization Cell(s)\n\nFor example, let's say you are studying correlation in stock prices.\n\nFirst, you document what you are doing:\n\nWe are interested in asking \"how similar\" are two stock prices.\n\nThe tool for this purpose is __correlation__, ie, normalized covariance:\n\n$$\\rho(X,Y) = \\frac{E\\left[(X-\\mu_X)(Y-\\mu_Y)\\right]}{\\sigma_X \\sigma_Y}$$\n\nThen, you perform the computation:\n\n::: {#f118440d .cell slideshow='{\"slide_type\":\"fragment\"}' execution_count=10}\n``` {.python .cell-code}\nimport pandas as pd\nimport yfinance as yf\n\nstocks = ['TSLA', 'YELP']\ndf = pd.DataFrame()\nfor s in stocks:\n    df[s] = pd.DataFrame(yf.download(s,start='2014-01-01',end='2014-12-31', progress = False))['Close']\n\nrets = df.pct_change(30)\n\ndf.corr()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>TSLA</th>\n      <th>YELP</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>TSLA</th>\n      <td>1.000000</td>\n      <td>0.137742</td>\n    </tr>\n    <tr>\n      <th>YELP</th>\n      <td>0.137742</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThen, you visualize the results:\n\n::: {#f3f94bb0 .cell execution_count=11}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n#| slideshow: {slide_type: fragment}\nrets[['TSLA', 'YELP']].plot(lw=2)\nplt.legend(loc='best');\n```\n\n::: {.cell-output .cell-output-display}\n![](02A-Git-Jupyter_files/figure-html/cell-12-output-1.png){width=590 height=412}\n:::\n:::\n\n\nAs you use the Jupyter notebook, this will become a natural cycle:\n    \n* Document\n* Compute\n* Visualize\n\n",
    "supporting": [
      "02A-Git-Jupyter_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}