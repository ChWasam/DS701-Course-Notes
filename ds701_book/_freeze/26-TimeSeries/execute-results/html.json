{
  "hash": "cee4bdcf50d4becb41c7590f2863ae0b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Time Series Analysis'\njupyter: python3\nbibliography: references.bib\n---\n\n\n## Introduction\n\n[![](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/tools4ds/DS701-Course-Notes/blob/main/ds701_book/jupyter_notebooks/26-TimeSeries.ipynb)\n\n\n# Introduction to Time Series\n\n## Definition and examples\n\n::: {#39e36cd9 .cell execution_count=2}\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-2-output-1.png){width=816 height=302 fig-align='center'}\n:::\n:::\n\n\n- A **time series** is a series of data points or observations recorded at different\n  or regular time intervals, e.g. hourly, daily, monthly, quarterly, yearly, etc.\n- **Time Series Analysis** is the process of analyzing time series data to extract\n  meaningful statistics and other characteristics of the data such as trends,\n  cycles, and seasonal patterns.\n- **Time-Series Forecasting** is the process of using statistical models to predict\n  future values based on past values.\n\n## Applications\n\n\n\n::: {#db88fc5c .cell execution_count=4}\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-4-output-1.png){width=819 height=302 fig-align='center'}\n:::\n:::\n\n\n- **Finance**: Time series analysis is used for stock price prediction, risk management, and economic forecasting.\n- **Economics**: It helps in understanding economic indicators, GDP growth, and inflation rates.\n- **Meteorology**: Time series data is crucial for weather forecasting, climate change studies, and analyzing seasonal patterns.\n- **Healthcare**: Time series analysis is used for analyzing patient data, monitoring disease outbreaks, and predicting patient outcomes.\n- **Marketing**: Time series analysis is used for analyzing sales data, customer behavior, and predicting future trends.\n- **Manufacturing**: Time series analysis is used for analyzing production data, monitoring equipment performance, and predicting maintenance needs.\n\n## Components of a Time Series\n\n- **Trend**: Long-term movement in the data. \"Are car model sales going up or down?\"\n- **Seasonality**: Regular pattern repeating over a known, fixed period. \"Do sales of ice cream increase during the summer?\"\n- **Acyclic**: Long-term oscillations not of a fixed period. \"Are there long term business cycles in the sales of a product?\"\n- **Irregular/Noise**: Random variation. \"Are there random variations in the daily temperature that are not explained by the trend or seasonality?\"\n\n## Distinction between time series and other types of data\n\n- **Time Series Data**: Data points collected or recorded at specific time intervals. Examples include stock prices, weather data, and sales figures.\n- **Cross-Sectional Data**: Data collected at a single point in time, representing a snapshot. Examples include survey results and census data.\n- **Panel Data**: A combination of time series and cross-sectional data, where multiple subjects are observed over time. Examples include longitudinal studies and repeated measures data.\n\n## Analysis and Forecasting\n\nWe'll look at two main aspects of time series analysis:\n\n1. Analyzing historical data to answer questions about past behavior\n2. Forecasting future values based on past values\n\n::: {.content-visible when-profile=\"slides\"}\n## Time and Date Manipulation\n\n**Note**:\n\nIn the course notes version of this chapter, there's a section on time and date\nmanipulation using the `datetime` library and the `pandas` library.\n:::\n\n::: {.content-visible when-profile=\"web\"}\n# Time and Date Manipulation\n\nMany time series data sets are indexed by date or time. The python `datetime`\nlibrary and the `pandas` library provide a powerful set of tools for manipulating\ntime series data.\n\nThe [Time Series](https://wesmckinney.com/book/time-series) chapter of the book\n[Python for Data Analysis, 3rd Ed.](https://wesmckinney.com/book/time-series)\nprovides a good overview of these tools. We'll share a few excerpts here.\n\n::: {#50fda03a .cell execution_count=5}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\n\nnow = datetime.now()\nprint(f\"Date and time when this cell was executed: {now}\")\nprint(f\"Year: {now.year}, month: {now.month}, day: {now.day}\")\n\ndelta = now - datetime(2024, 1, 1)\nprint(f\"Since beginning of 2024 till when this cell was run there were {delta.days} days and {delta.seconds} seconds.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDate and time when this cell was executed: 2024-11-19 20:10:20.985142\nYear: 2024, month: 11, day: 19\nSince beginning of 2024 till when this cell was run there were 323 days and 72620 seconds.\n```\n:::\n:::\n\n\nYou can also convert between strings and datetime.\n\n::: {#d244d914 .cell execution_count=6}\n``` {.python .cell-code}\n# string to datetime\ndate_string = \"2024-01-01\"\ndate_object = datetime.strptime(date_string, \"%Y-%m-%d\")\nprint(date_object)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2024-01-01 00:00:00\n```\n:::\n:::\n\n\nYou can also format datetime objects as strings.\n\n::: {#1e3c5a50 .cell execution_count=7}\n``` {.python .cell-code}\n# datetime to string\nnow_str = now.strftime(\"%Y-%m-%d\")\nprint(now_str)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2024-11-19\n```\n:::\n:::\n\n\nSee Table 11.2 in the [book](https://wesmckinney.com/book/time-series) for a list of formatting codes.\n\nLet's explore some of the pandas time series tools.\n\nCreate a time series with a datetime index.\n\n::: {#8de3094c .cell execution_count=8}\n``` {.python .cell-code}\nlonger_ts = pd.Series(np.random.standard_normal(1000),\n                      index=pd.date_range(\"2022-01-01\", periods=1000))\nprint(type(longer_ts))\nlonger_ts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.series.Series'>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1190}\n```\n2022-01-01    1.891396\n2022-01-02   -0.008936\n2022-01-03   -0.058889\n2022-01-04   -0.305270\n2022-01-05   -0.067658\n                ...   \n2024-09-22   -0.496435\n2024-09-23    0.356804\n2024-09-24   -2.804112\n2024-09-25    0.617215\n2024-09-26    1.523235\nFreq: D, Length: 1000, dtype: float64\n```\n:::\n:::\n\n\nWe can access just the samples from 2023 with simply:\n\n::: {#44944c1c .cell execution_count=9}\n``` {.python .cell-code}\nlonger_ts[\"2023\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=1191}\n```\n2023-01-01   -2.836775\n2023-01-02   -0.151913\n2023-01-03    0.475044\n2023-01-04   -0.886690\n2023-01-05    0.080804\n                ...   \n2023-12-27    1.224889\n2023-12-28   -0.894794\n2023-12-29   -0.590160\n2023-12-30    1.733329\n2023-12-31   -0.686865\nFreq: D, Length: 365, dtype: float64\n```\n:::\n:::\n\n\nOr the month of September 2023:\n\n::: {#bfae8b4b .cell execution_count=10}\n``` {.python .cell-code}\nlonger_ts[\"2023-09\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=1192}\n```\n2023-09-01   -0.556887\n2023-09-02   -0.222140\n2023-09-03   -0.051055\n2023-09-04   -0.969517\n2023-09-05    0.290351\n2023-09-06    0.574295\n2023-09-07    0.739214\n2023-09-08    0.117476\n2023-09-09   -0.292256\n2023-09-10    0.124385\n2023-09-11    0.943934\n2023-09-12   -0.302089\n2023-09-13    0.664178\n2023-09-14   -0.430538\n2023-09-15    1.125534\n2023-09-16    0.289464\n2023-09-17   -0.230637\n2023-09-18   -0.100406\n2023-09-19    0.018341\n2023-09-20   -0.641296\n2023-09-21   -1.612429\n2023-09-22   -0.039791\n2023-09-23   -0.547024\n2023-09-24   -0.619384\n2023-09-25    0.008243\n2023-09-26   -0.225533\n2023-09-27   -0.390483\n2023-09-28    0.395083\n2023-09-29    0.522951\n2023-09-30   -1.350677\nFreq: D, dtype: float64\n```\n:::\n:::\n\n\nOr slice by date range:\n\n::: {#653304db .cell execution_count=11}\n``` {.python .cell-code}\nlonger_ts[\"2023-03-01\":\"2023-03-10\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=1193}\n```\n2023-03-01    1.412254\n2023-03-02   -1.557735\n2023-03-03   -0.746376\n2023-03-04    0.387672\n2023-03-05   -1.860252\n2023-03-06    0.157671\n2023-03-07    1.058790\n2023-03-08   -0.624834\n2023-03-09    0.173496\n2023-03-10    0.429027\nFreq: D, dtype: float64\n```\n:::\n:::\n\n\nor:\n\n::: {#348fa13e .cell execution_count=12}\n``` {.python .cell-code}\nlonger_ts[\"2023-09-15\":]\n```\n\n::: {.cell-output .cell-output-display execution_count=1194}\n```\n2023-09-15    1.125534\n2023-09-16    0.289464\n2023-09-17   -0.230637\n2023-09-18   -0.100406\n2023-09-19    0.018341\n                ...   \n2024-09-22   -0.496435\n2024-09-23    0.356804\n2024-09-24   -2.804112\n2024-09-25    0.617215\n2024-09-26    1.523235\nFreq: D, Length: 378, dtype: float64\n```\n:::\n:::\n\n\nThere are many more time series tools available that let you do things like:\n\n- Shifting and setting frequencies of date ranges\n- Time zone handling\n- Time series resampling\n- Time series rolling and expanding windows\n\n## Moving Window Functions\n\nLet's dive into the moving window functions.\n\n::: {#7d74e50f .cell execution_count=13}\n``` {.python .cell-code}\nimport pandas as pd\nimport yfinance as yf\n\n# Load 10 years of AAPL stock prices into a dataframe\naapl_data = yf.download('AAPL', start='2012-01-01', end='2022-01-01')\nprint(aapl_data.head())\n\naapl_close_px = aapl_data['Close']\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 Open       High        Low      Close  Adj Close     Volume\nDate                                                                        \n2012-01-03  14.621429  14.732143  14.607143  14.686786  12.388996  302220800\n2012-01-04  14.642857  14.810000  14.617143  14.765714  12.455577  260022000\n2012-01-05  14.819643  14.948214  14.738214  14.929643  12.593862  271269600\n2012-01-06  14.991786  15.098214  14.972143  15.085714  12.725513  318292800\n2012-01-09  15.196429  15.276786  15.048214  15.061786  12.705329  394024400\n```\n:::\n:::\n\n\n::: {#d3b77e55 .cell execution_count=14}\n``` {.python .cell-code}\n# Plot the closing prices\nplt = aapl_close_px.plot(label='AAPL')\naapl_close_px.rolling(window=250).mean().plot(label='250d MA')\nplt.legend()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-14-output-1.png){width=798 height=401}\n:::\n:::\n\n\n:::\n\n# Visualization\n\nLike with any data, it is important to visualize time series data to get a sense of\nvarious characteristics.\n\nWe'll show a few examples of time series plots and include the code to generate them.\n\n## Air Passengers Dataset\n\nWe're going to use a dataset of air passengers per month from 1949 to 1960.\n\n::: {#75745f79 .cell execution_count=15}\n``` {.python .cell-code}\npath = './air_passengers_1949_1960.csv'\nair_passengers = pd.read_csv(path, index_col='Date', parse_dates=True)\nair_passengers.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1197}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Number of Passengers</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1949-01-01</th>\n      <td>112</td>\n    </tr>\n    <tr>\n      <th>1949-02-01</th>\n      <td>118</td>\n    </tr>\n    <tr>\n      <th>1949-03-01</th>\n      <td>132</td>\n    </tr>\n    <tr>\n      <th>1949-04-01</th>\n      <td>129</td>\n    </tr>\n    <tr>\n      <th>1949-05-01</th>\n      <td>121</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Time Series Plot\n\nLet's look at the time series plot.\n\n::: {#6829f53a .cell execution_count=16}\n``` {.python .cell-code}\nts = air_passengers['Number of Passengers']\nts.plot(ylabel='Number of Passengers', title='Air Passengers 1949-1960', figsize=(10, 4))\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-16-output-1.png){width=816 height=376 fig-align='center'}\n:::\n:::\n\n\nClearly there are some trends and seasonality in the data.\n\n---\n\nOne way to accentuate that is to use a two-sided plot.\n\n::: {#4c77a74f .cell execution_count=17}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nx = air_passengers.index.values\ny1 = air_passengers['Number of Passengers'].values\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 4))\nplt.fill_between(x, y1=y1, y2=-y1, color='tab:blue', alpha=0.2)\nplt.ylim(-800, 800)\nplt.title('Air Passengers (Two-Sided View)')\nplt.hlines(y=0, xmin=x[0], xmax=x[-1], color='black', linewidth=0.5)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-17-output-1.png){width=809 height=357 fig-align='center'}\n:::\n:::\n\n\n---\n\nSince there is a clear seasonal pattern in the data, we can plot the data by month.\n\n::: {#c37842b4 .cell execution_count=18}\n``` {.python .cell-code}\n# Seasonal plot of air_passengers\nimport seaborn as sns\n\n# Extract month and year from the index\nair_passengers['Month'] = air_passengers.index.month\nair_passengers['Year'] = air_passengers.index.year\n\n# Create a seasonal plot\nplt.figure(figsize=(10, 4))\nsns.lineplot(data=air_passengers, x='Month', y='Number of Passengers', hue='Year', palette='tab10')\nplt.title('Seasonal Plot of Air Passengers')\nplt.ylabel('Number of Passengers')\nplt.xlabel('Month')\nplt.legend(title='Year', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-18-output-1.png){width=942 height=376 fig-align='center'}\n:::\n:::\n\n\n---\n\nThe seasonality looks like it is increasing over time, but relatively speaking that\nmight not be the case. We can normalize the data by the first month of each year.\n\n::: {#ecf652e8 .cell execution_count=19}\n``` {.python .cell-code}\n# Normalize the number of passengers by the first month of each year\nair_passengers['Normalized_Passengers'] = air_passengers.groupby('Year')['Number of Passengers'].transform(lambda x: x / x.iloc[0])\n\n# Create a seasonal plot with normalized values\nplt.figure(figsize=(10, 4))\nsns.lineplot(data=air_passengers, x='Month', y='Normalized_Passengers', hue='Year', palette='tab10')\nplt.title('Seasonal Plot of Air Passengers (Normalized by First Month of Each Year)')\nplt.ylabel('Normalized Number of Passengers')\nplt.xlabel('Month')\nplt.legend(title='Year', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-19-output-1.png){width=938 height=376 fig-align='center'}\n:::\n:::\n\n\nNow the seasonality looks more similar across years, but perhaps it is still\nincreasing a bit over time.\n\n---\n\nWe can also look at the year-wise box plot.\n\n::: {#c449eadd .cell execution_count=20}\n``` {.python .cell-code}\n# Year-wise box plot of air passengers\nplt.figure(figsize=(10, 4))\nsns.boxplot(data=air_passengers, x='Year', y='Number of Passengers', palette='tab10')\nplt.title('Year-wise Box Plot of Air Passengers')\nplt.ylabel('Number of Passengers')\nplt.xlabel('Year')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-20-output-1.png){width=816 height=376 fig-align='center'}\n:::\n:::\n\n\nYou can see the trends, median, and interquartile range of the data by year.\n\n---\n\nWe can also look at the seasonal subseries box plot that indicates the\ndistribution of the data over the years for each month.\n\n::: {#49bfaa0d .cell execution_count=21}\n``` {.python .cell-code}\n# Draw seasonal subseries plots\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Create a subseries plot for each month\nplt.figure(figsize=(10, 4))\nsns.boxplot(data=air_passengers, x='Month', y='Number of Passengers', palette='tab10', hue='Month', legend=False)\nplt.title('Seasonal Subseries Plot of Air Passengers')\nplt.ylabel('Number of Passengers')\nplt.xlabel('Month')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-21-output-1.png){width=816 height=376 fig-align='center'}\n:::\n:::\n\n\n---\n\nWe can also look at the seasonal subseries plot that shows the trend over the years\nfor each month.\n\n::: {#61281eee .cell execution_count=22}\n``` {.python .cell-code}\n# Create seasonal subseries plot of monthly passengers\nfig, axes = plt.subplots(1, 12, figsize=(10, 4), sharey=True)\nfig.suptitle('Seasonal Subseries Plot of Monthly Air Passengers')\n\n# List of abbreviated month names\nmonth_names = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n# Iterate over each month and create a subplot\nfor i, ax in enumerate(axes.flatten(), start=1):\n    monthly_data = air_passengers[air_passengers['Month'] == i]\n    ax.plot(monthly_data['Year'], monthly_data['Number of Passengers'], marker='.')\n    ax.set_title(month_names[i-1])\n    ax.set_xticks([])  # Remove x-axis numbers\n    # ax.set_xlabel('Year')\n    #ax.set_ylabel('Number of Passengers')\n\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-22-output-1.png){width=950 height=370 fig-align='center'}\n:::\n:::\n\n\n---\n\nAn interesting perspective is to plot the autocorrelation to see if there are any\nsignificant lags in the data.\n\n::: {#b08e9ab3 .cell execution_count=23}\n``` {.python .cell-code}\nfrom statsmodels.graphics.tsaplots import plot_acf\n\n# Draw the autocorrelation plot of air passengers\nplot_acf(air_passengers['Number of Passengers'], lags=48)\nplt.title('Autocorrelation Plot of Air Passengers')\nplt.xlabel('Lags')\nplt.ylabel('Autocorrelation')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-23-output-1.png){width=832 height=449 fig-align='center'}\n:::\n:::\n\n\nThe blue shaded area is the 95% confidence interval. The autocorrelation is\nsignificant when it is outside the confidence interval, e.g. the peak at 12. \n\nAlthough we can see peaks at lags 24, 36, and 48, they are not statistically significant.\n\n> We'll talk more about autocorrelation when we discuss stationarity.\n\n# Components of Time Series\n\nLet's now try to decompose the time series into constituent components.\n\nFirst we'll define the components and then look at how we find them.\n\n## Trend\n\n- **Trend**: Represents the long-term progression of the series. It can be increasing, decreasing, or constant over time.\n- **Examples**: \n  - An upward trend in stock prices over several years.\n  - A downward trend in the sales of a product as it becomes obsolete.\n\n## Seasonality\n\n- **Seasonality**: Refers to regular, predictable changes that recur every calendar year. It is a pattern that repeats over a known, fixed period.\n- **Examples**: \n  - Increased retail sales during the holiday season.\n  - Higher ice cream sales during the summer months.\n  - Regular fluctuations in electricity consumption due to seasonal temperature changes.\n\n## Cyclic (Acyclic)\n\n- **Cyclic**: Refers to long-term oscillations or fluctuations in the data that are not of a fixed period. These cycles can vary in length and are often influenced by economic or business conditions.\n- **Examples**: \n  - Business cycles with periods of expansion and contraction.\n  - Agricultural cycles influenced by factors such as weather and market conditions.\n\n## Irregular/Noise: Random variation\n\n- **Irregular/Noise**: Refers to the random variation in the data that cannot be attributed to trend, seasonality, or cyclic patterns. It is the residual variation after accounting for other components.\n- **Examples**: \n  - Sudden spikes or drops in stock prices due to unexpected news.\n  - Random fluctuations in daily temperature readings.\n  - Unpredictable changes in sales figures due to unforeseen events.\n\n# Time Series Decomposition\n\nLet's look at _how_ we can decompose the time series into its components.\n\n## Additive vs. multiplicative models\n\n- **Additive Model**: Assumes that the components of the time series (trend, seasonality, and noise) are added together. The model can be represented as:\n  - $Y(t) = T(t) + S(t) + e(t)$\n  - Where $Y(t)$ is the observed value, $T(t)$ is the trend component, $S(t)$ is the seasonal component, and $e(t)$ is the noise or error term.\n- **Multiplicative Model**: Assumes that the components of the time series are multiplied together. The model can be represented as:\n  - $Y(t) = T(t) \\times S(t) \\times e(t)$\n  - Where $Y(t)$, $T(t)$ and $S(t)$ are the same as above.\n- **Examples**:\n  - Additive: Monthly sales data where the seasonal effect is constant over time.\n  - Multiplicative: Monthly sales data where the seasonal effect increases or decreases proportionally with the trend.\n\n## \"Classical\" Decomposition\n\n- This technique involves breaking down a time series into its **trend**,\n  **seasonal**, and **irregular** (or noise) components. \n- It can be applied using either an additive or multiplicative model.\n- **Steps**:\n  1. Estimate the trend component by applying a moving average.\n  2. Remove the trend component to get the detrended series.\n  3. Estimate the seasonal component from the detrended series.\n  4. Remove the seasonal component to get the irregular component.\n\nLet's take each step by step.\n\n## Estimate the trend component\n\nFirst we'll estimate the trend component by applying a moving average using the\nPandas `rolling` method.\n\n::: {#dc68abf3 .cell execution_count=24}\n``` {.python .cell-code}\nts.plot(figsize=(8, 3), label='Monthly')\nts.rolling(window=11, center=True).mean().plot(label='11m MA')\nplt.ylabel('Number of Passengers')\nplt.title('Air Passengers 1949-1960')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-24-output-1.png){width=667 height=302 fig-align='center'}\n:::\n:::\n\n\nWe're actually using a 11-month moving average because we want to center the\naverage.\n\n## Remove the trend component\n\nNow we can subtract the trend component to get the detrended series.\n\n::: {#fb948f47 .cell execution_count=25}\n``` {.python .cell-code}\ndetrended_ts = ts - ts.rolling(window=11, center=True).mean()\ndetrended_ts.plot(figsize=(8, 3), label='Detrended')\nplt.ylabel('Number of Passengers')\nplt.title('Air Passengers 1949-1960')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-25-output-1.png){width=670 height=302 fig-align='center'}\n:::\n:::\n\n\n## Estimate the seasonal component\n\nEstimate the seasonal component by taking the mean of the detrended\nseries for each month.\n\n::: {#d2ed7a64 .cell execution_count=26}\n``` {.python .cell-code}\nseasonal_ts = detrended_ts.groupby(detrended_ts.index.month).mean()\nseasonal_ts.plot(figsize=(8, 3), label='Seasonal')\nplt.ylabel('Number of Passengers')\nplt.title('Air Passengers 1949-1960')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-26-output-1.png){width=670 height=302 fig-align='center'}\n:::\n:::\n\n\n---\n\nWe can also look at the box plot of the detrended series for each month.\n\n::: {#14e37684 .cell execution_count=27}\n``` {.python .cell-code}\n# Box plot of the detrended series for each month\nimport seaborn as sns\n\n# Create a DataFrame with the detrended series and the corresponding month\ndetrended_df = pd.DataFrame({'Detrended': detrended_ts, 'Month': detrended_ts.index.month})\n\n# Plot the box plot\nplt.figure(figsize=(8, 4))\nsns.boxplot(x='Month', y='Detrended', data=detrended_df, palette='tab10', hue='Month', legend=False)\nplt.xlabel('Month')\nplt.ylabel('Detrended Number of Passengers')\nplt.title('Box Plot of Detrended Air Passengers by Month')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-27-output-1.png){width=670 height=376 fig-align='center'}\n:::\n:::\n\n\nClearly, certain months have more variability than others.\n\n## Remove the seasonal component\n\nNow we can subtract the seasonal component to get the irregular component.\n\n::: {#41bb66c5 .cell execution_count=28}\n``` {.python .cell-code code-fold=\"false\"}\n# Broadcast the seasonal component to the length of the detrended series\n# and subtract it from the detrended series\n\nirregular_ts = detrended_ts - np.tile(seasonal_ts, len(detrended_ts) // len(seasonal_ts))\n```\n:::\n\n\nAnd plot the residual irregular component.\n\n::: {#bca888ca .cell execution_count=29}\n``` {.python .cell-code}\nplt.figure(figsize=(8, 3))\nirregular_ts.plot(label='Irregular', color='red')\nplt.ylabel('Irregular')\nplt.title('Irregular Component')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-29-output-1.png){width=670 height=302 fig-align='center'}\n:::\n:::\n\n\n**Question**: What do you observe about the irregular component? Is it truly\nrandom?\n\n---\n\nFinally, we can put the detrended, seasonal, and irregular plots together.\n\n::: {#5f4acb51 .cell execution_count=30}\n``` {.python .cell-code}\n# Plot detrended, seasonal, and irregular components\nplt.figure(figsize=(8, 6))\n\n# Plot detrended series\nplt.subplot(3, 1, 1)\ndetrended_ts.plot(label='Detrended', color='blue')\nplt.ylabel('Detrended')\nplt.title('Detrended Component')\nplt.legend()\n\n# Plot seasonal series\nplt.subplot(3, 1, 2)\nseasonal_ts.plot(label='Seasonal', color='green')\nplt.ylabel('Seasonal')\nplt.title('Seasonal Component')\nplt.legend()\n\n# Plot irregular series\nplt.subplot(3, 1, 3)\nirregular_ts.plot(label='Irregular', color='red')\nplt.ylabel('Irregular')\nplt.title('Irregular Component')\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-30-output-1.png){width=758 height=566 fig-align='center'}\n:::\n:::\n\n\n## Seasonal and Trend decomposition using Loess (STL)\n\n- **STL** is a more flexible and robust method for decomposing time series data.\n- It uses locally weighted regression (Loess) to estimate the trend and seasonal components [@cleveland1990stl].\n- **Advantages**:\n  - Handles any type of seasonality (e.g., weekly, monthly).\n  - Can deal with missing values and outliers.\n  - Provides smooth and adaptable trend and seasonal components.\n\nSee also [@hyndman2021forecasting].\n\n## Practical example using Python\n\nLet's demonstrate a practical example of time series decomposition using Python.\n\n**Steps**:\n\n1. Load a sample time series dataset.\n2. Apply a decomposition technique (e.g., classical decomposition or STL).\n3. Visualize the decomposed components (trend, seasonal, and residual).\n\n\n## Air Passengers Dataset\n\nLet's load the Air Passengers dataset again.\n\n::: {#068dae8b .cell execution_count=31}\n``` {.python .cell-code code-fold=\"false\"}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\n# Load a sample time series dataset\ndata = pd.read_csv('air_passengers_1949_1960.csv', index_col='Date', parse_dates=True)\nts = data['Number of Passengers']\n```\n:::\n\n\n## `statsmodels` Classical Decomposition -- Additive Model\n\nWe'll apply the classical decomposition using the `statsmodels` \n`seasonal_decompose` function with the additive model.\n\n::: {#cd28eede .cell execution_count=32}\n``` {.python .cell-code}\n# Apply classical decomposition\ndecomposition = seasonal_decompose(ts, model='additive')\n\n# Plot the decomposed components\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, figsize=(8, 8))\ndecomposition.observed.plot(ax=ax1)\nax1.set_ylabel('Observed')\nax1.set_title('Air Passengers 1949-1960')\ndecomposition.trend.plot(ax=ax2)\nax2.set_ylabel('Trend')\ndecomposition.seasonal.plot(ax=ax3)\nax3.set_ylabel('Seasonal')\ndecomposition.resid.plot(ax=ax4)\nax4.set_ylabel('Residual')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-32-output-1.png){width=758 height=758 fig-align='center'}\n:::\n:::\n\n\n## `statsmodels` Classical Decomposition -- Multiplicative Model\n\nLet's try the multiplicative model:\n\n::: {#68a8c0c0 .cell execution_count=33}\n``` {.python .cell-code}\n# Apply classical decomposition\ndecomposition = seasonal_decompose(ts, model='multiplicative')\n\n# Plot the decomposed components\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, figsize=(8, 8))\ndecomposition.observed.plot(ax=ax1)\nax1.set_ylabel('Observed')\ndecomposition.trend.plot(ax=ax2)\nax2.set_ylabel('Trend')\ndecomposition.seasonal.plot(ax=ax3)\nax3.set_ylabel('Seasonal')\ndecomposition.resid.plot(ax=ax4)\nax4.set_ylabel('Residual')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-33-output-1.png){width=758 height=758 fig-align='center'}\n:::\n:::\n\n\n## STL Decomposition\n\nThe STL decomposition is more flexible and can handle the seasonality in the data\nbetter.\n\nLet's try the STL decomposition:\n\n::: {#f06ea8c1 .cell execution_count=34}\n``` {.python .cell-code}\nfrom statsmodels.tsa.seasonal import STL\n\nstl = STL(ts, period=12, robust=True)\nresult = stl.fit()\n# result.plot()\n\n# Plot the decomposed components\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, figsize=(8, 6))\nresult.observed.plot(ax=ax1)\nax1.set_ylabel('Observed')\nax1.set_title('Air Passengers 1949-1960 (STL)')\nresult.trend.plot(ax=ax2)\nax2.set_ylabel('Trend')\nresult.seasonal.plot(ax=ax3)\nax3.set_ylabel('Seasonal')\nresult.resid.plot(ax=ax4)\nax4.set_ylabel('Residual')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-34-output-1.png){width=758 height=566 fig-align='center'}\n:::\n:::\n\n\n# Stationarity and Differencing\n\n## Definition of stationarity\n\nA time series is said to be stationary if its statistical properties such as mean, variance, and autocorrelation are constant over time.\n\n**Types of Stationarity**:\n\n1. **Strict Stationarity**: The entire distribution of the time series remains unchanged over time.\n2. **Weak Stationarity**: Only the first two moments (mean and variance) are constant over time, and the covariance between two time points depends only on the time lag between them.\n\n## Importance of stationarity in time series analysis\n\nStationarity is crucial in time series analysis because many statistical methods and models assume that the time series is stationary. Non-stationary data can lead to misleading results and poor forecasts.\n\n**Why Stationarity Matters**:\n\n1. **Model Assumptions**: Many time series models, such as ARIMA, require the data to be stationary to make accurate predictions.\n2. **Statistical Properties**: Stationary time series have consistent statistical properties over time, making it easier to analyze and interpret.\n3. **Forecasting**: Stationary data improves the reliability and accuracy of forecasts.\n\n## Techniques to achieve stationarity\n\n1. **Differencing**: Subtracting the previous observation from the current observation to remove trends and seasonality.\n2. **Transformation**: Applying mathematical transformations such as logarithms or square roots to stabilize the variance.\n3. **Decomposition**: Separating the time series into trend, seasonal, and residual components to analyze and adjust each part individually.\n4. **Smoothing**: Using techniques like moving averages to smooth out short-term fluctuations and highlight longer-term trends.\n\n## Tests for stationarity\n\n- **ADF Test (Augmented Dickey-Fuller Test)**: A statistical test used to determine if a time series is stationary. It tests the null hypothesis that a unit root is present in the time series.\n- **KPSS Test (Kwiatkowski-Phillips-Schmidt-Shin Test)**: Another test for stationarity that tests the null hypothesis that the time series is stationary around a deterministic trend.\n- **PP Test (Phillips-Perron Test)**: Similar to the ADF test but uses a non-parametric method to account for serial correlation in the error terms.\n\n## Demonstration of stationarity tests using Python\n\n```{.python}\nfrom statsmodels.tsa.stattools import adfuller, kpss, pp_test\n```\n\nTODO: Add code to demonstrate the stationarity tests.\n\n# Time Series Models\n\n## Autoregressive (AR) models\n\nA type of time series model where the current value of the series is based on\nits previous values. \n  \nThe model is defined as:\n\n$$\ny_t = c + \\phi_1 y_{t-1} + \\phi_2 y_{t-2} + \\ldots + \\phi_p y_{t-p} + \\epsilon_t\n$$\n\nwhere:\n\n- $y_t$ is the current value,\n- $c$ is a constant,\n- $\\phi_1, \\phi_2, \\ldots, \\phi_p$ are the coefficients,\n- $\\epsilon_t$ is the white noise error term.\n\n**Key Points**:\n\n1. **Lag Order (p)**: The number of lagged observations included in the model.\n2. **Stationarity**: The series should be stationary for the AR model to be effective.\n3. **Parameter Estimation**: Methods like Yule-Walker equations or Maximum Likelihood Estimation (MLE) are used to estimate the parameters.\n\n## Moving Average (MA) models\n\nA type of time series model where the current value of the series is based on\npast forecast errors. The model is defined as:\n\n$$\ny_t = \\mu + \\epsilon_t + \\theta_1 \\epsilon_{t-1} + \\theta_2 \\epsilon_{t-2} + \\ldots + \\theta_q \\epsilon_{t-q}\n$$\n\nwhere:\n\n- $y_t$ is the current value,\n- $\\mu$ is the mean of the series,\n- $\\epsilon_t$ is the white noise error term,\n- $\\theta_1, \\theta_2, \\ldots, \\theta_q$ are the coefficients.\n\n**Key Points**:\n\n  1. **Lag Order (q)**: The number of lagged forecast errors included in the model.\n  2. **Stationarity**: The series should be stationary for the MA model to be effective.\n  3. **Parameter Estimation**: Methods like Maximum Likelihood Estimation (MLE) are used to estimate the parameters.\n\n## ARIMA (Autoregressive Integrated Moving Average) models\n\nA type of time series model that combines Autoregressive (AR) and Moving Average\n(MA) models with differencing to make the series stationary.\n\nThe model is defined as:\n\n$$\ny_t = c + \\phi_1 y_{t-1} + \\phi_2 y_{t-2} + \\ldots + \\phi_p y_{t-p} + \\epsilon_t + \\theta_1 \\epsilon_{t-1} + \\theta_2 \\epsilon_{t-2} + \\ldots + \\theta_q \\epsilon_{t-q}\n$$\n\nwhere:\n\n- $y_t$ is the current value,\n- $c$ is a constant,\n- $\\phi_1, \\phi_2, \\ldots, \\phi_p$ are the AR coefficients,\n- $\\epsilon_t$ is the white noise error term,\n- $\\theta_1, \\theta_2, \\ldots, \\theta_q$ are the MA coefficients.\n\n**Key Points**:\n\n1. **Order (p, d, q)**: The parameters of the ARIMA model where $p$ is the number of lag observations, $d$ is the degree of differencing, and $q$ is the size of the moving average window.\n2. **Stationarity**: Differencing is used to make the series stationary.\n3. **Parameter Estimation**: Methods like Maximum Likelihood Estimation (MLE) are used to estimate the parameters.\n\n\n## Seasonal ARIMA (SARIMA) models\n\nA type of time series model that extends ARIMA to support seasonality. The model\nis defined as:\n\n$$\ny_t = c + \\phi_1 y_{t-1} + \\phi_2 y_{t-2} + \\ldots + \\phi_p y_{t-p} + \\epsilon_t + \\theta_1 \\epsilon_{t-1} + \\theta_2 \\epsilon_{t-2} + \\ldots + \\theta_q \\epsilon_{t-q} + \\Phi_1 Y_{t-s} + \\Phi_2 Y_{t-2s} + \\ldots + \\Phi_P Y_{t-Ps} + \\Theta_1 E_{t-s} + \\Theta_2 E_{t-2s} + \\ldots + \\Theta_Q E_{t-Qs}\n$$\n\nwhere:\n\n- $y_t$ is the current value,\n- $c$ is a constant,\n- $\\phi_1, \\phi_2, \\ldots, \\phi_p$ are the AR coefficients,\n- $\\epsilon_t$ is the white noise error term,\n- $\\theta_1, \\theta_2, \\ldots, \\theta_q$ are the MA coefficients,\n- $\\Phi_1, \\Phi_2, \\ldots, \\Phi_P$ are the seasonal AR coefficients,\n- $Y_{t-s}, Y_{t-2s}, \\ldots, Y_{t-Ps}$ are the seasonal lagged observations,\n- $\\Theta_1, \\Theta_2, \\ldots, \\Theta_Q$ are the seasonal MA coefficients,\n- $E_{t-s}, E_{t-2s}, \\ldots, E_{t-Qs}$ are the seasonal lagged forecast errors.\n\n**Key Points**:\n\n1. **Order (p, d, q) x (P, D, Q, s)**: The parameters of the SARIMA model where $p, d, q$ are the non-seasonal parameters, $P, D, Q$ are the seasonal parameters, and $s$ is the length of the seasonal cycle.\n2. **Stationarity**: Differencing is used to make the series stationary.\n3. **Parameter Estimation**: Methods like Maximum Likelihood Estimation (MLE) are used to estimate the parameters.\n\n\n## ARIMA/SARIMA Example\n\nLet's look at a concrete example of ARIMA/SARIMA using the Air Passengers dataset.\n\n::: {#bdd8e12c .cell execution_count=35}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nimport matplotlib.pyplot as plt\n```\n:::\n\n\nWe'll load the dataset and show the head.\n\n::: {#42c2cba9 .cell execution_count=36}\n``` {.python .cell-code}\npath = 'air_passengers_1949_1960.csv'\ndata = pd.read_csv(path)\ndata.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1218}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Number of Passengers</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1949-01</td>\n      <td>112</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1949-02</td>\n      <td>118</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1949-03</td>\n      <td>132</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1949-04</td>\n      <td>129</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1949-05</td>\n      <td>121</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n---\n\nNext, use pandas `date_range` method to create a new month column. We could have\nused date string conversion tools on the `Date` column alternatively.\n\n::: {#caa71782 .cell execution_count=37}\n``` {.python .cell-code}\ndata['Month'] = pd.date_range(start='1949-01', periods=len(data), freq='ME')\ndata.set_index('Month', inplace=True)\n\ndata.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1219}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Number of Passengers</th>\n    </tr>\n    <tr>\n      <th>Month</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1949-01-31</th>\n      <td>1949-01</td>\n      <td>112</td>\n    </tr>\n    <tr>\n      <th>1949-02-28</th>\n      <td>1949-02</td>\n      <td>118</td>\n    </tr>\n    <tr>\n      <th>1949-03-31</th>\n      <td>1949-03</td>\n      <td>132</td>\n    </tr>\n    <tr>\n      <th>1949-04-30</th>\n      <td>1949-04</td>\n      <td>129</td>\n    </tr>\n    <tr>\n      <th>1949-05-31</th>\n      <td>1949-05</td>\n      <td>121</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n---\n\nAs a next step, we'll log transform the data to stabilize the variance.\n\n::: {#efd5ebc1 .cell execution_count=38}\n``` {.python .cell-code}\n# Log transform to stabilize variance\ndata['Log_Passengers'] = np.log(data['Number of Passengers'])\ndata.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=1220}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Number of Passengers</th>\n      <th>Log_Passengers</th>\n    </tr>\n    <tr>\n      <th>Month</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1949-01-31</th>\n      <td>1949-01</td>\n      <td>112</td>\n      <td>4.718499</td>\n    </tr>\n    <tr>\n      <th>1949-02-28</th>\n      <td>1949-02</td>\n      <td>118</td>\n      <td>4.770685</td>\n    </tr>\n    <tr>\n      <th>1949-03-31</th>\n      <td>1949-03</td>\n      <td>132</td>\n      <td>4.882802</td>\n    </tr>\n    <tr>\n      <th>1949-04-30</th>\n      <td>1949-04</td>\n      <td>129</td>\n      <td>4.859812</td>\n    </tr>\n    <tr>\n      <th>1949-05-31</th>\n      <td>1949-05</td>\n      <td>121</td>\n      <td>4.795791</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n---\n\nAnd finally, we'll perform a **classical additive seasonal decomposition** of the data as a point\nof comparison.\n\n::: {#571e05f1 .cell execution_count=39}\n``` {.python .cell-code}\n# Seasonal decomposition\ndecomposition = seasonal_decompose(data['Log_Passengers'], model='additive')\ndecomposition.plot()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-39-output-1.png){width=950 height=470}\n:::\n:::\n\n\n## SARIMAX Model\n\nNow let's create an instance of a **SARIMAX** model -- <b>S</b>easonal \n<b>A</b>utoregressive <b>I</b>ntegrated <b>M</b>oving <b>A</b>verage with \ne<b>X</b>ogenous regressors.\n\nIt extends the SARIMA model to support exogenous variables.\n\n::: {#bd850e82 .cell execution_count=40}\n``` {.python .cell-code code-fold=\"false\"}\n# SARIMA model\nmodel = SARIMAX(data['Log_Passengers'], \n                order=(1, 1, 1), \n                seasonal_order=(1, 1, 1, 12), \n                freq='ME')\n```\n:::\n\n\nThe configuration is as follows:\n\n- We'll use the `Log_Passengers` as the time series, which has better variance properties.\n- `order=(1, 1, 1)` means we're using an ARIMA model with 1 autoregressive term, 1 differencing term, and 1 moving average term.\n- `seasonal_order=(1, 1, 1, 12)` means we're using a seasonal ARIMA model with 1 autoregressive term, 1 differencing term, 1 moving average term, and a seasonal cycle of 12 months.\n- The frequence is the month-end, or `ME`.\n\n---\n\nWe'll fit the model which also prints the fit summary.\n\n::: {#7bc20442 .cell execution_count=41}\n``` {.python .cell-code}\nresults = model.fit()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRUNNING THE L-BFGS-B CODE\n\n           * * *\n\nMachine precision = 2.220D-16\n N =            5     M =           10\n\nAt X0         0 variables are exactly at the bounds\n\nAt iterate    0    f= -1.66507D+00    |proj g|=  5.05756D+00\n\nAt iterate    5    f= -1.68182D+00    |proj g|=  8.72738D-01\n\nAt iterate   10    f= -1.69016D+00    |proj g|=  7.99143D-02\n\nAt iterate   15    f= -1.69026D+00    |proj g|=  2.95076D-01\n\nAt iterate   20    f= -1.69545D+00    |proj g|=  1.54990D+00\n\nAt iterate   25    f= -1.69767D+00    |proj g|=  5.43471D-02\n\nAt iterate   30    f= -1.69818D+00    |proj g|=  6.44974D-02\n\nAt iterate   35    f= -1.70189D+00    |proj g|=  2.19161D-01\n\nAt iterate   40    f= -1.70244D+00    |proj g|=  7.77238D-03\n\n           * * *\n\nTit   = total number of iterations\nTnf   = total number of function evaluations\nTnint = total number of segments explored during Cauchy searches\nSkip  = number of BFGS updates skipped\nNact  = number of active bounds at final generalized Cauchy point\nProjg = norm of the final projected gradient\nF     = final function value\n\n           * * *\n\n   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F\n    5     41     55      1     0     0   7.116D-03  -1.702D+00\n  F =  -1.7024430820229224     \n\nCONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH             \n```\n:::\n:::\n\n\n---\n\nWe'll print the summary and plot the diagnostics.\n\n::: {#ec13ba96 .cell execution_count=42}\n``` {.python .cell-code}\n# Summary and diagnostics\nprint(results.summary())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                     SARIMAX Results                                      \n==========================================================================================\nDep. Variable:                     Log_Passengers   No. Observations:                  144\nModel:             SARIMAX(1, 1, 1)x(1, 1, 1, 12)   Log Likelihood                 245.152\nDate:                            Tue, 19 Nov 2024   AIC                           -480.304\nTime:                                    20:10:24   BIC                           -465.928\nSample:                                01-31-1949   HQIC                          -474.462\n                                     - 12-31-1960                                         \nCovariance Type:                              opg                                         \n==============================================================================\n                 coef    std err          z      P>|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nar.L1          0.1647      0.213      0.775      0.439      -0.252       0.582\nma.L1         -0.5602      0.184     -3.037      0.002      -0.922      -0.199\nar.S.L12      -0.0998      0.197     -0.507      0.612      -0.486       0.286\nma.S.L12      -0.4966      0.210     -2.364      0.018      -0.908      -0.085\nsigma2         0.0013      0.000      8.471      0.000       0.001       0.002\n===================================================================================\nLjung-Box (L1) (Q):                   0.01   Jarque-Bera (JB):                 3.44\nProb(Q):                              0.92   Prob(JB):                         0.18\nHeteroskedasticity (H):               0.61   Skew:                            -0.01\nProb(H) (two-sided):                  0.11   Kurtosis:                         3.79\n===================================================================================\n\nWarnings:\n[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n```\n:::\n:::\n\n\n---\n\nAnd let's plot some diagnostic information.\n\n::: {#f07d81eb .cell execution_count=43}\n``` {.python .cell-code}\nresults.plot_diagnostics(figsize=(12, 8))\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-43-output-1.png){width=959 height=671}\n:::\n:::\n\n\n## Explanation of SARIMAX Diagnostics\n\nThe `plot_diagnostics` function provides several diagnostic plots to evaluate the fit of the SARIMAX model. Here is an explanation of each panel:\n\n1. **Standardized Residuals**:\n   - This plot shows the residuals (differences between the observed and predicted values) standardized to have zero mean and unit variance.\n   - Ideally, the residuals should appear as white noise, meaning they should be randomly scattered around zero with no discernible pattern.\n\n2. **Histogram plus KDE**:\n   - This panel displays a histogram of the residuals along with a Kernel Density Estimate (KDE) to visualize the distribution.\n   - The histogram should resemble a normal distribution if the model is well-fitted. The KDE line helps to see the shape of the distribution more clearly.\n\n3. **Normal Q-Q Plot**:\n   - The Q-Q plot compares the quantiles of the residuals to the quantiles of a standard normal distribution.\n   - If the residuals are normally distributed, the points should lie approximately along the 45-degree line.\n\n4. **Correlogram (ACF Plot)**:\n   - This plot shows the autocorrelation function (ACF) of the residuals.\n   - The ACF plot helps to identify any remaining autocorrelation in the residuals. Ideally, the residuals should have no significant autocorrelation, indicating that the model has captured all the temporal dependencies.\n\n---\n\nFinally, let's make a forecast for 2 years out.\n\n::: {#1898e934 .cell execution_count=44}\n``` {.python .cell-code}\n# Forecasting\nforecast = results.get_forecast(steps=24)\nforecast_index = pd.date_range(data.index[-1] + pd.DateOffset(months=1), periods=24, freq='ME')\nforecast_values = np.exp(forecast.predicted_mean)  # Convert back from log\nconfidence_intervals = np.exp(forecast.conf_int())\n\n# Plot\nplt.figure(figsize=(10, 6))\nplt.plot(data['Number of Passengers'], label='Observed')\nplt.plot(forecast_index, forecast_values, label='Forecast', color='red')\nplt.fill_between(forecast_index, confidence_intervals.iloc[:, 0], confidence_intervals.iloc[:, 1], color='pink', alpha=0.3)\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](26-TimeSeries_files/figure-revealjs/cell-44-output-1.png){width=798 height=485}\n:::\n:::\n\n\nThe light pink area shows the 95% confidence interval for the forecast.\n\n**Questions**: what observations do you have about the prediction?\n\n\n# Model Evaluation and Forecasting\n\n## Criteria for model selection\n\n- **AIC (Akaike Information Criterion)**: A measure of the relative quality of a\n  statistical model for a given set of data. It is defined as:\n\n$$\n\\text{AIC} = 2k - 2\\ln(L)\n$$\n\nwhere:\n\n- $k$ is the number of parameters in the model,\n- $L$ is the maximum value of the likelihood function for the model.\n\n**BIC (Bayesian Information Criterion)**: Similar to AIC but includes a penalty term for the number of parameters in the model. It is defined as:\n\n$$\n\\text{BIC} = k\\ln(n) - 2\\ln(L)\n$$\n\nwhere:\n\n- $k$ is the number of parameters in the model,\n- $n$ is the number of data points,\n- $L$ is the maximum value of the likelihood function for the model.\n\n**Key Points**:\n\n1. **Model Comparison**: Both AIC and BIC are used to compare different models; the model with the lower AIC or BIC is preferred.\n2. **Penalty for Complexity**: BIC imposes a larger penalty for models with more parameters compared to AIC.\n3. **Trade-off**: There is a trade-off between goodness of fit and model complexity.\n\n## Cross-validation techniques for time series\n\n- **Time Series Cross-Validation**: Unlike traditional cross-validation, time series cross-validation respects the temporal order of the data. \n\nCommon techniques include:\n\n- **Rolling Forecast Origin**: The training set is expanded with each iteration, and the model is re-evaluated.\n- **Time Series Split**: The data is split into multiple training and test sets, ensuring that the training set always precedes the test set.\n- **Blocked Cross-Validation**: The data is divided into blocks, and each block is used as a test set while the preceding blocks are used for training.\n\n## Key Points:\n1. **Respect Temporal Order**: Ensure that the training set always precedes the test set to avoid data leakage.\n2. **Multiple Techniques**: Various techniques like rolling forecast origin, time series split, and blocked cross-validation can be used.\n\n## Forecasting and confidence intervals\n\n- **Forecasting**: The process of making predictions about future values based on historical data. Common methods include:\n  - **ARIMA (AutoRegressive Integrated Moving Average)**: A popular time series forecasting method that combines autoregression, differencing, and moving average components.\n  - **Exponential Smoothing**: A technique that applies decreasing weights to past observations, giving more importance to recent data.\n  - **Prophet**: A forecasting tool developed by Facebook that handles seasonality, holidays, and missing data.\n- **Confidence Intervals**: A range of values that is likely to contain the true value of the forecast. It provides an estimate of the uncertainty associated with the forecast.\n  - **Calculation**: Confidence intervals are typically calculated using the standard error of the forecast and a critical value from the t-distribution or normal distribution.\n  - **Interpretation**: A 95% confidence interval means that there is a 95% chance that the true value will fall within the interval.\n  \n**Key Points:**\n\n1. **Forecasting Methods**: Various methods like ARIMA, exponential smoothing, and Prophet can be used for forecasting.\n2. **Uncertainty Estimation**: Confidence intervals provide an estimate of the uncertainty associated with the forecast.\n\n\n# Recap and References\n\n\n## Recap\n\nWe covered the following key points:\n\n1. **Components of Time Series**:\n2. **Time Series Decomposition**:\n3. **Stationarity and Differencing**:\n4. **Model Selection and Evaluation**:\n5. **Forecasting and Confidence Intervals**:\n6. **Practical Examples**:\n\n\n## References\n\n- [Wikipedia: Time Series Analysis](https://en.wikipedia.org/wiki/Time_series)\n- [Time Series Analysis](https://otexts.com/fpp3/)\n\n- [Complete Guide on Time Series Analysis in Python](https://www.kaggle.com/code/prashant111/complete-guide-on-time-series-analysis-in-python/notebook)\n- [Time Series Data Visualization in Python](https://www.geeksforgeeks.org/time-series-data-visualization-in-python/)\n\n## Bibliography\n\n::: {#refs}\n:::\n\n",
    "supporting": [
      "26-TimeSeries_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}