{
  "hash": "56b63ce23a86c851ea7c19e20969d553",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Time Series Analysis'\njupyter: python3\n---\n\n\n## Introduction\n\n[![](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/tools4ds/DS701-Course-Notes/blob/main/ds701_book/jupyter_notebooks/26-TimeSeries.ipynb)\n\n## Lecture Outline\n\n### Lecture Outline: Time Series Analysis\n\n#### **1. Introduction to Time Series (10 minutes)**\n   - Definition and examples of time series data\n   - Importance and applications in various fields (e.g., finance, economics, meteorology)\n   - Distinction between time series and other types of data\n\n#### **2. Components of Time Series (10 minutes)**\n   - Trend: Long-term movement in the data\n   - Seasonality: Regular pattern repeating over a known, fixed period\n   - Cyclic: Long-term oscillations not of a fixed period\n   - Irregular/Noise: Random variation\n\n#### **3. Time Series Decomposition (10 minutes)**\n   - Additive vs. multiplicative models\n   - Decomposition techniques (e.g., classical decomposition, STL)\n   - Practical example using Python (brief code demonstration)\n\n#### **4. Stationarity and Differencing (10 minutes)**\n   - Definition of stationarity\n   - Importance of stationarity in time series analysis\n   - Techniques to achieve stationarity (e.g., differencing, transformation)\n   - Demonstration of stationarity tests (e.g., ADF test)\n\n#### **5. Time Series Models (15 minutes)**\n   - Autoregressive (AR) models\n   - Moving Average (MA) models\n   - ARIMA (Autoregressive Integrated Moving Average) models\n   - Seasonal ARIMA (SARIMA) models\n   - Brief introduction to advanced models (e.g., GARCH, VAR)\n\n#### **6. Model Evaluation and Forecasting (10 minutes)**\n   - Criteria for model selection (e.g., AIC, BIC)\n   - Cross-validation techniques for time series\n   - Forecasting and confidence intervals\n   - Practical example of forecasting using Python\n\n#### **7. Case Study and Discussion (10 minutes)**\n   - Real-world case study: Application of time series analysis\n   - Group discussion on potential projects or applications\n   - Q&A session\n\n#### **8. Conclusion and Further Reading (5 minutes)**\n   - Summary of key points\n   - Recommended resources for further study (books, online courses, research papers)\n   - Introduction to software tools for time series analysis (e.g., Python libraries, R packages)\n\n# **1. Introduction to Time Series (10 minutes)**\n\n## Definition and examples of time series data\n\n- **Definition**: A time series is a sequence of data points typically measured at successive points in time, spaced at uniform time intervals.\n- **Examples**: Stock prices, daily temperature readings, monthly sales data, etc.\n\n## Importance and applications in various fields (e.g., finance, economics, meteorology)\n\n- **Finance**: Time series analysis is used for stock price prediction, risk management, and economic forecasting.\n- **Economics**: It helps in understanding economic indicators, GDP growth, and inflation rates.\n- **Meteorology**: Time series data is crucial for weather forecasting, climate change studies, and analyzing seasonal patterns.\n\n## Distinction between time series and other types of data\n\n- **Time Series Data**: Data points collected or recorded at specific time intervals. Examples include stock prices, weather data, and sales figures.\n- **Cross-Sectional Data**: Data collected at a single point in time, representing a snapshot. Examples include survey results and census data.\n- **Panel Data**: A combination of time series and cross-sectional data, where multiple subjects are observed over time. Examples include longitudinal studies and repeated measures data.\n\n# **2. Components of Time Series (10 minutes)**\n\n## Trend: Long-term movement in the data\n\n- **Trend**: Represents the long-term progression of the series. It can be increasing, decreasing, or constant over time.\n- **Examples**: \n  - An upward trend in stock prices over several years.\n  - A downward trend in the sales of a product as it becomes obsolete.\n\n## Seasonality: Regular pattern repeating over a known, fixed period\n\n- **Seasonality**: Refers to regular, predictable changes that recur every calendar year. It is a pattern that repeats over a known, fixed period.\n- **Examples**: \n  - Increased retail sales during the holiday season.\n  - Higher ice cream sales during the summer months.\n  - Regular fluctuations in electricity consumption due to seasonal temperature changes.\n\n## Cyclic: Long-term oscillations not of a fixed period\n\n- **Cyclic**: Refers to long-term oscillations or fluctuations in the data that are not of a fixed period. These cycles can vary in length and are often influenced by economic or business conditions.\n- **Examples**: \n  - Business cycles with periods of expansion and contraction.\n  - Agricultural cycles influenced by factors such as weather and market conditions.\n\n## Irregular/Noise: Random variation\n\n- **Irregular/Noise**: Refers to the random variation in the data that cannot be attributed to trend, seasonality, or cyclic patterns. It is the residual variation after accounting for other components.\n- **Examples**: \n  - Sudden spikes or drops in stock prices due to unexpected news.\n  - Random fluctuations in daily temperature readings.\n  - Unpredictable changes in sales figures due to unforeseen events.\n\n# **3. Time Series Decomposition (10 minutes)**\n\n## Additive vs. multiplicative models\n\n- **Additive Model**: Assumes that the components of the time series (trend, seasonality, and noise) are added together. The model can be represented as:\n  - $Y(t) = T(t) + S(t) + e(t)$\n  - Where $Y(t)$ is the observed value, $T(t)$ is the trend component, $S(t)$ is the seasonal component, and $e(t)$ is the noise or error term.\n- **Multiplicative Model**: Assumes that the components of the time series are multiplied together. The model can be represented as:\n  - $Y(t) = T(t) \\times S(t) \\times e(t)$\n  - Where $Y(t)$ is the observed value, $T(t)$ is the trend component, $S(t)$ is the seasonal component, and $e(t)$ is the noise or error term.\n- **Examples**:\n  - Additive: Monthly sales data where the seasonal effect is constant over time.\n  - Multiplicative: Monthly sales data where the seasonal effect increases or decreases proportionally with the trend.\n\n## Decomposition techniques (e.g., classical decomposition, STL)\n\n- **Classical Decomposition**: This technique involves breaking down a time series into its trend, seasonal, and irregular components. It can be applied using either an additive or multiplicative model.\n  - **Steps**:\n    1. Estimate the trend component by applying a moving average.\n    2. Remove the trend component to get the detrended series.\n    3. Estimate the seasonal component from the detrended series.\n    4. Remove the seasonal component to get the irregular component.\n- **STL (Seasonal and Trend decomposition using Loess)**: This is a more flexible and robust method for decomposing time series data. It uses locally weighted regression (Loess) to estimate the trend and seasonal components.\n  - **Advantages**:\n    - Handles any type of seasonality (e.g., weekly, monthly).\n    - Can deal with missing values and outliers.\n    - Provides smooth and adaptable trend and seasonal components.\n\n## Practical example using Python (brief code demonstration)\n\n- **Practical Example**: Let's demonstrate a practical example of time series decomposition using Python.\n- **Steps**:\n  1. Import necessary libraries.\n  2. Load a sample time series dataset.\n  3. Apply a decomposition technique (e.g., classical decomposition or STL).\n  4. Visualize the decomposed components (trend, seasonal, and residual).\n\n- **Code**:\n\n```{.python}\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\n# Load a sample time series dataset\ndata = pd.read_csv('sample_time_series.csv', index_col='Date', parse_dates=True)\nts = data['value']\n\n# Apply classical decomposition\ndecomposition = seasonal_decompose(ts, model='additive')\n\n# Plot the decomposed components\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, figsize=(12, 8))\ndecomposition.observed.plot(ax=ax1)\nax1.set_ylabel('Observed')\ndecomposition.trend.plot(ax=ax2)\nax2.set_ylabel('Trend')\ndecomposition.seasonal.plot(ax=ax3)\nax3.set_ylabel('Seasonal')\ndecomposition.resid.plot(ax=ax4)\nax4.set_ylabel('Residual')\nplt.tight_layout()\nplt.show()\n```\n\n# **4. Stationarity and Differencing (10 minutes)**\n\n## Definition of stationarity\n\n- **Definition of Stationarity**: A time series is said to be stationary if its statistical properties such as mean, variance, and autocorrelation are constant over time.\n- **Types of Stationarity**:\n  1. **Strict Stationarity**: The entire distribution of the time series remains unchanged over time.\n  2. **Weak Stationarity**: Only the first two moments (mean and variance) are constant over time, and the covariance between two time points depends only on the time lag between them.\n\n## Importance of stationarity in time series analysis\n\n- **Importance of Stationarity**: Stationarity is crucial in time series analysis because many statistical methods and models assume that the time series is stationary. Non-stationary data can lead to misleading results and poor forecasts.\n- **Why Stationarity Matters**:\n  1. **Model Assumptions**: Many time series models, such as ARIMA, require the data to be stationary to make accurate predictions.\n  2. **Statistical Properties**: Stationary time series have consistent statistical properties over time, making it easier to analyze and interpret.\n  3. **Forecasting**: Stationary data improves the reliability and accuracy of forecasts.\n\n## Techniques to achieve stationarity (e.g., differencing, transformation)\n\n- **Techniques to Achieve Stationarity**:\n  1. **Differencing**: Subtracting the previous observation from the current observation to remove trends and seasonality.\n  2. **Transformation**: Applying mathematical transformations such as logarithms or square roots to stabilize the variance.\n  3. **Decomposition**: Separating the time series into trend, seasonal, and residual components to analyze and adjust each part individually.\n  4. **Smoothing**: Using techniques like moving averages to smooth out short-term fluctuations and highlight longer-term trends.\n\n## Demonstration of stationarity tests (e.g., ADF test)\n\n- **ADF Test (Augmented Dickey-Fuller Test)**: A statistical test used to determine if a time series is stationary. It tests the null hypothesis that a unit root is present in the time series.\n- **KPSS Test (Kwiatkowski-Phillips-Schmidt-Shin Test)**: Another test for stationarity that tests the null hypothesis that the time series is stationary around a deterministic trend.\n- **PP Test (Phillips-Perron Test)**: Similar to the ADF test but uses a non-parametric method to account for serial correlation in the error terms.\n\n# **5. Time Series Models (15 minutes)**\n\n## Autoregressive (AR) models\n\n- **Autoregressive (AR) Models**: A type of time series model where the current value of the series is based on its previous values. The model is defined as:\n  $$\n  y_t = c + \\phi_1 y_{t-1} + \\phi_2 y_{t-2} + \\ldots + \\phi_p y_{t-p} + \\epsilon_t\n  $$\n\nwhere:\n\n  - $y_t$ is the current value,\n  - $c$ is a constant,\n  - $\\phi_1, \\phi_2, \\ldots, \\phi_p$ are the coefficients,\n  - $\\epsilon_t$ is the white noise error term.\n\n**Key Points**:\n\n  1. **Lag Order (p)**: The number of lagged observations included in the model.\n  2. **Stationarity**: The series should be stationary for the AR model to be effective.\n  3. **Parameter Estimation**: Methods like Yule-Walker equations or Maximum Likelihood Estimation (MLE) are used to estimate the parameters.\n\n## Moving Average (MA) models\n\n- **Moving Average (MA) Models**: A type of time series model where the current value of the series is based on past forecast errors. The model is defined as:\n\n$$\ny_t = \\mu + \\epsilon_t + \\theta_1 \\epsilon_{t-1} + \\theta_2 \\epsilon_{t-2} + \\ldots + \\theta_q \\epsilon_{t-q}\n$$\n\nwhere:\n\n  - $y_t$ is the current value,\n  - $\\mu$ is the mean of the series,\n  - $\\epsilon_t$ is the white noise error term,\n  - $\\theta_1, \\theta_2, \\ldots, \\theta_q$ are the coefficients.\n\n**Key Points**:\n\n  1. **Lag Order (q)**: The number of lagged forecast errors included in the model.\n  2. **Stationarity**: The series should be stationary for the MA model to be effective.\n  3. **Parameter Estimation**: Methods like Maximum Likelihood Estimation (MLE) are used to estimate the parameters.\n\n## ARIMA (Autoregressive Integrated Moving Average) models\n\n- **ARIMA Models**: A type of time series model that combines Autoregressive (AR) and Moving Average (MA) models with differencing to make the series stationary. The model is defined as:\n\n$$\ny_t = c + \\phi_1 y_{t-1} + \\phi_2 y_{t-2} + \\ldots + \\phi_p y_{t-p} + \\epsilon_t + \\theta_1 \\epsilon_{t-1} + \\theta_2 \\epsilon_{t-2} + \\ldots + \\theta_q \\epsilon_{t-q}\n$$\n\nwhere:\n\n  - $y_t$ is the current value,\n  - $c$ is a constant,\n  - $\\phi_1, \\phi_2, \\ldots, \\phi_p$ are the AR coefficients,\n  - $\\epsilon_t$ is the white noise error term,\n  - $\\theta_1, \\theta_2, \\ldots, \\theta_q$ are the MA coefficients.\n\n**Key Points**:\n\n  1. **Order (p, d, q)**: The parameters of the ARIMA model where $p$ is the number of lag observations, $d$ is the degree of differencing, and $q$ is the size of the moving average window.\n  2. **Stationarity**: Differencing is used to make the series stationary.\n  3. **Parameter Estimation**: Methods like Maximum Likelihood Estimation (MLE) are used to estimate the parameters.\n\n\n## Seasonal ARIMA (SARIMA) models\n\n- **Seasonal ARIMA (SARIMA) Models**: A type of time series model that extends ARIMA to support seasonality. The model is defined as:\n\n$$\ny_t = c + \\phi_1 y_{t-1} + \\phi_2 y_{t-2} + \\ldots + \\phi_p y_{t-p} + \\epsilon_t + \\theta_1 \\epsilon_{t-1} + \\theta_2 \\epsilon_{t-2} + \\ldots + \\theta_q \\epsilon_{t-q} + \\Phi_1 Y_{t-s} + \\Phi_2 Y_{t-2s} + \\ldots + \\Phi_P Y_{t-Ps} + \\Theta_1 E_{t-s} + \\Theta_2 E_{t-2s} + \\ldots + \\Theta_Q E_{t-Qs}\n$$\n\nwhere:\n\n  - $y_t$ is the current value,\n  - $c$ is a constant,\n  - $\\phi_1, \\phi_2, \\ldots, \\phi_p$ are the AR coefficients,\n  - $\\epsilon_t$ is the white noise error term,\n  - $\\theta_1, \\theta_2, \\ldots, \\theta_q$ are the MA coefficients,\n  - $\\Phi_1, \\Phi_2, \\ldots, \\Phi_P$ are the seasonal AR coefficients,\n  - $Y_{t-s}, Y_{t-2s}, \\ldots, Y_{t-Ps}$ are the seasonal lagged observations,\n  - $\\Theta_1, \\Theta_2, \\ldots, \\Theta_Q$ are the seasonal MA coefficients,\n  - $E_{t-s}, E_{t-2s}, \\ldots, E_{t-Qs}$ are the seasonal lagged forecast errors.\n\n**Key Points**:\n\n  1. **Order (p, d, q) x (P, D, Q, s)**: The parameters of the SARIMA model where $p, d, q$ are the non-seasonal parameters, $P, D, Q$ are the seasonal parameters, and $s$ is the length of the seasonal cycle.\n  2. **Stationarity**: Differencing is used to make the series stationary.\n  3. **Parameter Estimation**: Methods like Maximum Likelihood Estimation (MLE) are used to estimate the parameters.\n\n## Brief introduction to advanced models (e.g., GARCH, VAR)\n\n**GARCH (Generalized Autoregressive Conditional Heteroskedasticity) Models**: Used to model time series data with changing volatility over time. The model is defined as:\n\n$$\n\\sigma_t^2 = \\alpha_0 + \\alpha_1 \\epsilon_{t-1}^2 + \\beta_1 \\sigma_{t-1}^2\n$$\n\nwhere:\n\n  - $\\sigma_t^2$ is the conditional variance,\n  - $\\alpha_0, \\alpha_1, \\beta_1$ are coefficients,\n  - $\\epsilon_{t-1}$ is the lagged error term.\n\n- **VAR (Vector Autoregression) Models**: Used for multivariate time series data. The model is defined as:\n\n$$\ny_t = c + A_1 y_{t-1} + A_2 y_{t-2} + \\ldots + A_p y_{t-p} + \\epsilon_t\n$$\n\n  where:\n\n  - $y_t$ is a vector of time series variables,\n  - $c$ is a vector of constants,\n  - $A_1, A_2, \\ldots, A_p$ are coefficient matrices,\n  - $\\epsilon_t$ is a vector of white noise error terms.\n\n**Key Points**:\n\n1. **GARCH Models**: Useful for modeling time series data with time-varying volatility.\n2. **VAR Models**: Useful for capturing the linear interdependencies among multiple time series.\n\n# **6. Model Evaluation and Forecasting (10 minutes)**\n\n## Criteria for model selection (e.g., AIC, BIC)\n\n- **AIC (Akaike Information Criterion)**: A measure of the relative quality of a statistical model for a given set of data. It is defined as:\n\n$$\n\\text{AIC} = 2k - 2\\ln(L)\n$$\n\n  where:\n\n  - $k$ is the number of parameters in the model,\n  - $L$ is the maximum value of the likelihood function for the model.\n\n**BIC (Bayesian Information Criterion)**: Similar to AIC but includes a penalty term for the number of parameters in the model. It is defined as:\n\n$$\n\\text{BIC} = k\\ln(n) - 2\\ln(L)\n$$\n\n  where:\n\n  - $k$ is the number of parameters in the model,\n  - $n$ is the number of data points,\n  - $L$ is the maximum value of the likelihood function for the model.\n\n**Key Points**:\n\n  1. **Model Comparison**: Both AIC and BIC are used to compare different models; the model with the lower AIC or BIC is preferred.\n  2. **Penalty for Complexity**: BIC imposes a larger penalty for models with more parameters compared to AIC.\n  3. **Trade-off**: There is a trade-off between goodness of fit and model complexity.\n\n## Cross-validation techniques for time series\n\n- **Time Series Cross-Validation**: Unlike traditional cross-validation, time series cross-validation respects the temporal order of the data. Common techniques include:\n  - **Rolling Forecast Origin**: The training set is expanded with each iteration, and the model is re-evaluated.\n  - **Time Series Split**: The data is split into multiple training and test sets, ensuring that the training set always precedes the test set.\n  - **Blocked Cross-Validation**: The data is divided into blocks, and each block is used as a test set while the preceding blocks are used for training.\n\n## Key Points:\n1. **Respect Temporal Order**: Ensure that the training set always precedes the test set to avoid data leakage.\n2. **Multiple Techniques**: Various techniques like rolling forecast origin, time series split, and blocked cross-validation can be used.\n\n## Forecasting and confidence intervals\n\n- **Forecasting**: The process of making predictions about future values based on historical data. Common methods include:\n  - **ARIMA (AutoRegressive Integrated Moving Average)**: A popular time series forecasting method that combines autoregression, differencing, and moving average components.\n  - **Exponential Smoothing**: A technique that applies decreasing weights to past observations, giving more importance to recent data.\n  - **Prophet**: A forecasting tool developed by Facebook that handles seasonality, holidays, and missing data.\n- **Confidence Intervals**: A range of values that is likely to contain the true value of the forecast. It provides an estimate of the uncertainty associated with the forecast.\n  - **Calculation**: Confidence intervals are typically calculated using the standard error of the forecast and a critical value from the t-distribution or normal distribution.\n  - **Interpretation**: A 95% confidence interval means that there is a 95% chance that the true value will fall within the interval.\n  \n## Key Points:\n\n1. **Forecasting Methods**: Various methods like ARIMA, exponential smoothing, and Prophet can be used for forecasting.\n2. **Uncertainty Estimation**: Confidence intervals provide an estimate of the uncertainty associated with the forecast.\n\n## Practical example of forecasting using Python\n\n- **Practical Example**: Let's walk through a practical example of forecasting using Python.\n  - **Data Preparation**: Load and preprocess the time series data.\n  - **Model Selection**: Choose an appropriate forecasting model (e.g., ARIMA, Prophet).\n  - **Model Training**: Train the model on the historical data.\n  - **Forecasting**: Generate forecasts for future values.\n  - **Evaluation**: Assess the accuracy of the forecasts using appropriate metrics.\n  - **Visualization**: Plot the historical data, forecasts, and confidence intervals.\n\n# **7. Case Study and Discussion (10 minutes)**\n\n## Real-world case study: Application of time series analysis\n\n- **Case Study**: Let's explore a real-world case study where time series analysis is applied.\n  - **Industry**: Choose an industry (e.g., finance, healthcare, retail).\n  - **Problem Statement**: Define the problem that needs to be addressed using time series analysis.\n  - **Data Collection**: Describe the data collection process and the type of data used.\n  - **Model Selection**: Select appropriate time series models for the analysis.\n  - **Analysis**: Perform the time series analysis and interpret the results.\n  - **Outcome**: Discuss the outcomes and how the analysis helped in decision-making.\n  \n## Group discussion on potential projects or applications\n\n- **Group Discussion**: Let's engage in a group discussion to brainstorm potential projects or applications of time series analysis.\n  - **Project Ideas**: Share and discuss various project ideas that can benefit from time series analysis.\n  - **Application Areas**: Identify different application areas such as finance, healthcare, retail, and more.\n  - **Challenges**: Discuss the potential challenges and limitations of applying time series analysis in these projects.\n  - **Collaboration**: Explore opportunities for collaboration and knowledge sharing within the group.\n\n\n## Q&A session\n\n# **8. Conclusion and Further Reading (5 minutes)**\n\n## Summary of key points\n\n## Recommended resources for further study (books, online courses, research papers)\n\n- **Books**: \n  - \"Time Series Analysis and Its Applications\" by Robert H. Shumway and David S. Stoffer\n  - \"Forecasting: Principles and Practice\" by Rob J Hyndman and George Athanasopoulos\n- **Online Courses**: \n  - \"Time Series Analysis and Forecasting\" on Coursera\n  - \"Practical Time Series Analysis\" on Udacity\n- **Research Papers**: \n  - \"A comprehensive review on time series forecasting using deep learning\" by Wen et al.\n  - \"An Empirical Comparison of Machine Learning Models for Time Series Forecasting\" by Makridakis et al.\n\n## Introduction to software tools for time series analysis (e.g., Python libraries, R packages)\n\n- **Python Libraries**: \n  - **Pandas**: For data manipulation and analysis.\n  - **NumPy**: For numerical computations.\n  - **Statsmodels**: For statistical modeling and time series analysis.\n  - **scikit-learn**: For machine learning and predictive modeling.\n  - **TensorFlow/Keras**: For deep learning models.\n  - **Prophet**: For forecasting time series data.\n- **R Packages**: \n  - **forecast**: For time series forecasting.\n  - **tseries**: For time series analysis and computational finance.\n  - **zoo**: For working with regular and irregular time series data.\n  - **xts**: For extensible time series.\n  - **prophet**: For forecasting time series data.\n\n",
    "supporting": [
      "26-TimeSeries_files"
    ],
    "filters": [],
    "includes": {}
  }
}