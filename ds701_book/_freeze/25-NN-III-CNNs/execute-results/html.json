{
  "hash": "a65c720185f209705210fc83904c9f15",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'NN III -- Stochastic Gradient Descent, Batches and Convolutional Neural Networks'\njupyter: python3\n---\n\n\n\n## Recap\n\n[![](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/tools4ds/DS701-Course-Notes/blob/main/ds701_book/jupyter_notebooks/25-NN-III-CNNs.ipynb)\n\nSo far we covered\n\n* Gradients, gradient descent and back propagation\n* Fully connected neural networks (Multi-Layer Perceptron)\n* Training of MLPs using back propagation\n\nToday, we'll cover\n\n* _Stochastic_ gradient descent (SGD)\n* Convolutional Neural Networks (CNNs)\n* Training a CNN with SGD\n\n# Stochastic Gradient Descent\n\n## Batches and Stochastic Gradient Descent\n\n\n* Compute the gradient (e.g. forward pass and backward pass) with only a _random subset_\nof the input data.\n\n> We call the subset a _batch_.\n\n* Work through the dataset by _randomly sampling without replacement_. This is the _stochastic_ part.\n* One pass through the data is called an _epoch_.\n\n::: {.content-visible when-profile=\"slides\"}\n## Batches and Stochastic Gradient Descent\n:::\n\nFor squared error loss with $N$ input samples, the loss for (full-batch) gradient descent was\n\n$$\nL = \\sum_{i=0}^{N-1} \\ell_i = \\sum_{i=0}^{N-1} \\left( y - \\hat{y}  \\right)^2\n$$\n\nFor _Stochastic Gradient Descent_, we calculate the loss only on a _batch_ at as time.\nFor every time $t$, let's denote the batch as $\\mathcal{B}_t$\n\n$$\nL_t = \\sum_{i \\in \\mathcal{B}_t} \\ell_i = \\sum_{i \\in \\mathcal{B}_t} \\left( y - \\hat{y}  \\right)^2\n$$\n\n::: {.content-visible when-profile=\"slides\"}\n## Batches\n:::\n\nLet's look at an example.\n\n::: {#13e0cc32 .cell execution_count=3}\n\n::: {.cell-output .cell-output-display}\n![](25-NN-III-CNNs_files/figure-revealjs/cell-3-output-1.png){width=781 height=411}\n:::\n:::\n\n\nSay we have a training data set of 12 points and we want to use a _batch size_ of 3.\n\nDivide the 12 points into batches of 3 by randomlly selecting points without replacement.\n\n::: {.content-visible when-profile=\"slides\"}\n## Batches\n:::\n\nWe can resample again to create a different set of batches.\n\n::: {#6a57893d .cell execution_count=4}\n\n::: {.cell-output .cell-output-display}\n![](25-NN-III-CNNs_files/figure-revealjs/cell-4-output-1.png){width=781 height=411}\n:::\n:::\n\n\n::: {.content-visible when-profile=\"slides\"}\n## Batches\n:::\n\nThen for every training iteration, you calculate the forward pass and backward pass loss with only the data from the batch.\n\n::: {#b9fc628c .cell execution_count=5}\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nText(0.5, 1.0, 'Batch 4')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](25-NN-III-CNNs_files/figure-revealjs/cell-5-output-2.png){width=632 height=653}\n:::\n:::\n\n\n## Advantages of SGD\n\nThere are two main advantages to _Stochastic Gradient Descent_.\n\n1. You don't read and compute on every input data sample for every training iteration, \n    * Speeds up iteration while still making optimization progress\n    * This works better with limited GPU memory and CPU cache. Not slowing down by thrashing limited memory.\n\n2. Improves training convergence by adding _noise_ to the weight updates.\n    * Can avoid getting stuck in a local minima.\n\n::: {.content-visible when-profile=\"slides\"}\n## Advantages of SGD\n:::\n\nAn example\n\n<!-- Image Credit \"https://udlbook.github.io/udlbook/\"-->\n\n![](figs/NN-figs/L25-GD-vs-SGD.png){width=\"75%\" fig-align=\"center\"}\n\nThis a contour plot showing a loss surface for a model with only 2 parameters.\n\nFor full-batch gradient descent, starting points 1 and 3 still end up at the\nglobal minimum, but starting point 2 get stuck in a local minimum.\n\nFor stochastic gradient descent, starting point 1 still ends up at the global \nminimum, but now starting point 2 also avoids the local minimum and ends up at\nthe global minimum.\n\n# Load an Image Dataset in Batches in PyTorch\n\n\n\n## 1. Load and Scale MNIST\n\nLoad MNIST handwritten digit dataset with 60K training samples and 10K test samples.\n\n::: {#f9ba72e4 .cell execution_count=7}\n``` {.python .cell-code code-fold=\"false\"}\n# Define a transform to scale the pixel values from [0, 255] to [-1, 1]\ntransform = transforms.Compose([transforms.ToTensor(),\n                                transforms.Normalize((0.5,), (0.5,))])\n\nbatch_size = 64\n\n# Download and load the training data\ntrainset = torchvision.datasets.MNIST('./data/MNIST_data/', download=True,\n                                    train=True, transform=transform)\ntrainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, \n                                          shuffle=True)\n\n# Download and load the test data\ntestset = torchvision.datasets.MNIST('./data/MNIST_data/', download=True,\n                                    train=False, transform=transform)\ntestloader = torch.utils.data.DataLoader(testset, batch_size=batch_size, \n                                         shuffle=True)\n```\n:::\n\n\n* `torchvision.dataset.MNIST` is a convenience class which inherits from\n  `torch.utils.data.Dataset` (see [doc](https://pytorch.org/docs/stable/data.html#torch.utils.data.Dataset))\n   that wraps a particular dataset and overwrites a `__getitem__()` method which\n   retrieves a data sample given an \n   index or a key.\n\n* If we give the argument `train=True`, it returns the training set, while the \n  argument `train=False` returns the test set.\n\n* `torch.utils.data.DataLoader()` takes a dataset as in the previous line and\n  returns a python _iterable_ which lets you loop through the data.\n\n* We give `DataLoader` the _batch size_, and it will return a batch of data samples\n  on each iteration.\n\n* By passing `shuffle=True`, we are telling the data loader to shuffle the batches\n  after every epoch.\n\n::: {#6365d2e9 .cell execution_count=8}\n``` {.python .cell-code}\nprint(f\"No. of training images: {len(trainset)}\")\nprint(f\"No. of test images: {len(testset)}\")\nprint(\"The dataset classes are:\")\nprint(trainset.classes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNo. of training images: 60000\nNo. of test images: 10000\nThe dataset classes are:\n['0 - zero', '1 - one', '2 - two', '3 - three', '4 - four', '5 - five', '6 - six', '7 - seven', '8 - eight', '9 - nine']\n```\n:::\n:::\n\n\n::: {.content-visible when-profile=\"slides\"}\n## 1. Load and Scale MNIST\n:::\n\nWe can see the data loader, `trainloader` in action in the code below to\nget a batch and visualize it along with the labels.\n\nEverytime we rerun the cell we will get a different batch.\n\n:::: {.columns}\n::: {.column width=\"40%\"}\n\n::: {#179655f6 .cell execution_count=9}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef imshow(img):\n    img = img / 2 + 0.5     # unnormalize\n    npimg = img.numpy()\n    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n    plt.show()\n\n# get some random training images\ndataiter = iter(trainloader)\nimages, labels = next(dataiter)\n\n# show images\nimshow(torchvision.utils.make_grid(images))\n```\n\n::: {.cell-output .cell-output-display}\n![](25-NN-III-CNNs_files/figure-revealjs/cell-9-output-1.png){width=424 height=415}\n:::\n:::\n\n\n:::\n::: {.column width=\"60%\"}\n\n::: {#714be434 .cell execution_count=10}\n``` {.python .cell-code}\nfrom IPython.display import display, HTML\n\n# Assuming batch_size is 64 and images are displayed in an 8x8 grid\nlabels_grid = [trainset.classes[labels[j]] for j in range(64)]\nlabels_grid = np.array(labels_grid).reshape(8, 8)\n\ndf = pd.DataFrame(labels_grid)\n\n# Generate HTML representation of DataFrame with border\nhtml = df.to_html(border=1)\n\n# Add CSS to shrink the size of the table\nhtml = f\"\"\"\n<style>\n    table {{\n        font-size: 14px;\n    }}\n</style>\n{html}\n\"\"\"\n\n# Display the DataFrame\ndisplay(HTML(html))\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<style>\n    table {\n        font-size: 14px;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6 - six</td>\n      <td>4 - four</td>\n      <td>7 - seven</td>\n      <td>0 - zero</td>\n      <td>3 - three</td>\n      <td>7 - seven</td>\n      <td>6 - six</td>\n      <td>0 - zero</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0 - zero</td>\n      <td>8 - eight</td>\n      <td>1 - one</td>\n      <td>4 - four</td>\n      <td>8 - eight</td>\n      <td>0 - zero</td>\n      <td>9 - nine</td>\n      <td>4 - four</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1 - one</td>\n      <td>7 - seven</td>\n      <td>9 - nine</td>\n      <td>5 - five</td>\n      <td>4 - four</td>\n      <td>5 - five</td>\n      <td>7 - seven</td>\n      <td>7 - seven</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2 - two</td>\n      <td>6 - six</td>\n      <td>0 - zero</td>\n      <td>1 - one</td>\n      <td>9 - nine</td>\n      <td>8 - eight</td>\n      <td>9 - nine</td>\n      <td>4 - four</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3 - three</td>\n      <td>1 - one</td>\n      <td>7 - seven</td>\n      <td>5 - five</td>\n      <td>7 - seven</td>\n      <td>3 - three</td>\n      <td>8 - eight</td>\n      <td>7 - seven</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>4 - four</td>\n      <td>0 - zero</td>\n      <td>0 - zero</td>\n      <td>0 - zero</td>\n      <td>4 - four</td>\n      <td>7 - seven</td>\n      <td>2 - two</td>\n      <td>5 - five</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1 - one</td>\n      <td>1 - one</td>\n      <td>5 - five</td>\n      <td>8 - eight</td>\n      <td>4 - four</td>\n      <td>8 - eight</td>\n      <td>5 - five</td>\n      <td>4 - four</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>1 - one</td>\n      <td>3 - three</td>\n      <td>8 - eight</td>\n      <td>1 - one</td>\n      <td>3 - three</td>\n      <td>3 - three</td>\n      <td>3 - three</td>\n      <td>1 - one</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n:::\n::::\n\n\n# Convolutional Neural Networks\n\n## Convolutional Network Applications\n\n<!-- Image Credit \"https://udlbook.github.io/udlbook/\"-->\n\n![](figs/NN-figs/L25-img-class.svg){width=\"75%\" fig-align=\"center\"}\n\n* Multi-class classification problem ( >2 possible classes)\n* Convolutional network with classification output\n\n::: {.content-visible when-profile=\"slides\"}\n## Convolutional Network Applications\n:::\n\n<!-- Image Credit \"https://udlbook.github.io/udlbook/\"-->\n\n![](figs/NN-figs/L25-obj-det.png){width=\"75%\" fig-align=\"center\"}\n\n* Localize and classify objects in an image\n* Convolutional network with classification _and_ regression output\n\n::: {.content-visible when-profile=\"slides\"}\n## Convolutional Network Applications\n:::\n\n<!-- Image Credit \"https://udlbook.github.io/udlbook/\"-->\n\n![](figs/NN-figs/L25-img-seg.png){width=\"75%\" fig-align=\"center\"}\n\n* Classify each pixel in an image to 2 or more classes\n* Convolutional encoder-decoder network with a classification values for each pixel.\n\n## Convolutional Neural Networks\n\nProblems with fully-connected networks\n\n* Size\n    * 224x224 RGB image = 150,528 dimensions\n    * Hidden layers generally larger than inputs\n    * One hidden layer = 150,520x150,528 weights -- 22 billion\n* Nearby pixels statistically related\n    * But fully connected network doesn't exploit spatial correlation\n* Should be stable under transformations\n    * Don’t want to re-learn appearance at different parts of image\n\n## Classification Invariant to Shift\n\n<!-- Image Credit \"https://udlbook.github.io/udlbook/\"-->\n\n![](figs/NN-figs/L25-shift-img-class.png){width=\"75%\" fig-align=\"center\"}\n\n\n## Image Segmentation Invariant to Shift\n\n<!-- Image Credit \"https://udlbook.github.io/udlbook/\"-->\n\n![](figs/NN-figs/L25-shift-seg.png){.r-stretch width=\"65%\" fig-align=\"center\"}\n\nSolution: Convolutional Neural Networks\n\n* Parameters only look at local data regions\n* Shares parameters across image or signal\n\n## 1-D Convolution\n\n<!-- Image Credit \"https://udlbook.github.io/udlbook/\"-->\n\n![](figs/NN-figs/L25-conv06.png){width=\"65%\" fig-align=\"center\"}\n\nIn _convolutional neural networks_, we define a set of weights that we move across\nthe input data.\n\nExample with 3 weights and input of length 6.\nFor figure (a), we calculate \n\n$$\nz_2 = \\omega_1 x_1 + \\omega_2 x_2 + \\omega_3 x_3\n$$\n\n::: {.content-visible when-profile=\"slides\"}\n## 1-D Convolution\n![](figs/NN-figs/L25-conv06.png){width=\"65%\" fig-align=\"center\"}\n:::\n\nTo calculate $z_3$, we shift the weights over 1 place (figure (b)) and then\nweight and sum the inputs. We can generalize the equation slightly.\n\n$$\nz_i = \\omega_1 x_{i - 1} + \\omega_2 x_i + \\omega_3 x_{i+1}\n$$\n\n::: {.content-visible when-profile=\"slides\"}\n## 1-D Convolution -- Edge Cases\n![](figs/NN-figs/L25-conv06.png){width=\"65%\" fig-align=\"center\"}\n:::\n\nBut what do we do about $z_1$?\n\nWe can calculate $z_1$ by _padding_ our input data. In figure (c), we\nsimply add $0$, which means we can now calculate $z_1$.\n\n::: {.content-visible when-profile=\"slides\"}\n## 1-D Convolution -- Edge Cases\n:::\n\n<!-- Image Credit \"https://udlbook.github.io/udlbook/\"-->\n\n![](figs/NN-figs/L25-conv07.png){width=\"85%\" fig-align=\"center\"}\n\nAlternatively, we can just reduce the size of the output, by only calculating where\nwe have _valid_ input data, as in figure (d).\n\nFor 1-D data, this reduces the output size by 1 at the beginning and end of the\ndata, so by 2 overall for length-3 filter.\n\n::: {.content-visible when-profile=\"slides\"}\n## 1-D Convolution -- Parameters\n:::\n\n<!-- Image Credit \"https://udlbook.github.io/udlbook/\"-->\n\n![](figs/NN-figs/L25-conv-fig10-3.png){width=\"75%\" fig-align=\"center\"}\n\nThere are a few design choices one can make with convolution layers, such as:\n\n1. __filter length__, e.g. size 3 in figures (a) and (b) and 5 in (c)\n\n::: {.content-visible when-profile=\"slides\"}\n## 1-D Convolution -- Parameters\n![](figs/NN-figs/L25-conv-fig10-3.png){width=\"75%\" fig-align=\"center\"}\n:::\n\n2. __stride__, which is how much you shift to calculate the next output. Common values are\n    1. _stride 1_ as we saw in the previous examples and in figures (c) and (d)\n    2. _stride 2_, where you shift by 2 instead of 1, an effectively halve the size of the output as in figures (a) and (b)\n\n::: {.content-visible when-profile=\"slides\"}\n## 1-D Convolution -- Parameters\n![](figs/NN-figs/L25-conv-fig10-3.png){width=\"75%\" fig-align=\"center\"}\n:::\n\n3. __dilation__, where you expand the filter as in figure (d)\n\n## 2D Convolution\n\nFor images and video frames we use a two-dimensional convolution\n(called `conv2d` in PyTorch) which is an extension of the 1-D\nconvolution as shown in the following illustration.\nFrom [cs231n](https://cs231n.github.io/convolutional-networks/).\n\nLet's look at a 2D convolution layer: $7 \\times 7 \\times 3 \\rightarrow 3 \\times 3 \\times 2$\n\n<!-- Image Credit \"https://cs231n.github.io/convolutional-networks/\"-->\n\n<iframe src=\"figs/NN-figs/conv-demo/index.html\" width=\"100%\" height=\"800px\"></iframe>\n\n<!-- ![](figs/NN-figs/L25-conv-2d.png){width=\"75%\" fig-align=\"center\"} -->\n\n\n## Define a CNN in PyTorch\n\nWe will do the following steps in order:\n\n1. We already loaded and scaled the MNIST training and test datasets using\n   ``torchvision``\n2. Define a Convolutional Neural Network\n3. Define a loss function\n4. Train the network on the training data\n5. Test the network on the test data\n\n::: {.content-visible when-profile=\"slides\"}\n## Define a CNN in PyTorch\n:::\n\nDefine and instantiate a CNN for MNIST.\n\n::: {#d66bfc42 .cell execution_count=11}\n``` {.python .cell-code code-fold=\"false\"}\n# network for MNIST\nimport torch\nfrom torch import nn\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.conv1 = nn.Conv2d(1, 32, 3, 1)\n        self.conv2 = nn.Conv2d(32, 64, 3, 1)\n        self.fc1 = nn.Linear(9216, 128)\n        self.fc2 = nn.Linear(128, 10)\n\n    def forward(self, x):\n        x = self.conv1(x)\n        x = nn.functional.relu(x)\n        x = self.conv2(x)\n        x = nn.functional.relu(x)\n        x = nn.functional.max_pool2d(x, 2)\n        x = torch.flatten(x, 1)\n        x = self.fc1(x)\n        x = nn.functional.relu(x)\n        x = self.fc2(x)\n        output = nn.functional.log_softmax(x, dim=1)\n        return output\n\nnet = Net()\n```\n:::\n\n\nWhere the `Conv2d` layer is defined as:\n\n```python\nCLASS torch.nn.Conv2d(in_channels, out_channels, kernel_size, \n                      stride=1, padding_mode='valid', ...)\n```\n\n::: {.content-visible when-profile=\"slides\"}\n## Define a CNN in PyTorch\n:::\n\nWe can see the layers and shapes of the data as it passes through the network.\n\n\n| Layer   | Kernel Size | Stride | Input Shape | Input Channels | Output Channels | Output Shape |\n| ------- | ----------- | ------ | ----------- | -------------- | --------------- | ------------ |\n| Conv2D/ReLU  | (3x3)       | 1      |  28x28      |    1           |    32           |  26x26       |\n| Conv2D/ReLU  | (3x3)       | 1      |  26x26      |    32          |    64           |  24x24       |\n| Max_pool2d | (2x2)    | 2      |  24x24      |    64          |    64           |  12x12       |\n| Flatten |             |        |  12x12      |    64          |    1            |  9216x1      |\n| FC/ReLU |             |        |  9216x1     |    1           |    1            |  128x1       |\n| FC Linear |           |        |  128x1      |    1           |    1            |  10x1        |\n| Soft Max |            |        |  10x1      |    1           |    1            |  10x1        |\n\n::: {.content-visible when-profile=\"slides\"}\n## Define a CNN in PyTorch\n:::\n\nHere's a common way to visualize a CNN architecture.\n\n<!-- Image Credit \"https://alexlenail.me/NN-SVG/AlexNet.html\"-->\n\n![](figs/NN-figs/L25-mnist-cnn2.svg){width=\"75%\" fig-align=\"center\"}\n\n[NN-SVG](https://alexlenail.me/NN-SVG/AlexNet.html)\n\n## 3. Define a Loss function and optimizer\n\nWe'll use a Classification Cross-Entropy loss and SGD with momentum.\n\n::: {#4e160431 .cell execution_count=12}\n``` {.python .cell-code code-fold=\"false\"}\nimport torch.optim as optim\n\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)\n```\n:::\n\n\n## Cross Entropy Loss\n\n* Popular loss function for multi-class classification that measures the \n  _dissimilarity_ between the predicted class log probability $\\log(p_i)$ and\n  the true class $y_i$.\n\n$$\n- \\sum_i y_i \\log(p_i)\n$$\n\nSee for example \n[here](https://machinelearningmastery.com/cross-entropy-for-machine-learning/) \nfor more information.\n\n## Momentum\n\nMomentum is a technique used in optimizing neural networks that helps accelerate\ngradients vectors in the right directions, leading to faster convergence. It is\ninspired by physical laws of motion where the optimizer uses 'momentum' to push\nover hilly terrain and valleys to find the global minimum.\n\nIn gradient descent, the weight update rule with momentum is given by:\n\n$$ \nm_{t+1} = \\beta m_t + (1 - \\beta) \\nabla J(w)\n$$\n\n$$\nw_{t+1} = w_t - \\alpha m_{t+1}\n$$\n\nwhere:\n\n* $m_t$ is the momentum (which drives the update at iteration $t$), \n* $\\beta \\in [0, 1)$, typically 0.9, controls the degree to which the gradient is smoothed over time, and \n* $\\alpha$ is the learning rate.\n\nSee _Understanding Deep Learning_, Section 6.3 to learn more.\n\n## 4. Train the network\n\n::: {#26b7237c .cell execution_count=13}\n``` {.python .cell-code code-fold=\"false\"}\nprint(f\"[Epoch #, Iteration #] loss\")\n\n# loop over the dataset multiple times\n# change this value to 2\nfor epoch in range(1):  \n    \n    running_loss = 0.0\n    for i, data in enumerate(trainloader, 0):\n        # get the inputs; data is a list of [inputs, labels]\n        inputs, labels = data\n\n        # zero the parameter gradients\n        optimizer.zero_grad()\n\n        # forward + backward + optimize\n        outputs = net(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        # print statistics\n        running_loss += loss.item()\n        if i % 100 == 99:    # print every 2000 mini-batches\n            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')\n            running_loss = 0.0\n\nprint('Finished Training')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[Epoch #, Iteration #] loss\n[1,   100] loss: 0.109\n[1,   200] loss: 0.059\n[1,   300] loss: 0.026\n[1,   400] loss: 0.024\n[1,   500] loss: 0.021\n[1,   600] loss: 0.018\n[1,   700] loss: 0.018\n[1,   800] loss: 0.018\n[1,   900] loss: 0.017\nFinished Training\n```\n:::\n:::\n\n\n::: {.content-visible when-profile=\"slides\"}\n## 4. Train the network\n:::\n\nDisplay some of the images from the test set with the ground truth labels.\n\n:::: {.columns}\n::: {.column width=\"40%\"}\n\n::: {#55beca89 .cell execution_count=14}\n``` {.python .cell-code}\ndataiter = iter(testloader)\nimages, labels = next(dataiter)\n\n# print images\nimshow(torchvision.utils.make_grid(images))\n```\n\n::: {.cell-output .cell-output-display}\n![](25-NN-III-CNNs_files/figure-revealjs/cell-14-output-1.png){width=424 height=415}\n:::\n:::\n\n\n:::\n::: {.column width=\"60%\"}\n\n::: {#fcb7ac7f .cell execution_count=15}\n``` {.python .cell-code}\nfrom IPython.display import display, HTML\n\n# Assuming batch_size is 64 and images are displayed in an 8x8 grid\nlabels_grid = [testset.classes[labels[j]] for j in range(64)]\nlabels_grid = np.array(labels_grid).reshape(8, 8)\n\ndf = pd.DataFrame(labels_grid)\n\n# Generate HTML representation of DataFrame with border and smaller font size\nhtml = df.to_html(border=1)\n\n# Add CSS to shrink the size of the table\nhtml = f\"\"\"\n<style>\n    table {{\n        font-size: 14px;\n    }}\n</style>\n{html}\n\"\"\"\n\n# Display the DataFrame\ndisplay(HTML(html))\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<style>\n    table {\n        font-size: 14px;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3 - three</td>\n      <td>0 - zero</td>\n      <td>7 - seven</td>\n      <td>0 - zero</td>\n      <td>5 - five</td>\n      <td>7 - seven</td>\n      <td>8 - eight</td>\n      <td>3 - three</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0 - zero</td>\n      <td>5 - five</td>\n      <td>5 - five</td>\n      <td>7 - seven</td>\n      <td>1 - one</td>\n      <td>7 - seven</td>\n      <td>2 - two</td>\n      <td>3 - three</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4 - four</td>\n      <td>0 - zero</td>\n      <td>5 - five</td>\n      <td>7 - seven</td>\n      <td>4 - four</td>\n      <td>8 - eight</td>\n      <td>8 - eight</td>\n      <td>3 - three</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5 - five</td>\n      <td>4 - four</td>\n      <td>6 - six</td>\n      <td>4 - four</td>\n      <td>2 - two</td>\n      <td>9 - nine</td>\n      <td>9 - nine</td>\n      <td>6 - six</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9 - nine</td>\n      <td>4 - four</td>\n      <td>4 - four</td>\n      <td>3 - three</td>\n      <td>8 - eight</td>\n      <td>6 - six</td>\n      <td>2 - two</td>\n      <td>0 - zero</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>8 - eight</td>\n      <td>6 - six</td>\n      <td>4 - four</td>\n      <td>8 - eight</td>\n      <td>1 - one</td>\n      <td>3 - three</td>\n      <td>1 - one</td>\n      <td>6 - six</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7 - seven</td>\n      <td>7 - seven</td>\n      <td>2 - two</td>\n      <td>3 - three</td>\n      <td>9 - nine</td>\n      <td>3 - three</td>\n      <td>5 - five</td>\n      <td>3 - three</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0 - zero</td>\n      <td>3 - three</td>\n      <td>2 - two</td>\n      <td>8 - eight</td>\n      <td>7 - seven</td>\n      <td>0 - zero</td>\n      <td>1 - one</td>\n      <td>4 - four</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n:::\n::::\n\n\n::: {.content-visible when-profile=\"slides\"}\n## 4. Train the network\n:::\n\nLet's run inference (forward pass) on the model to get numeric outputs.\n\n::: {#080bba73 .cell execution_count=16}\n``` {.python .cell-code code-fold=\"false\"}\noutputs = net(images)\n```\n:::\n\n\nGet the index of the element with highest value and print the label \nassociated with that index.\n\n::: {#a3ee303c .cell execution_count=17}\n``` {.python .cell-code code-fold=\"false\"}\n_, predicted = torch.max(outputs, 1)\n```\n:::\n\n\n::: {.content-visible when-profile=\"slides\"}\n## 4. Train the network\n:::\n\nWe can display the predicted labels for the images.\n\n:::: {.columns}\n::: {.column width=\"40%\"}\n\n::: {#4324680e .cell execution_count=18}\n``` {.python .cell-code}\n# print images\nimshow(torchvision.utils.make_grid(images))\n```\n\n::: {.cell-output .cell-output-display}\n![](25-NN-III-CNNs_files/figure-revealjs/cell-18-output-1.png){width=424 height=415}\n:::\n:::\n\n\n:::\n::: {.column width=\"60%\"}\n\n::: {#70d1aeca .cell execution_count=19}\n``` {.python .cell-code}\n# Assuming batch_size is 64 and images are displayed in an 8x8 grid\nlabels_grid = [testset.classes[predicted[j]] for j in range(64)]\nlabels_grid = np.array(labels_grid).reshape(8, 8)\n\ndf = pd.DataFrame(labels_grid)\n\n# Generate HTML representation of DataFrame with border\nhtml = df.to_html(border=1)\n\n# Add CSS to shrink the size of the table\nhtml = f\"\"\"\n<style>\n    table {{\n        font-size: 14px;\n    }}\n</style>\n{html}\n\"\"\"\n\n# Display the DataFrame\ndisplay(HTML(html))\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n<style>\n    table {\n        font-size: 14px;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3 - three</td>\n      <td>0 - zero</td>\n      <td>7 - seven</td>\n      <td>0 - zero</td>\n      <td>0 - zero</td>\n      <td>7 - seven</td>\n      <td>8 - eight</td>\n      <td>3 - three</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0 - zero</td>\n      <td>5 - five</td>\n      <td>5 - five</td>\n      <td>7 - seven</td>\n      <td>1 - one</td>\n      <td>7 - seven</td>\n      <td>5 - five</td>\n      <td>3 - three</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4 - four</td>\n      <td>0 - zero</td>\n      <td>5 - five</td>\n      <td>7 - seven</td>\n      <td>4 - four</td>\n      <td>8 - eight</td>\n      <td>8 - eight</td>\n      <td>7 - seven</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5 - five</td>\n      <td>4 - four</td>\n      <td>6 - six</td>\n      <td>4 - four</td>\n      <td>2 - two</td>\n      <td>9 - nine</td>\n      <td>9 - nine</td>\n      <td>6 - six</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9 - nine</td>\n      <td>4 - four</td>\n      <td>4 - four</td>\n      <td>3 - three</td>\n      <td>8 - eight</td>\n      <td>6 - six</td>\n      <td>8 - eight</td>\n      <td>0 - zero</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>8 - eight</td>\n      <td>6 - six</td>\n      <td>4 - four</td>\n      <td>8 - eight</td>\n      <td>1 - one</td>\n      <td>3 - three</td>\n      <td>1 - one</td>\n      <td>6 - six</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7 - seven</td>\n      <td>7 - seven</td>\n      <td>4 - four</td>\n      <td>3 - three</td>\n      <td>9 - nine</td>\n      <td>3 - three</td>\n      <td>5 - five</td>\n      <td>3 - three</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>0 - zero</td>\n      <td>3 - three</td>\n      <td>2 - two</td>\n      <td>8 - eight</td>\n      <td>7 - seven</td>\n      <td>0 - zero</td>\n      <td>1 - one</td>\n      <td>4 - four</td>\n    </tr>\n  </tbody>\n</table>\n```\n:::\n:::\n\n\n:::\n::::\n\n\n::: {.content-visible when-profile=\"slides\"}\n## 4. Train the network\n:::\n\nEvaluate over the entire test set.\n\n::: {#a5ea21b8 .cell execution_count=20}\n``` {.python .cell-code code-fold=\"false\"}\ncorrect = 0\ntotal = 0\n# since we're not training, we don't need to calculate the gradients for our outputs\nwith torch.no_grad():\n    for data in testloader:\n        images, labels = data\n        # calculate outputs by running images through the network\n        outputs = net(images)\n        # the class with the highest energy is what we choose as prediction\n        _, predicted = torch.max(outputs.data, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n\nprint(f'Accuracy of the network on the 10000 test images: {100 * correct // total} %')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy of the network on the 10000 test images: 91 %\n```\n:::\n:::\n\n\n::: {.content-visible when-profile=\"slides\"}\n## 4. Train the network\n:::\n\nEvaluate the performance per class.\n\n::: {#df6686b9 .cell execution_count=21}\n``` {.python .cell-code}\n# prepare to count predictions for each class\ncorrect_pred = {classname: 0 for classname in testset.classes}\ntotal_pred = {classname: 0 for classname in testset.classes}\n\n# again no gradients needed\nwith torch.no_grad():\n    for data in testloader:\n        images, labels = data\n        outputs = net(images)\n        _, predictions = torch.max(outputs, 1)\n        # collect the correct predictions for each class\n        for label, prediction in zip(labels, predictions):\n            if label == prediction:\n                correct_pred[testset.classes[label]] += 1\n            total_pred[testset.classes[label]] += 1\n\n\n# print accuracy for each class\nfor classname, correct_count in correct_pred.items():\n    accuracy = 100 * float(correct_count) / total_pred[classname]\n    print(f'Accuracy for class: {classname:5s} is {accuracy:.1f} %')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy for class: 0 - zero is 97.6 %\nAccuracy for class: 1 - one is 96.1 %\nAccuracy for class: 2 - two is 87.2 %\nAccuracy for class: 3 - three is 84.5 %\nAccuracy for class: 4 - four is 94.1 %\nAccuracy for class: 5 - five is 92.9 %\nAccuracy for class: 6 - six is 88.7 %\nAccuracy for class: 7 - seven is 93.7 %\nAccuracy for class: 8 - eight is 91.7 %\nAccuracy for class: 9 - nine is 87.2 %\n```\n:::\n:::\n\n\n## To Dig Deeper\n\nLook at common CNN network architectures. \n\nFor example see [_Understanding Deep Learning_](https://udlbook.github.io/udlbook/)\nsection 10.5 or \n[PyTorch models and pre-trained weights](https://pytorch.org/vision/stable/models.html).\n\n## Recap\n\nWe covered the following topics:\n\n* Convolutional Neural Networks\n* 1-D and 2-D convolutions\n* Common CNN architectures\n* Training a CNN in PyTorch\n\n",
    "supporting": [
      "25-NN-III-CNNs_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}